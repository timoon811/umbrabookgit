const fs = require('fs');

// –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
const csvData = fs.readFileSync('all_users.csv', 'utf8');
const lines = csvData.trim().split('\n');
const headers = lines[0].split(',');

// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
const userLines = lines.slice(1);

console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${userLines.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ TypeScript
const users = userLines.map(line => {
  // –†–∞–∑–±–∏—Ä–∞–µ–º CSV —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –∑–∞–ø—è—Ç—ã—Ö –≤ –∫–∞–≤—ã—á–∫–∞—Ö
  const values = [];
  let currentValue = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      values.push(currentValue);
      currentValue = '';
    } else {
      currentValue += char;
    }
  }
  values.push(currentValue); // –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
  if (values.length !== headers.length) {
    console.warn(`–°—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç ${values.length} –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ ${headers.length}:`, line.substring(0, 100));
    return null;
  }
  
  const [id, email, name, password, telegram, role, status, isBlocked, createdAt, updatedAt] = values;
  
  return {
    id: id.trim(),
    email: email.trim(),
    name: name.trim(),
    password: password.trim(),
    telegram: telegram.trim() || null,
    role: role.trim(),
    status: status.trim(),
    isBlocked: isBlocked.trim() === 't',
    createdAt: createdAt.trim(),
    updatedAt: updatedAt.trim()
  };
}).filter(user => user !== null);

console.log(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–¥ –¥–ª—è API endpoint
const tsCode = `import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST() {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await prisma.users.deleteMany({});
    console.log("‚úÖ –û—á–∏—Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    
    const allUsers = ${JSON.stringify(users, null, 6)};

    console.log(\`–°–æ–∑–¥–∞–µ–º \${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞—Ç—á–∞–º–∏ –ø–æ 10
    const batchSize = 10;
    let created = 0;
    
    for (let i = 0; i < allUsers.length; i += batchSize) {
      const batch = allUsers.slice(i, i + batchSize);
      
      for (const user of batch) {
        try {
          await prisma.users.create({
            data: {
              id: user.id,
              email: user.email,
              name: user.name,
              password: user.password,
              telegram: user.telegram,
              role: user.role as any,
              status: user.status as any,
              isBlocked: user.isBlocked,
              createdAt: new Date(user.createdAt),
              updatedAt: new Date(user.updatedAt)
            }
          });
          created++;
          
          if (created % 20 === 0) {
            console.log(\`‚úÖ –°–æ–∑–¥–∞–Ω–æ \${created} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\`);
          }
        } catch (error: any) {
          console.warn(\`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${user.email}:\`, error.message);
        }
      }
    }

    console.log(\`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ \${created} –∏–∑ \${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\`);

    return NextResponse.json({ 
      success: true, 
      message: \`–£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ \${created} –∏–∑ \${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\`,
      created_count: created,
      total_count: allUsers.length
    });

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    return NextResponse.json({ 
      error: 'Migration failed', 
      details: error.message 
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
fs.writeFileSync('src/app/api/migrate-all-users/route.ts', tsCode);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª src/app/api/migrate-all-users/route.ts');

// –í—ã–≤–æ–¥–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
const roleStats = {};
const statusStats = {};

users.forEach(user => {
  roleStats[user.role] = (roleStats[user.role] || 0) + 1;
  statusStats[user.status] = (statusStats[user.status] || 0) + 1;
});

console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:', roleStats);
console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusStats);
