import { Block } from '@/types/editor';

/**
 * –ü–∞—Ä—Å–∏—Ç Markdown –≤ –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
export function parseMarkdownToBlocks(markdown: string): Block[] {
  if (!markdown.trim()) {
    return [createEmptyBlock()];
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ (markdown –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã)
  const sections = markdown.split(/\n\s*\n/);
  const blocks: Block[] = [];

  for (const section of sections) {
    const trimmedSection = section.trim();
    if (!trimmedSection) continue;

    const lines = trimmedSection.split('\n');
    const firstLine = lines[0];

    // YouTube —Å—Å—ã–ª–∫–∏
    const youtubeMatch = firstLine.match(/^https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
    if (youtubeMatch && lines.length === 1) {
      blocks.push({
        id: generateId(),
        type: 'youtube',
        content: firstLine,
        metadata: { youtubeId: youtubeMatch[1] }
      });
      continue;
    }

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    if (lines.length === 1) {
      if (firstLine.startsWith('# ')) {
        blocks.push({
          id: generateId(),
          type: 'heading1',
          content: firstLine.substring(2).trim(), // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
          metadata: {}
        });
        continue;
      }

      if (firstLine.startsWith('## ')) {
        blocks.push({
          id: generateId(),
          type: 'heading2',
          content: firstLine.substring(3).trim(), // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
          metadata: {}
        });
        continue;
      }

      if (firstLine.startsWith('### ')) {
        blocks.push({
          id: generateId(),
          type: 'heading3',
          content: firstLine.substring(4).trim(), // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
          metadata: {}
        });
        continue;
      }

      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ alt –∏ src)
      const imageMatch = firstLine.match(/!\[([^\]]*)\]\(([^)]*)\)/);
      if (imageMatch) {
        blocks.push({
          id: generateId(),
          type: 'image',
          content: imageMatch[2] || '',
          metadata: { 
            url: imageMatch[2] || '', 
            alt: imageMatch[1] || '', 
            caption: imageMatch[1] || '' 
          }
        });
        continue;
      }

      // –§–∞–π–ª—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã)
      const fileMatch = firstLine.match(/\[üìé\s*([^\]]+)\]\(([^)]+)\)/);
      if (fileMatch) {
        blocks.push({
          id: generateId(),
          type: 'file',
          content: fileMatch[2],
          metadata: { url: fileMatch[2], name: fileMatch[1] }
        });
        continue;
      }

      // –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–±—ã—á–Ω—ã–µ markdown —Å—Å—ã–ª–∫–∏)
      const externalLinkMatch = firstLine.match(/^\[([^\]]+)\]\((https?:\/\/[^)]+)\)$/);
      if (externalLinkMatch) {
        blocks.push({
          id: generateId(),
          type: 'external-link',
          content: externalLinkMatch[1],
          metadata: { linkUrl: externalLinkMatch[2] }
        });
        continue;
      }

      // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—Å—Å—ã–ª–∫–∏ –Ω–∞ /docs/)
      const internalLinkMatch = firstLine.match(/^\[([^\]]+)\]\(\/docs\/([^)]+)\)$/);
      if (internalLinkMatch) {
        blocks.push({
          id: generateId(),
          type: 'internal-link',
          content: internalLinkMatch[1],
          metadata: { internalPageId: internalLinkMatch[2] }
        });
        continue;
      }

      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      if (firstLine.trim() === '---') {
        blocks.push({
          id: generateId(),
          type: 'divider',
          content: '',
          metadata: {}
        });
        continue;
      }
    }

    // –ö–æ–¥ –±–ª–æ–∫–∏
    if (firstLine.startsWith('```')) {
      const language = firstLine.substring(3).trim() || 'text';
      const codeLines = lines.slice(1); // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```

      // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ```
      if (codeLines.length > 0 && codeLines[codeLines.length - 1].trim() === '```') {
        codeLines.pop();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–¥–µ
      blocks.push({
        id: generateId(),
        type: 'code',
        content: codeLines.join('\n'),
        metadata: { language }
      });
      continue;
    }

    // Callout –±–ª–æ–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –î–û –æ–±—ã—á–Ω—ã—Ö —Ü–∏—Ç–∞—Ç!)
    const calloutMatch = firstLine.match(/^>\s*\*\*(INFO|WARNING|ERROR|SUCCESS)\*\*:\s*(.+)$/i);
    if (calloutMatch) {
      const calloutType = calloutMatch[1].toLowerCase() as 'info' | 'warning' | 'error' | 'success';
      const content = lines.length > 1
        ? [calloutMatch[2], ...lines.slice(1)].join('\n')
        : calloutMatch[2];

      blocks.push({
        id: generateId(),
        type: 'callout',
        content: content,
        metadata: { calloutType }
      });
      continue;
    }

    // –¶–∏—Ç–∞—Ç—ã (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if (firstLine.startsWith('> ')) {
      const quoteLines = lines.map(line =>
        line.startsWith('> ') ? line.substring(2) : line
      );
      blocks.push({
        id: generateId(),
        type: 'quote',
        content: quoteLines.join('\n'),
        metadata: {}
      });
      continue;
    }

    // –°–ø–∏—Å–∫–∏ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ) - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    if (firstLine.match(/^[-*] /) || firstLine.match(/^\d+\. /)) {
      const isNumbered = firstLine.match(/^\d+\. /);
      
      // –ë–æ–ª–µ–µ —É–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ - –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
      const listItems = [];
      let currentItem = '';
      
      for (const line of lines) {
        if (line.match(/^[-*] /) || line.match(/^\d+\. /)) {
          // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
          if (currentItem) {
            listItems.push(currentItem.trim());
          }
          currentItem = line.replace(/^[-*] /, '').replace(/^\d+\. /, '');
        } else if (line.trim() && currentItem) {
          // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å –æ—Ç—Å—Ç—É–ø–æ–º –∏–ª–∏ –±–µ–∑)
          currentItem += '\n' + line.trim();
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
      if (currentItem) {
        listItems.push(currentItem.trim());
      }

      blocks.push({
        id: generateId(),
        type: isNumbered ? 'numbered-list' : 'list',
        content: listItems.join('\n'),
        metadata: {}
      });
      continue;
    }

    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    blocks.push({
      id: generateId(),
      type: 'paragraph',
      content: trimmedSection,
      metadata: {}
    });
  }

  return blocks.length > 0 ? blocks : [createEmptyBlock()];
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ –≤ Markdown
 */
export function convertBlocksToMarkdown(blocks: Block[]): string {
  return blocks.map(block => {
    switch (block.type) {
      case 'heading1':
        return `# ${block.content}`;
      case 'heading2':
        return `## ${block.content}`;
      case 'heading3':
        return `### ${block.content}`;
      case 'quote':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        return block.content.split('\n').map(line => `> ${line}`).join('\n');
      case 'code':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        return `\`\`\`${block.metadata?.language || 'text'}\n${block.content}\n\`\`\``;
      case 'list':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        return block.content.split('\n').map(line => `- ${line}`).join('\n');
      case 'numbered-list':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        return block.content.split('\n').map((line, index) => `${index + 1}. ${line}`).join('\n');
      case 'image':
        return `![${block.metadata?.alt || ''}](${block.metadata?.url || block.content})`;
      case 'file':
        return `[üìé ${block.metadata?.name || '–§–∞–π–ª'}](${block.metadata?.url || block.content})`;
      case 'youtube':
        return block.content;
      case 'internal-link':
        return `[${block.content}](/docs/${block.metadata?.internalPageId})`;
      case 'external-link':
        return `[${block.content}](${block.metadata?.linkUrl})`;
      case 'callout':
        const calloutType = block.metadata?.calloutType || 'info';
        const lines = block.content.split('\n');
        if (lines.length === 1) {
          return `> **${calloutType.toUpperCase()}**: ${block.content}`;
        } else {
          return `> **${calloutType.toUpperCase()}**: ${lines[0]}\n${lines.slice(1).map(line => `> ${line}`).join('\n')}`;
        }
      case 'divider':
        return '---';
      default:
        // –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –µ—Å—Ç—å, –≤–∫–ª—é—á–∞—è –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        return block.content;
    }
  }).join('\n\n');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –±–ª–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
 */
export function createEmptyBlock(): Block {
  return {
    id: generateId(),
    type: 'paragraph',
    content: '',
    metadata: {}
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
 */
export function generateId(): string {
  return `block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç YouTube ID –∏–∑ URL
 */
export function extractYouTubeId(url: string): string | null {
  const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
  return match ? match[1] : null;
}

