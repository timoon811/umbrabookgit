import { Block } from '@/types/editor';

/**
 * –ü–∞—Ä—Å–∏—Ç Markdown –≤ –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
export function parseMarkdownToBlocks(markdown: string): Block[] {
  if (!markdown.trim()) {
    return [createEmptyBlock()];
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ (markdown –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã)
  const sections = markdown.split(/\n\s*\n/);
  const blocks: Block[] = [];

  for (const section of sections) {
    const trimmedSection = section.trim();
    if (!trimmedSection) continue;

    const lines = trimmedSection.split('\n');
    const firstLine = lines[0];

    // YouTube —Å—Å—ã–ª–∫–∏
    const youtubeMatch = firstLine.match(/^https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
    if (youtubeMatch && lines.length === 1) {
      blocks.push({
        id: generateId(),
        type: 'youtube',
        content: firstLine,
        metadata: { youtubeId: youtubeMatch[1] }
      });
      continue;
    }

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
    if (lines.length === 1) {
      if (firstLine.startsWith('# ')) {
        blocks.push({
          id: generateId(),
          type: 'heading1',
          content: firstLine.substring(2),
          metadata: {}
        });
        continue;
      }

      if (firstLine.startsWith('## ')) {
        blocks.push({
          id: generateId(),
          type: 'heading2',
          content: firstLine.substring(3),
          metadata: {}
        });
        continue;
      }

      if (firstLine.startsWith('### ')) {
        blocks.push({
          id: generateId(),
          type: 'heading3',
          content: firstLine.substring(4),
          metadata: {}
        });
        continue;
      }

      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageMatch = firstLine.match(/!\[([^\]]*)\]\(([^)]+)\)/);
      if (imageMatch) {
        blocks.push({
          id: generateId(),
          type: 'image',
          content: imageMatch[2],
          metadata: { url: imageMatch[2], alt: imageMatch[1], caption: imageMatch[1] }
        });
        continue;
      }

      // –§–∞–π–ª—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã)
      const fileMatch = firstLine.match(/\[üìé\s*([^\]]+)\]\(([^)]+)\)/);
      if (fileMatch) {
        blocks.push({
          id: generateId(),
          type: 'file',
          content: fileMatch[2],
          metadata: { url: fileMatch[2], name: fileMatch[1] }
        });
        continue;
      }

      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      if (firstLine.trim() === '---') {
        blocks.push({
          id: generateId(),
          type: 'divider',
          content: '',
          metadata: {}
        });
        continue;
      }
    }

    // –ö–æ–¥ –±–ª–æ–∫–∏
    if (firstLine.startsWith('```')) {
      const language = firstLine.substring(3).trim() || 'text';
      const codeLines = lines.slice(1); // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ```

      // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ```
      if (codeLines.length > 0 && codeLines[codeLines.length - 1].trim() === '```') {
        codeLines.pop();
      }

      blocks.push({
        id: generateId(),
        type: 'code',
        content: codeLines.join('\n'),
        metadata: { language }
      });
      continue;
    }

    // –¶–∏—Ç–∞—Ç—ã (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
    if (firstLine.startsWith('> ')) {
      const quoteLines = lines.map(line =>
        line.startsWith('> ') ? line.substring(2) : line
      );
      blocks.push({
        id: generateId(),
        type: 'quote',
        content: quoteLines.join('\n'),
        metadata: {}
      });
      continue;
    }

    // Callout –±–ª–æ–∫–∏
    const calloutMatch = firstLine.match(/^>\s*\*\*(INFO|WARNING|ERROR|SUCCESS)\*\*:\s*(.+)$/i);
    if (calloutMatch) {
      const calloutType = calloutMatch[1].toLowerCase() as 'info' | 'warning' | 'error' | 'success';
      const content = lines.length > 1
        ? [calloutMatch[2], ...lines.slice(1)].join('\n')
        : calloutMatch[2];

      blocks.push({
        id: generateId(),
        type: 'callout',
        content: content,
        metadata: { calloutType }
      });
      continue;
    }

    // –°–ø–∏—Å–∫–∏ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
    if (firstLine.match(/^[-*] /) || firstLine.match(/^\d+\. /)) {
      const isNumbered = firstLine.match(/^\d+\. /);
      const listContent = lines.map(line => {
        if (isNumbered) {
          return line.replace(/^\d+\. /, '');
        } else {
          return line.replace(/^[-*] /, '');
        }
      }).join('\n');

      blocks.push({
        id: generateId(),
        type: isNumbered ? 'numbered-list' : 'list',
        content: listContent,
        metadata: {}
      });
      continue;
    }

    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ)
    blocks.push({
      id: generateId(),
      type: 'paragraph',
      content: trimmedSection,
      metadata: {}
    });
  }

  return blocks.length > 0 ? blocks : [createEmptyBlock()];
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ –≤ Markdown
 */
export function convertBlocksToMarkdown(blocks: Block[]): string {
  return blocks.map(block => {
    switch (block.type) {
      case 'heading1':
        return `# ${block.content}`;
      case 'heading2':
        return `## ${block.content}`;
      case 'heading3':
        return `### ${block.content}`;
      case 'quote':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        return block.content.split('\n').map(line => `> ${line}`).join('\n');
      case 'code':
        return `\`\`\`${block.metadata?.language || 'text'}\n${block.content}\n\`\`\``;
      case 'list':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        return block.content.split('\n').map(line => `- ${line}`).join('\n');
      case 'numbered-list':
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        return block.content.split('\n').map((line, index) => `${index + 1}. ${line}`).join('\n');
      case 'image':
        return `![${block.metadata?.alt || ''}](${block.metadata?.url || block.content})`;
      case 'file':
        return `[üìé ${block.metadata?.name || '–§–∞–π–ª'}](${block.metadata?.url || block.content})`;
      case 'youtube':
        return block.content;
      case 'internal-link':
        return `[${block.content}](/docs/${block.metadata?.internalPageId})`;
      case 'external-link':
        return `[${block.content}](${block.metadata?.linkUrl})`;
      case 'callout':
        const calloutType = block.metadata?.calloutType || 'info';
        const lines = block.content.split('\n');
        if (lines.length === 1) {
          return `> **${calloutType.toUpperCase()}**: ${block.content}`;
        } else {
          return `> **${calloutType.toUpperCase()}**: ${lines[0]}\n${lines.slice(1).map(line => `> ${line}`).join('\n')}`;
        }
      case 'divider':
        return '---';
      default:
        // –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –µ—Å—Ç—å
        return block.content;
    }
  }).join('\n\n');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –±–ª–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
 */
export function createEmptyBlock(): Block {
  return {
    id: generateId(),
    type: 'paragraph',
    content: '',
    metadata: {}
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª–æ–∫–∞
 */
export function generateId(): string {
  return `block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç YouTube ID –∏–∑ URL
 */
export function extractYouTubeId(url: string): string | null {
  const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
  return match ? match[1] : null;
}

