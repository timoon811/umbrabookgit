/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ä–∞—Å—á–µ—Ç–∞ 24-—á–∞—Å–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ UTC+3
 */

export interface TimePeriod {
  start: Date;
  end: Date;
  isCurrentPeriod: boolean;
}

export type ShiftType = 'MORNING' | 'DAY' | 'NIGHT';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+3
 */
export function getCurrentUTC3Time(): Date {
  const now = new Date();
  return new Date(now.getTime() + (now.getTimezoneOffset() * 60000) + (3 * 60 * 60 * 1000));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC+3 (06:00:00 UTC+3)
 * –°–±—Ä–æ—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 06:00 UTC+3, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 03:00 UTC
 */
export function getCurrentDayStartUTC3(): Date {
  const utc3Now = getCurrentUTC3Time();
  const dayStart = new Date(utc3Now);
  
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 06:00 (UTC+3), —Ç–æ –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
  if (utc3Now.getUTCHours() < 6) {
    dayStart.setUTCDate(utc3Now.getUTCDate() - 1);
  }
  
  // –ì—Ä–∞–Ω–∏—Ü–∞ —Å—É—Ç–æ–∫: 06:00 UTC+3 = 03:00 UTC
  dayStart.setUTCHours(3, 0, 0, 0);
  return dayStart;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC+3 (05:59:59.999 UTC+3 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
 */
export function getCurrentDayEndUTC3(): Date {
  const dayStart = getCurrentDayStartUTC3();
  const dayEnd = new Date(dayStart);
  dayEnd.setUTCDate(dayEnd.getUTCDate() + 1);
  // –ö–æ–Ω–µ—Ü —Å—É—Ç–æ–∫: 05:59:59.999 UTC+3 = 02:59:59.999 UTC
  dayEnd.setUTCHours(2, 59, 59, 999);
  return dayEnd;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –ø–æ UTC+3
 */
export function getDayStartUTC3(date: Date): Date {
  const utc3Date = new Date(date.getTime() + (3 * 60 * 60 * 1000));
  const dayStart = new Date(utc3Date);
  if (utc3Date.getUTCHours() < 6) {
    dayStart.setUTCDate(dayStart.getUTCDate() - 1);
  }
  // 06:00 UTC+3 = 03:00 UTC
  dayStart.setUTCHours(3, 0, 0, 0);
  return dayStart;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –ø–æ UTC+3
 */
export function getDayEndUTC3(date: Date): Date {
  const start = getDayStartUTC3(date);
  const end = new Date(start);
  end.setUTCDate(end.getUTCDate() + 1);
  // 05:59:59.999 UTC+3 = 02:59:59.999 UTC
  end.setUTCHours(2, 59, 59, 999);
  return end;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ (UTC+3)
 */
export function isInCurrentDay(date: Date): boolean {
  const dayStart = getCurrentDayStartUTC3();
  const dayEnd = getCurrentDayEndUTC3();
  return date >= dayStart && date <= dayEnd;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è –ø–æ UTC+3)
 */
export function getDayPeriod(date: Date): TimePeriod {
  const start = getDayStartUTC3(date);
  const end = getDayEndUTC3(date);

  const currentDayStart = getCurrentDayStartUTC3();
  const isCurrentPeriod = start.getTime() === currentDayStart.getTime();

  return { start, end, isCurrentPeriod };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 06:00:00 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 05:59:59 UTC+3)
 */
export function getCurrentWeekPeriod(): TimePeriod {
  const todayStart = getCurrentDayStartUTC3();
  const currentDay = new Date(todayStart);

  // –¢–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
  const dayOfWeek = currentDay.getUTCDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 6 = —Å—É–±–±–æ—Ç–∞
  const daysFromMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞

  const weekStart = new Date(currentDay);
  weekStart.setUTCDate(currentDay.getUTCDate() - daysFromMonday);
  // 06:00 UTC+3 = 03:00 UTC
  weekStart.setUTCHours(3, 0, 0, 0);

  const weekEnd = new Date(weekStart);
  weekEnd.setUTCDate(weekStart.getUTCDate() + 7); // –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  // 05:59:59.999 UTC+3 = 02:59:59.999 UTC
  weekEnd.setUTCHours(2, 59, 59, 999);

  return { start: weekStart, end: weekEnd, isCurrentPeriod: true };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (1-–µ —á–∏—Å–ª–æ 06:00:00 - –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å 05:59:59 UTC+3)
 */
export function getCurrentMonthPeriod(): TimePeriod {
  const utc3Now = getCurrentUTC3Time();
  let year = utc3Now.getUTCFullYear();
  let month = utc3Now.getUTCMonth();

  // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ 06:00 (UTC+3) –∏ 1 —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –µ—â—ë –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ
  if (utc3Now.getUTCHours() < 6 && utc3Now.getUTCDate() === 1) {
    month = month - 1;
    if (month < 0) {
      month = 11;
      year = year - 1;
    }
  }

  const monthStart = new Date(Date.UTC(year, month, 1));
  // 06:00 UTC+3 = 03:00 UTC
  monthStart.setUTCHours(3, 0, 0, 0);

  // –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ ‚Äî —Å–µ–∫—É–Ω–¥–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ –±–∏–∑–Ω–µ—Å-–≥—Ä–∞–Ω–∏—Ü–µ
  const nextMonthStart = new Date(Date.UTC(year, month + 1, 1));
  // 06:00 UTC+3 (03:00 UTC) —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –º–∏–Ω—É—Å 1 –º—Å
  nextMonthStart.setUTCHours(3, 0, 0, 0);
  const monthEnd = new Date(nextMonthStart.getTime() - 1);

  return { start: monthStart, end: monthEnd, isCurrentPeriod: true };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
 */
export function getShiftType(date: Date): ShiftType {
  const utc3Time = new Date(date.getTime() + (3 * 60 * 60 * 1000));
  const hour = utc3Time.getUTCHours();

  if (hour >= 6 && hour < 14) {
    return 'MORNING'; // 06:00 - 14:00 UTC+3
  } else if (hour >= 14 && hour < 22) {
    return 'DAY'; // 14:00 - 22:00 UTC+3
  } else {
    return 'NIGHT'; // 22:00 - 06:00 UTC+3
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (UTC+3)
 */
export function getShiftStartTime(shiftType: ShiftType): { hour: number; minute: number } {
  switch (shiftType) {
    case 'MORNING':
      return { hour: 6, minute: 0 }; // 06:00 UTC+3
    case 'DAY':
      return { hour: 14, minute: 0 }; // 14:00 UTC+3
    case 'NIGHT':
      return { hour: 22, minute: 0 }; // 22:00 UTC+3
    default:
      return { hour: 6, minute: 0 };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (UTC+3)
 */
export function getShiftEndTime(shiftType: ShiftType): { hour: number; minute: number } {
  switch (shiftType) {
    case 'MORNING':
      return { hour: 14, minute: 0 }; // 14:00 UTC+3
    case 'DAY':
      return { hour: 22, minute: 0 }; // 22:00 UTC+3
    case 'NIGHT':
      return { hour: 30, minute: 0 }; // 06:00 UTC+3 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (30 —á–∞—Å–æ–≤)
    default:
      return { hour: 14, minute: 0 };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UTC+3
 */
export function formatUTC3Date(date: Date): string {
  return date.toISOString().replace('T', ' ').replace('Z', ' UTC+3');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 */
export function getTimePeriodDescription(period: TimePeriod): string {
  const startStr = formatUTC3Date(period.start);
  const endStr = formatUTC3Date(period.end);

  if (period.isCurrentPeriod) {
    return `–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${startStr} - ${endStr}`;
  }

  return `–ü–µ—Ä–∏–æ–¥: ${startStr} - ${endStr}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ UTC+3
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Å–±—Ä–æ—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 06:00:00 UTC+3
 */
export function validate24HourReset(): boolean {
  const now = new Date();
  const utc3Now = getCurrentUTC3Time();
  const dayStart = getCurrentDayStartUTC3();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±—Ä–æ—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 06:00:00 UTC+3
  const resetHour = dayStart.getUTCHours();
  const resetMinute = dayStart.getUTCMinutes();
  const resetSecond = dayStart.getUTCSeconds();

  const isValidReset = resetHour === 3 && resetMinute === 0 && resetSecond === 0; // 06:00 UTC+3 = 03:00 UTC

  console.log(`üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ UTC+3:`);
  console.log(`   - –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${now.toLocaleString()}`);
  console.log(`   - UTC+3 –≤—Ä–µ–º—è: ${utc3Now.toISOString()}`);
  console.log(`   - –ù–∞—á–∞–ª–æ –¥–Ω—è UTC+3: ${dayStart.toISOString()}`);
  console.log(`   - –°–±—Ä–æ—Å –≤ ${resetHour}:${resetMinute}:${resetSecond} UTC - ${isValidReset ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'}`);

  return isValidReset;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export function getCurrentUTCTime(): Date {
  const now = new Date();
  return new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export function getCurrentDayStartUTC(): Date {
  const utcNow = getCurrentUTCTime();
  const dayStart = new Date(utcNow);
  dayStart.setUTCHours(0, 0, 0, 0);
  return dayStart;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export function getCurrentDayEndUTC(): Date {
  const utcNow = getCurrentUTCTime();
  const dayEnd = new Date(utcNow);
  dayEnd.setUTCHours(23, 59, 59, 999);
  return dayEnd;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UTC (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export function formatUTCDate(date: Date): string {
  return date.toISOString().replace('T', ' ').replace('Z', ' UTC');
}
