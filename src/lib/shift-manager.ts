/**
 * –ë–ï–ó–û–ü–ê–°–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –°–ú–ï–ù
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∑–∞—â–∏—Ç—ã
 */

import { prisma } from "./prisma";
import { getUnifiedTime, TimePeriods } from "./unified-time";

export interface CreateShiftOptions {
  processorId: string;
  shiftType: 'MORNING' | 'DAY' | 'NIGHT';
  shiftDate?: Date; // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
  scheduledStart?: Date;
  scheduledEnd?: Date;
  status?: 'SCHEDULED' | 'ACTIVE' | 'COMPLETED' | 'MISSED';
  notes?: string;
  adminNotes?: string;
  bypassChecks?: boolean; // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
}

export interface ShiftCreationResult {
  success: boolean;
  shift?: any;
  error?: string;
  code?: 'ALREADY_EXISTS' | 'INVALID_DATA' | 'UNAUTHORIZED' | 'SYSTEM_ERROR';
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
 */
export async function createShiftSafely(options: CreateShiftOptions): Promise<ShiftCreationResult> {
  try {
    const unifiedTime = getUnifiedTime();
    const dayPeriod = TimePeriods.getCurrentDayStart();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Å–º–µ–Ω—ã
    const shiftDate = options.shiftDate || dayPeriod.utc;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!options.processorId) {
      return {
        success: false,
        error: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        code: 'INVALID_DATA'
      };
    }
    
    if (!['MORNING', 'DAY', 'NIGHT'].includes(options.shiftType)) {
      return {
        success: false,
        error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã",
        code: 'INVALID_DATA'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ bypassed)
    if (!options.bypassChecks) {
      const hasPermission = await checkShiftPermission(options.processorId, options.shiftType);
      if (!hasPermission.allowed) {
        return {
          success: false,
          error: hasPermission.reason,
          code: 'UNAUTHORIZED'
        };
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω—ã
    const shiftSettings = await getShiftSettings(options.shiftType);
    if (!shiftSettings && !options.bypassChecks) {
      return {
        success: false,
        error: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        code: 'INVALID_DATA'
      };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    const { scheduledStart, scheduledEnd } = calculateShiftTimes(
      shiftDate,
      options.scheduledStart,
      options.scheduledEnd,
      shiftSettings
    );
    
    // –ê–¢–û–ú–ê–†–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –°–ú–ï–ù–´ –° –ó–ê–©–ò–¢–û–ô –û–¢ –î–£–ë–õ–ï–ô
    try {
      const newShift = await prisma.$transaction(async (tx) => {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–µ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const existingShift = await tx.processor_shifts.findFirst({
          where: {
            processorId: options.processorId,
            shiftDate: shiftDate,
          }
        });
        
        if (existingShift) {
          throw new Error("DUPLICATE_SHIFT");
        }
        
        // 2. –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É
        return await tx.processor_shifts.create({
          data: {
            processorId: options.processorId,
            shiftType: options.shiftType,
            shiftDate: shiftDate,
            scheduledStart: scheduledStart,
            scheduledEnd: scheduledEnd,
            status: options.status || 'SCHEDULED',
            notes: options.notes || null,
            adminNotes: options.adminNotes || null,
          }
        });
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      console.log(`‚úÖ [SHIFT_MANAGER] –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: ${newShift.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${options.processorId}`);
      
      return {
        success: true,
        shift: newShift
      };
      
    } catch (transactionError: any) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      if (transactionError.message === "DUPLICATE_SHIFT") {
        return {
          success: false,
          error: "–°–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          code: 'ALREADY_EXISTS'
        };
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Prisma unique constraint –æ—à–∏–±–∫–∏
      if (transactionError.code === 'P2002') {
        const constraintField = transactionError.meta?.target;
        if (constraintField && constraintField.includes('processorId') && constraintField.includes('shiftDate')) {
          return {
            success: false,
            error: "–°–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            code: 'ALREADY_EXISTS'
          };
        }
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
      console.error(`‚ùå [SHIFT_MANAGER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã:`, transactionError);
      throw transactionError;
    }
    
  } catch (error: any) {
    console.error(`üö® [SHIFT_MANAGER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
    return {
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
      code: 'SYSTEM_ERROR'
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
 */
async function checkShiftPermission(processorId: string, shiftType: string): Promise<{allowed: boolean, reason?: string}> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const shiftSetting = await prisma.shift_settings.findFirst({
      where: { 
        shiftType: shiftType as any,
        isActive: true 
      }
    });

    if (!shiftSetting) {
      return {
        allowed: false,
        reason: "–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userAssignment = await prisma.user_shift_assignments.findFirst({
      where: {
        userId: processorId,
        shiftSettingId: shiftSetting.id,
        isActive: true
      }
    });

    if (!userAssignment) {
      return {
        allowed: false,
        reason: "–î–∞–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
      };
    }
    
    return { allowed: true };
    
  } catch (error) {
    console.error(`‚ùå [SHIFT_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:`, error);
    return {
      allowed: false,
      reason: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω—ã
 */
async function getShiftSettings(shiftType: string) {
  try {
    return await prisma.shift_settings.findFirst({
      where: {
        shiftType: shiftType as any,
        isActive: true
      }
    });
  } catch (error) {
    console.error(`‚ùå [SHIFT_MANAGER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:`, error);
    return null;
  }
}

/**
 * –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
 */
function calculateShiftTimes(
  shiftDate: Date,
  providedStart?: Date,
  providedEnd?: Date,
  shiftSettings?: any
) {
  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (providedStart && providedEnd) {
    return {
      scheduledStart: providedStart,
      scheduledEnd: providedEnd
    };
  }
  
  // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω—ã –µ—Å—Ç—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
  if (shiftSettings) {
    const scheduledStart = new Date(shiftDate);
    const startHourUTC = shiftSettings.startHour - 3; // UTC+3 -> UTC
    
    if (startHourUTC < 0) {
      scheduledStart.setUTCDate(scheduledStart.getUTCDate() - 1);
      scheduledStart.setHours(startHourUTC + 24, shiftSettings.startMinute, 0, 0);
    } else {
      scheduledStart.setHours(startHourUTC, shiftSettings.startMinute, 0, 0);
    }

    const scheduledEnd = new Date(shiftDate);
    if (shiftSettings.endHour >= 24) {
      scheduledEnd.setUTCDate(scheduledEnd.getUTCDate() + 1);
      const endHourUTC = (shiftSettings.endHour - 24) - 3;
      const normalizedEndHourUTC = endHourUTC < 0 ? endHourUTC + 24 : endHourUTC;
      scheduledEnd.setHours(normalizedEndHourUTC, shiftSettings.endMinute, 0, 0);
    } else {
      const endHourUTC = shiftSettings.endHour - 3;
      const crossesMidnight =
        shiftSettings.endHour < shiftSettings.startHour ||
        (shiftSettings.endHour === shiftSettings.startHour && shiftSettings.endMinute <= shiftSettings.startMinute);

      if (endHourUTC < 0 || crossesMidnight) {
        scheduledEnd.setUTCDate(scheduledEnd.getUTCDate() + 1);
        const normalizedEndHourUTC = endHourUTC < 0 ? endHourUTC + 24 : endHourUTC;
        scheduledEnd.setHours(normalizedEndHourUTC, shiftSettings.endMinute, 0, 0);
      } else {
        scheduledEnd.setHours(endHourUTC, shiftSettings.endMinute, 0, 0);
      }
    }
    
    return { scheduledStart, scheduledEnd };
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç
  const scheduledStart = new Date(shiftDate);
  scheduledStart.setHours(6, 0, 0, 0); // 09:00 MSK = 06:00 UTC
  
  const scheduledEnd = new Date(shiftDate);
  scheduledEnd.setHours(14, 0, 0, 0); // 17:00 MSK = 14:00 UTC
  
  return { scheduledStart, scheduledEnd };
}

/**
 * –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –°–ú–ï–ù
 */

export async function checkExistingShift(processorId: string, shiftDate?: Date): Promise<any | null> {
  const dayPeriod = TimePeriods.getCurrentDayStart();
  const targetDate = shiftDate || dayPeriod.utc;
  
  return await prisma.processor_shifts.findFirst({
    where: {
      processorId,
      shiftDate: targetDate,
    }
  });
}

export async function getShiftsForPeriod(processorId: string, startDate: Date, endDate: Date) {
  return await prisma.processor_shifts.findMany({
    where: {
      processorId,
      shiftDate: {
        gte: startDate,
        lte: endDate,
      }
    },
    orderBy: {
      shiftDate: 'asc'
    }
  });
}
