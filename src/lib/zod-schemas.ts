import { z } from "zod";

// –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
export const emailSchema = z
  .string()
  .min(1, "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
  .refine((val) => val.includes('@'), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
  .transform((val) => val.toLowerCase());

export const passwordSchema = z
  .string()
  .min(6, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");

export const nameSchema = z
  .string()
  .min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
  .max(100, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
  .trim();

export const telegramSchema = z
  .string()
  .min(1, "Telegram –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

// –°—Ö–µ–º—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const loginSchema = z.object({
  email: emailSchema,
  password: z.string().min(1, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
});

export const registerSchema = z.object({
  name: nameSchema,
  email: emailSchema,
  password: passwordSchema,
  confirmPassword: z.string().min(1, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  telegram: telegramSchema,
}).refine((data) => {
  // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
  return data.password === data.confirmPassword;
}, {
  message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
  path: ["confirmPassword"],
});

// –°—Ö–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const userUpdateSchema = z.object({
  name: nameSchema.optional(),
  email: emailSchema.optional(),
}).refine((data) => data.name || data.email, {
  message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
});

// –°—Ö–µ–º—ã –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
export const depositCreateSchema = z.object({
  amount: z
    .number()
    .positive("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    .min(0.01, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 0.01"),
  currency: z
    .string()
    .min(3, "–í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(10, "–í–∞–ª—é—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤")
    .toUpperCase(),
  playerEmail: emailSchema,
  playerName: z
    .string()
    .min(2, "–ò–º—è –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
    .max(100, "–ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  transactionId: z
    .string()
    .min(1, "ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    .max(255, "ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
  notes: z
    .string()
    .max(1000, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
});

// –°—Ö–µ–º—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É
export const salaryRequestCreateSchema = z.object({
  periodStart: z
    .string()
    .refine((date) => !isNaN(Date.parse(date)), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞"),
  periodEnd: z
    .string()
    .refine((date) => !isNaN(Date.parse(date)), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"),
  requestedAmount: z
    .number()
    .positive("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    .optional(),
  paymentDetails: z
    .object({
      method: z.enum(["bank", "crypto", "other"], {
        message: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã"
      }),
      details: z.string().min(1, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"),
    })
    .optional(),
  comment: z
    .string()
    .max(500, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
    .optional(),
}).refine((data) => {
  const start = new Date(data.periodStart);
  const end = new Date(data.periodEnd);
  return start < end;
}, {
  message: "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è",
  path: ["periodEnd"],
}).refine((data) => {
  const end = new Date(data.periodEnd);
  return end <= new Date();
}, {
  message: "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º",
  path: ["periodEnd"],
});

// –°—Ö–µ–º—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
export const walletCreateSchema = z.object({
  network: z.enum(["BTC", "ETH", "USDT", "LTC", "XRP", "ADA", "DOT"], {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —Å–µ—Ç—å"
  }),
  address: z
    .string()
    .min(20, "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    .max(200, "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
    .trim(),
  label: z
    .string()
    .max(100, "–ú–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim()
    .optional(),
});

export const walletUpdateSchema = z.object({
  address: z
    .string()
    .min(20, "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    .max(200, "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
    .trim()
    .optional(),
  label: z
    .string()
    .max(100, "–ú–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim()
    .optional(),
}).refine((data) => data.address || data.label, {
  message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
});

// –°—Ö–µ–º—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
export const fileUploadSchema = z.object({
  file: z.instanceof(File, { message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª" }),
  type: z.enum(["image", "document"], {
    message: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"
  }).optional(),
});

// –°—Ö–µ–º—ã –¥–ª—è –∫—É—Ä—Å–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
export const courseCreateSchema = z.object({
  title: z
    .string()
    .min(3, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(200, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim(),
  description: z
    .string()
    .min(10, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
    .max(1000, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim()
    .optional(),
  slug: z
    .string()
    .min(3, "–°–ª–∞–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(100, "–°–ª–∞–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/^[a-z0-9-]+$/, "–°–ª–∞–≥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã")
    .trim(),
  category: z
    .string()
    .min(2, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
    .max(50, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim()
    .optional(),
  isPublished: z.boolean().default(false),
});

export const courseUpdateSchema = courseCreateSchema.partial();

export const documentationCreateSchema = z.object({
  title: z
    .string()
    .min(3, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(200, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
    .trim(),
  content: z
    .string()
    .min(10, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"),
  slug: z
    .string()
    .min(3, "–°–ª–∞–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(100, "–°–ª–∞–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/^[a-z0-9-]+$/, "–°–ª–∞–≥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã")
    .trim(),
  sectionId: z
    .string()
    .min(1, "–°–µ–∫—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
  isPublished: z.boolean().default(false),
  order: z.number().int().min(0).default(0),
});

export const documentationUpdateSchema = documentationCreateSchema.partial();

// Utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export function validateSchema<T>(schema: z.ZodSchema<T>, data: unknown): {
  success: true;
  data: T;
} | {
  success: false;
  errors: { [key: string]: string };
} {
  try {
    console.log('üîç Validating with schema:', { data });
    const validatedData = schema.parse(data);
    console.log('‚úÖ Validation passed:', { validatedData });
    return { success: true, data: validatedData };
  } catch (error) {
    console.log('‚ùå Validation failed:', error);
    if (error instanceof z.ZodError) {
      const errors: { [key: string]: string } = {};
      error.issues.forEach((err) => {
        const path = err.path.join('.');
        errors[path] = err.message;
        console.log(`‚ùå Field ${path}: ${err.message}`, { value: err.input, code: err.code });
      });
      return { success: false, errors };
    }
    return { success: false, errors: { general: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö" } };
  }
}

// Middleware –¥–ª—è Next.js API routes
export function withValidation<T>(schema: z.ZodSchema<T>) {
  return (data: unknown) => {
    const result = validateSchema(schema, data);
    if (!result.success) {
      throw new Error(JSON.stringify(result.errors));
    }
    return result.data;
  };
}
