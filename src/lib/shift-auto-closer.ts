import { prisma } from '@/lib/prisma';
import { getSystemTime } from '@/lib/system-time';
import { ProcessorLogger } from '@/lib/processor-logger';
import { SalaryLogger } from '@/lib/salary-logger';

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API —Å–º–µ–Ω
 */
export class ShiftAutoCloser {
  private static lastCheck: Date | null = null;
  private static readonly CHECK_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
   * –†–∞–±–æ—Ç–∞–µ—Ç —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á—Ä–µ–∑–º–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  static async checkAndCloseOverdueShifts(): Promise<void> {
    const now = getSystemTime();

    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç
    if (this.lastCheck && (now.getTime() - this.lastCheck.getTime()) < this.CHECK_INTERVAL) {
      return;
    }

    this.lastCheck = now;

    try {
      console.log(`üîÑ [AUTO-CLOSER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω: ${now.toISOString()}`);

      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
      const overdueShifts = await prisma.processor_shifts.findMany({
        where: {
          status: 'ACTIVE',
          scheduledEnd: {
            lt: new Date(now.getTime() - 30 * 60 * 1000) // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          }
        },
        include: {
          processor: {
            select: {
              name: true,
              email: true
            }
          }
        }
      });

      if (overdueShifts.length === 0) {
        console.log(`‚úÖ [AUTO-CLOSER] –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return;
      }

      console.log(`‚ö†Ô∏è [AUTO-CLOSER] –ù–∞–π–¥–µ–Ω–æ ${overdueShifts.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è`);

      let successCount = 0;
      let errorCount = 0;

      for (const shift of overdueShifts) {
        try {
          await this.closeOverdueShift(shift);
          successCount++;
          console.log(`‚úÖ [AUTO-CLOSER] –°–º–µ–Ω–∞ ${shift.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞ (${shift.processor.name})`);
        } catch (error) {
          errorCount++;
          console.error(`‚ùå [AUTO-CLOSER] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã ${shift.id}:`, error);
        }
      }

      console.log(`üéØ [AUTO-CLOSER] –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);

    } catch (error) {
      console.error('‚ùå [AUTO-CLOSER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–º–µ–Ω:', error);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
   */
  private static async closeOverdueShift(shift: any): Promise<void> {
    const autoEndTime = new Date(shift.scheduledEnd.getTime() + 30 * 60 * 1000); // +30 –º–∏–Ω—É—Ç –∫ –ø–ª–∞–Ω–æ–≤–æ–º—É –æ–∫–æ–Ω—á–∞–Ω–∏—é
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É
    const closedShift = await prisma.processor_shifts.update({
      where: { id: shift.id },
      data: {
        actualEnd: autoEndTime,
        status: 'COMPLETED',
        notes: (shift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]',
        adminNotes: `–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∞ ${getSystemTime().toISOString()} - —Å–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç`
      }
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏
    await this.calculateShiftEarnings(shift.processorId, shift.id, closedShift);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã (–ø–æ–ø—ã—Ç–∫–∞ - –µ—Å–ª–∏ ProcessorLogger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    try {
      await ProcessorLogger.logShiftEnd(
        shift.processorId,
        shift.shiftType,
        autoEndTime.getTime() - new Date(shift.actualStart).getTime(),
        null, // –ù–µ—Ç request –æ–±—ä–µ–∫—Ç–∞
        true // –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      );
    } catch (logError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.warn(`‚ö†Ô∏è [AUTO-CLOSER] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –¥–ª—è —Å–º–µ–Ω—ã ${shift.id}`);
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É
   */
  private static async calculateShiftEarnings(
    processorId: string,
    shiftId: string,
    shift: any
  ): Promise<void> {
    try {
      // –ß–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
      if (shift.actualStart && shift.actualEnd) {
        const startTime = new Date(shift.actualStart);
        const endTime = new Date(shift.actualEnd);
        
        if (endTime > startTime) {
          const durationMs = endTime.getTime() - startTime.getTime();
          const durationHours = durationMs / (1000 * 60 * 60);
          
          if (durationHours > 0 && durationHours <= 24) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
            const salarySettings = await prisma.salary_settings.findFirst({
              where: { isActive: true },
              orderBy: { createdAt: 'desc' }
            });
            
            const hourlyRate = salarySettings?.hourlyRate || 2.0;
            const hourlyPayment = durationHours * hourlyRate;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —á–∞—Å—ã
            await SalaryLogger.logShiftHourlyPay(
              processorId,
              shiftId,
              durationHours,
              hourlyRate,
              hourlyPayment
            );
          }
        }
      }

      // –ó–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const shiftDeposits = await prisma.processor_deposits.findMany({
        where: {
          processorId,
          status: 'APPROVED',
          createdAt: {
            gte: shift.actualStart || undefined,
            lte: shift.actualEnd || new Date(),
          },
        },
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      for (const deposit of shiftDeposits) {
        if (deposit.processorEarnings > 0) {
          await SalaryLogger.logDepositEarnings(
            processorId,
            deposit.id,
            shiftId,
            deposit.processorEarnings,
            deposit.amount,
            deposit.commissionRate,
            deposit.bonusAmount
          );
        }
      }

    } catch (error) {
      console.error(`‚ùå [AUTO-CLOSER] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã ${shiftId}:`, error);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
   */
  static async forceCheck(): Promise<{ closed: number; errors: number }> {
    this.lastCheck = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    await this.checkAndCloseOverdueShifts();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const overdueCount = await prisma.processor_shifts.count({
      where: {
        status: 'ACTIVE',
        scheduledEnd: {
          lt: new Date(getSystemTime().getTime() - 30 * 60 * 1000)
        }
      }
    });

    return { closed: 0, errors: overdueCount }; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  }
}
