import WebSocket from 'ws';
import { prisma } from './prisma';

interface DepositSource {
  id: string;
  name: string;
  token: string;
  projectId: string;
  isActive: boolean;
}

interface WebSocketMessage {
  name: string;
  data: any;
}

interface DepositData {
  id: string;
  mammothId: string;
  mammothLogin: string;
  mammothCountry: string;
  mammothPromo?: string;
  token: string;
  amount: number;
  amountUsd: number;
  workerPercent: number;
  domain: string;
  txHash?: string;
}

class DepositWebSocketClient {
  private connections: Map<string, WebSocket> = new Map();
  private reconnectTimeouts: Map<string, NodeJS.Timeout> = new Map();
  private diedTimeouts: Map<string, NodeJS.Timeout> = new Map();
  private logs: Array<{timestamp: Date, level: 'info' | 'warn' | 'error', message: string, sourceId?: string}> = [];
  private maxLogs = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤

  constructor() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window === 'undefined') {
      this.log('info', 'WebSocket –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–µ
      setTimeout(() => {
        this.initializeConnections();
      }, 1000);
      this.setupPeriodicReconnect();
    }
  }

  private async initializeConnections() {
    try {
      const depositSources = await prisma.deposit_sources.findMany({
        where: { isActive: true }
      });

      console.log(`üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${depositSources.length} WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

      for (const source of depositSources) {
        this.connectToSource(source);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', error);
    }
  }

  private connectToSource(source: DepositSource) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    if (!source.token || source.token.length < 10) {
      this.log('error', `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.name}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª–∏–Ω–∞: ${source.token?.length || 0})`, source.id);
      return;
    }

    const encodedToken = encodeURIComponent(`Worker ${source.token}`);
    const wsUrl = `wss://gambler-panel.com/api/ws?token=${encodedToken}&connectionType=bot`;

    this.log('info', `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É ${source.name} (${source.id})`, source.id);
    this.log('info', `WebSocket URL: ${wsUrl}`, source.id);
    this.log('info', `–¢–æ–∫–µ–Ω: ${source.token.substring(0, 8)}...${source.token.substring(source.token.length - 4)}`, source.id);

    try {
      const ws = new WebSocket(wsUrl);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    this.clearTimeouts(source.id);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä (20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    const setDiedTimeout = (time = 10000) => {
      this.clearTimeouts(source.id);
      const diedTimeout = setTimeout(() => {
        this.log('warn', `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${source.name} –º–µ—Ä—Ç–≤–æ (timeout ${time}ms), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`, source.id);
        ws.close();
        this.reconnectToSource(source);
      }, time);
      this.diedTimeouts.set(source.id, diedTimeout);
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π timeout –Ω–∞ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
    setDiedTimeout(20000);

    ws.on('open', () => {
      this.log('info', `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É ${source.name}`, source.id);
      // –ù–ï –æ—á–∏—â–∞–µ–º timeout –∑–¥–µ—Å—å - –∂–¥–µ–º –ø–µ—Ä–≤—ã–π ping
    });

    ws.on('message', (data: WebSocket.RawData) => {
      try {
        const message: WebSocketMessage = JSON.parse(data.toString('utf8'));
        
        this.log('info', `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${source.name}: ${message.name}`, source.id);

        if (message.name === 'ping') {
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          setDiedTimeout(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ping
          ws.send(JSON.stringify({ name: 'pong' }));
          this.log('info', `üèì –û—Ç–≤–µ—Ç pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${source.name}`, source.id);

        } else if (message.name === 'newDeposit') {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
          this.handleNewDeposit(source, message.data);
        } else {
          this.log('info', `üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${source.name}: ${message.name}`, source.id);
        }
      } catch (error) {
        this.log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${source.name}: ${error}`, source.id);
      }
    });

    ws.on('close', () => {
      this.log('warn', `üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${source.name} –∑–∞–∫—Ä—ã—Ç–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`, source.id);
      this.clearTimeouts(source.id);
      this.reconnectToSource(source);
    });

    ws.on('error', (error) => {
      this.log('error', `–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${source.name}: ${error}`, source.id);
      this.clearTimeouts(source.id);
      this.reconnectToSource(source);
    });

    this.connections.set(source.id, ws);
    
    } catch (error) {
      this.log('error', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${source.name}: ${error}`, source.id);
    }
  }

  private async handleNewDeposit(source: DepositSource, depositData: DepositData) {
    try {
      this.log('info', `üí∞ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ—Ç ${source.name}: ID=${depositData.id}, –õ–æ–≥–∏–Ω=${depositData.mammothLogin}, –°—É–º–º–∞=${depositData.amount} ${depositData.token} ($${depositData.amountUsd})`, source.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–µ–ø–æ–∑–∏—Ç
      const existingDeposit = await prisma.deposits.findUnique({
        where: { id: depositData.id }
      });

      if (existingDeposit) {
        this.log('warn', `–î–µ–ø–æ–∑–∏—Ç ${depositData.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`, source.id);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const depositSource = await prisma.deposit_sources.findUnique({
        where: { id: source.id }
      });

      if (!depositSource) {
        this.log('error', `–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ${source.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`, source.id);
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
      const commissionPercent = depositSource.commission;
      const commissionAmount = (depositData.amount * commissionPercent) / 100;
      const commissionAmountUsd = (depositData.amountUsd * commissionPercent) / 100;
      const netAmount = depositData.amount - commissionAmount;
      const netAmountUsd = depositData.amountUsd - commissionAmountUsd;

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      await prisma.deposits.create({
        data: {
          id: depositData.id,
          depositSourceId: source.id,
          mammothId: depositData.mammothId,
          mammothLogin: depositData.mammothLogin,
          mammothCountry: depositData.mammothCountry || 'US',
          mammothPromo: depositData.mammothPromo,
          token: depositData.token,
          amount: depositData.amount,              // –ì—Ä—è–∑–Ω–∞—è —Å—É–º–º–∞
          amountUsd: depositData.amountUsd,        // –ì—Ä—è–∑–Ω–∞—è —Å—É–º–º–∞ USD
          commissionPercent: commissionPercent,    // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏
          commissionAmount: commissionAmount,      // –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–µ
          commissionAmountUsd: commissionAmountUsd,// –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ –≤ USD
          netAmount: netAmount,                    // –ß–∏—Å—Ç–∞—è —Å—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω–µ
          netAmountUsd: netAmountUsd,              // –ß–∏—Å—Ç–∞—è —Å—É–º–º–∞ –≤ USD
          workerPercent: depositData.workerPercent || 0,
          domain: depositData.domain,
          txHash: depositData.txHash,
          processed: false
        }
      });

      this.log('info', `‚úÖ –î–µ–ø–æ–∑–∏—Ç ${depositData.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`, source.id);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥.

    } catch (error) {
      this.log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ ${depositData.id}: ${error}`, source.id);
    }
  }

  private reconnectToSource(source: DepositSource) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const existingTimeout = this.reconnectTimeouts.get(source.id);
    if (existingTimeout) {
      clearTimeout(existingTimeout);
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const reconnectTimeout = setTimeout(() => {
      this.log('info', `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É ${source.name}...`, source.id);
      this.connectToSource(source);
    }, 5000);

    this.reconnectTimeouts.set(source.id, reconnectTimeout);
  }

  private clearTimeouts(sourceId: string) {
    const diedTimeout = this.diedTimeouts.get(sourceId);
    if (diedTimeout) {
      clearTimeout(diedTimeout);
      this.diedTimeouts.delete(sourceId);
    }

    const reconnectTimeout = this.reconnectTimeouts.get(sourceId);
    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      this.reconnectTimeouts.delete(sourceId);
    }
  }

  private setupPeriodicReconnect() {
    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    setInterval(async () => {
      try {
        const activeSources = await prisma.deposit_sources.findMany({
          where: { isActive: true }
        });

        for (const source of activeSources) {
          if (!this.connections.has(source.id) || this.connections.get(source.id)?.readyState !== WebSocket.OPEN) {
            this.log('info', `üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${source.name}`, source.id);
            this.connectToSource(source);
          }
        }
      } catch (error) {
        this.log('error', `–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${error}`);
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  public addSource(source: DepositSource) {
    if (source.isActive) {
      this.connectToSource(source);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  public updateSource(source: DepositSource) {
    this.removeSource(source.id);
    if (source.isActive) {
      this.connectToSource(source);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  public removeSource(sourceId: string) {
    const connection = this.connections.get(sourceId);
    if (connection) {
      connection.close();
      this.connections.delete(sourceId);
    }
    this.clearTimeouts(sourceId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  public getConnectionStats() {
    const stats: Record<string, any> = {};

    for (const [sourceId, connection] of this.connections.entries()) {
      stats[sourceId] = {
        state: connection.readyState,
        stateText: connection.readyState === WebSocket.OPEN ? 'OPEN' :
                  connection.readyState === WebSocket.CONNECTING ? 'CONNECTING' :
                  connection.readyState === WebSocket.CLOSING ? 'CLOSING' : 'CLOSED'
      };
    }

    return stats;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  public reconnectAll() {
    this.log('info', 'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');

    for (const [sourceId, connection] of this.connections.entries()) {
      connection.close();
    }

    this.connections.clear();
    this.clearAllTimeouts();
    this.initializeConnections();
  }

  private clearAllTimeouts() {
    for (const timeout of this.diedTimeouts.values()) {
      clearTimeout(timeout);
    }
    for (const timeout of this.reconnectTimeouts.values()) {
      clearTimeout(timeout);
    }

    this.diedTimeouts.clear();
    this.reconnectTimeouts.clear();
  }

  // –ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  public shutdown() {
    this.log('info', 'üîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã WebSocket –∫–ª–∏–µ–Ω—Ç–∞...');

    for (const connection of this.connections.values()) {
      connection.close();
    }

    this.clearAllTimeouts();
    this.connections.clear();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
  private log(level: 'info' | 'warn' | 'error', message: string, sourceId?: string) {
    const logEntry = {
      timestamp: new Date(),
      level,
      message,
      sourceId
    };
    
    this.logs.push(logEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    if (this.logs.length > this.maxLogs) {
      this.logs = this.logs.slice(-this.maxLogs);
    }
    
    // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const emoji = level === 'error' ? '‚ùå' : level === 'warn' ? '‚ö†Ô∏è' : '‚úÖ';
    const prefix = sourceId ? `[${sourceId.slice(-8)}]` : '[GLOBAL]';
    console.log(`${emoji} ${prefix} ${message}`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
  public getLogs(sourceId?: string): Array<{timestamp: Date, level: string, message: string, sourceId?: string}> {
    if (sourceId) {
      return this.logs.filter(log => log.sourceId === sourceId || !log.sourceId);
    }
    return [...this.logs];
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
  public clearLogs() {
    this.logs = [];
    this.log('info', '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
let wsClient: DepositWebSocketClient | null = null;

export function getWebSocketClient(): DepositWebSocketClient {
  if (!wsClient) {
    wsClient = new DepositWebSocketClient();
  }
  return wsClient;
}

export function shutdownWebSocketClient() {
  if (wsClient) {
    wsClient.shutdown();
    wsClient = null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
if (typeof window === 'undefined') {
  // Server-side initialization
  getWebSocketClient();
}
