import { prisma } from "@/lib/prisma";
import { NextRequest } from "next/server";

export type ManagerActionType = 
  | 'SHIFT_START'
  | 'SHIFT_END';

interface LogActionParams {
  processorId: string;
  action: ManagerActionType;
  description: string;
  metadata?: Record<string, any>;
  request?: NextRequest;
}

export class ProcessorLogger {
  static async logAction(params: LogActionParams) {
    try {
      const { processorId, action, description, metadata, request } = params;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏ User-Agent –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      let ipAddress: string | undefined;
      let userAgent: string | undefined;
      
      if (request) {
        ipAddress = request.ip || 
                   request.headers.get('x-forwarded-for') || 
                   request.headers.get('x-real-ip') || 
                   undefined;
        userAgent = request.headers.get('user-agent') || undefined;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É analytics –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–º–µ–Ω
      await prisma.analytics.create({
        data: {
          userId: processorId,
          action: action,
          metadata: JSON.stringify({
            action,
            description,
            ...metadata
          }),
          ip: ipAddress,
          userAgent,
        }
      });

      console.log(`üìù Logged action: ${action} for manager ${processorId} - ${description}`);
    } catch (error) {
      console.error('‚ùå Failed to log manager action:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    }
  }

  // –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  static async logShiftStart(processorId: string, shiftType: string, request?: NextRequest) {
    await this.logAction({
      processorId,
      action: 'SHIFT_START',
      description: `–ù–∞—á–∞–ª ${this.getShiftTypeName(shiftType)} —Å–º–µ–Ω—É`,
      metadata: { shiftType },
      request
    });
  }

  static async logShiftEnd(processorId: string, shiftType: string, duration: number, request?: NextRequest, autoEnded = false) {
    const durationMinutes = Math.round(duration / 60000);
    const baseDescription = `${autoEnded ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : '–ó–∞–≤–µ—Ä—à–∏–ª'} ${this.getShiftTypeName(shiftType)} —Å–º–µ–Ω—É`;
    const description = `${baseDescription} (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationMinutes} –º–∏–Ω)${autoEnded ? ' - –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π' : ''}`;
    
    await this.logAction({
      processorId,
      action: 'SHIFT_END',
      description,
      metadata: { shiftType, duration, autoEnded },
      request
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã
  private static getShiftTypeName(shiftType: string): string {
    switch (shiftType) {
      case 'MORNING': return '—É—Ç—Ä–µ–Ω–Ω—é—é';
      case 'DAY': return '–¥–Ω–µ–≤–Ω—É—é';
      case 'NIGHT': return '–Ω–æ—á–Ω—É—é';
      default: return shiftType.toLowerCase();
    }
  }
}
