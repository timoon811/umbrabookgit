

export type NavItem = { title: string; href: string; depth?: number };
export type NavSection = { title: string; sectionKey: string; items: NavItem[] };

export type TocItem = { depth: number; text: string; id: string };

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface DocItem {
  id: string;
  title: string;
  slug: string;
  sectionId: string;
  order: number;
  parentId?: string | null;
}

interface SectionItem {
  id: string;
  key: string;
  name: string;
}

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
export function getSectionInfo(sectionKey: string): { name: string; description: string } {
  const sectionNames: Record<string, string> = {
    'general': '–û–±—â–∏–µ',
    'getting-started': '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
    'installation': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞',
    'configuration': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
    'api-reference': 'API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫',
    'examples': '–ü—Ä–∏–º–µ—Ä—ã',
    'tutorials': '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞',
    'faq': '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
    'troubleshooting': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º',
  };

  const sectionDescriptions: Record<string, string> = {
    'general': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    'getting-started': '–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
    'installation': '–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ',
    'configuration': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã',
    'api-reference': '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ API –∏ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    'examples': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    'tutorials': '–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —Ç—É—Ç–æ—Ä–∏–∞–ª—ã',
    'faq': '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
    'troubleshooting': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π',
  };

  return {
    name: sectionNames[sectionKey] || sectionKey,
    description: sectionDescriptions[sectionKey] || '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É'
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function getDocsNav(workspaceKey?: string): Promise<NavSection[]> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prisma —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const { prisma } = await import('@/lib/prisma');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await prisma.$queryRaw`SELECT 1`;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const docs = await prisma.documentation.findMany({
      where: {
        isPublished: true,
      },
      select: {
        id: true,
        title: true,
        slug: true,
        sectionId: true,
        order: true,
        parentId: true,
      },
      orderBy: [
        { order: 'asc' },
        { createdAt: 'asc' },
      ],
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–∞—Ö
    const sections = await prisma.documentation_sections.findMany({
      select: {
        id: true,
        key: true,
        name: true,
      }
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const sectionsMap = new Map<string, SectionItem>(sections.map((s: SectionItem) => [s.id, s]));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    const sectionMap = new Map<string, NavItem[]>();

    docs.forEach((doc: DocItem) => {
      const section = sectionsMap.get(doc.sectionId);
      const sectionKey = section?.key || 'general';
      
      if (!sectionMap.has(sectionKey)) {
        sectionMap.set(sectionKey, []);
      }

      sectionMap.get(sectionKey)!.push({
        title: doc.title,
        href: `/docs/${doc.slug}`,
        depth: doc.parentId ? 2 : 1,
      });
    });

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    const sectionsResult: NavSection[] = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const sectionOrder = [
      'getting-started',
      'installation', 
      'configuration',
      'api-reference',
      'examples',
      'tutorials',
      'faq',
      'troubleshooting',
      'general'
    ];

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const sortedSections = Array.from(sectionMap.keys()).sort((a, b) => {
      const aIndex = sectionOrder.indexOf(a);
      const bIndex = sectionOrder.indexOf(b);
      
      // –ï—Å–ª–∏ –æ–±–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Ä—è–¥–∫–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–º—É
      if (aIndex !== -1 && bIndex !== -1) {
        return aIndex - bIndex;
      }
      
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤ —Å–ø–∏—Å–∫–µ, –æ–Ω –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (aIndex !== -1) return -1;
      if (bIndex !== -1) return 1;
      
      // –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      return a.localeCompare(b);
    });

    sortedSections.forEach(sectionKey => {
      const items = sectionMap.get(sectionKey)!;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
      const sortedItems = items.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ parentId (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        if (a.depth === 1 && b.depth === 2) return -1;
        if (a.depth === 2 && b.depth === 1) return 1;
        return 0;
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const section = sections.find(s => s.key === sectionKey);
      const sectionName = section?.name || getSectionInfo(sectionKey).name;

      sectionsResult.push({
        title: sectionName,
        sectionKey: sectionKey,
        items: sortedItems,
      });
    });

    return sectionsResult;
  } catch (error) {
    console.error("‚ùå getDocsNav: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:", error);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      const { prisma } = await import('@/lib/prisma');
      const docs = await prisma.documentation.findMany({
        where: { isPublished: true },
        select: {
          title: true,
          slug: true,
        },
        orderBy: { order: 'asc' }
      });
      
      if (docs.length > 0) {
        console.log('üîÑ getDocsNav: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å', docs.length, '—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏');
        return [{
          title: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
          sectionKey: 'general',
          items: docs.map(doc => ({
            title: doc.title,
            href: `/docs/${doc.slug}`,
            depth: 1
          }))
        }];
      }
    } catch (fallbackError) {
      console.error("‚ùå getDocsNav: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:", fallbackError);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ rehype-slug —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function generateSlugId(text: string): string {
  if (!text || typeof text !== 'string') return '';
  
  return text
    .toLowerCase()
    .trim()
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/\s+/g, '-')
    // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
    .replace(/[^\u0400-\u04FFa-z0-9\-]/gi, '')
    // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    .replace(/\-\-+/g, '-')
    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

export function extractHeadingsForToc(content: string): TocItem[] {
  if (!content || typeof content !== 'string') return [];
  
  const lines = content.split(/\r?\n/);
  const items: TocItem[] = [];
  const usedIds = new Set<string>();
  
  for (const line of lines) {
    const m = /^(#{2,3})\s+(.+)$/.exec(line);
    if (m) {
      const depth = m[1].length;
      const text = m[2].trim();
      
      if (!text) continue;
      
      let id = generateSlugId(text);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ ID —É–Ω–∏–∫–∞–ª–µ–Ω
      let counter = 1;
      const originalId = id;
      while (usedIds.has(id)) {
        id = `${originalId}-${counter}`;
        counter++;
      }
      
      usedIds.add(id);
      
      items.push({ depth, text, id });
    }
  }
  
  return items;
}


