import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

export async function GET() {
  try {
    console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminPassword = await bcrypt.hash("umbra2024", 10);
    const admin = await prisma.users.upsert({
      where: { email: "admin@umbra-platform.dev" },
      update: {},
      create: {
        email: "admin@umbra-platform.dev",
        name: "Umbra Platform Admin",
        password: adminPassword,
        telegram: "@umbra_admin",
        role: "ADMIN",
        status: "APPROVED",
      },
    });

    console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤:", admin.email);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPassword = await bcrypt.hash("user123", 10);
    const user = await prisma.users.upsert({
      where: { email: "user@umbra-platform.dev" },
      update: {},
      create: {
        email: "user@umbra-platform.dev",
        name: "Test User",
        password: userPassword,
        telegram: "@test_user",
        role: "USER",
        status: "APPROVED",
      },
    });

    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤:", user.email);

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const documentationSections = [
      {
        name: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
        key: "getting-started",
        description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
        order: 1,
        isVisible: true,
      },
      {
        name: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞",
        key: "installation",
        description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        order: 2,
        isVisible: true,
      },
      {
        name: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
        key: "api-reference",
        description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        order: 3,
        isVisible: true,
      },
    ];

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö ID
    const createdSections = new Map<string, string>();
    
    for (const section of documentationSections) {
      const createdSection = await prisma.documentation_sections.upsert({
        where: { key: section.key },
        update: section,
        create: section,
      });
      createdSections.set(section.key, createdSection.id);
      console.log(`‚úÖ –†–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤: ${section.name}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const documentationPages = [
      {
        title: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å Umbra Platform",
        description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
        slug: "getting-started",
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Umbra Platform"
          },
          {
            type: "paragraph",
            content: "Umbra Platform - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π, –∫—É—Ä—Å–∞–º–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."
          }
        ]),
        sectionId: createdSections.get("getting-started")!,
        order: 1,
        isPublished: true,
      },
      {
        title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
        description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        slug: "installation", 
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Umbra Platform"
          },
          {
            type: "paragraph",
            content: "–°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —à–∞–≥–∞–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ."
          }
        ]),
        sectionId: createdSections.get("installation")!,
        order: 2,
        isPublished: true,
      },
      {
        title: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
        description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        slug: "api-reference",
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "API –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
          },
          {
            type: "paragraph",
            content: "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API endpoints –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
          }
        ]),
        sectionId: createdSections.get("api-reference")!,
        order: 3,
        isPublished: false,
      },
    ];

    for (const page of documentationPages) {
      await prisma.documentation.upsert({
        where: { slug: page.slug },
        update: page,
        create: page,
      });
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞: ${page.title}`);
    }

    console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");

    return NextResponse.json({ 
      success: true, 
      message: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!",
      admin: { email: admin.email, id: admin.id },
      user: { email: user.email, id: user.id },
      sections: Object.fromEntries(createdSections),
      pages: documentationPages.length
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î:", error);
    return NextResponse.json({ 
      error: 'Internal server error', 
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
