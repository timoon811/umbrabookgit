import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireProcessorAuth } from "@/lib/api-auth";

export async function GET(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const authResult = await requireProcessorAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  const { user } = authResult;
  
  try {
    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ - –∏—Ö –ª–∏—á–Ω—É—é
    const processorId = user.role === "ADMIN" ? null : user.userId;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ 24-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const utcNow = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è –ø–æ UTC (00:00:00)
    const todayStart = new Date(utcNow);
    todayStart.setUTCHours(0, 0, 0, 0);
    
    // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
    const weekStart = new Date(todayStart.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    // –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ (1-–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ UTC)
    const monthStart = new Date(utcNow.getFullYear(), utcNow.getMonth(), 1);
    monthStart.setUTCHours(0, 0, 0, 0);

    console.log(`üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:`);
    console.log(`   - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: ${utcNow.toISOString()}`);
    console.log(`   - –ù–∞—á–∞–ª–æ –¥–Ω—è UTC: ${todayStart.toISOString()}`);
    console.log(`   - –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ UTC: ${weekStart.toISOString()}`);
    console.log(`   - –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ UTC: ${monthStart.toISOString()}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayDeposits = await prisma.processor_deposits.findMany({
      where: {
        ...(processorId && { processorId }),
        createdAt: {
          gte: todayStart,
        },
      },
    });

    const todayStats = {
      depositsCount: todayDeposits.length,
      depositsSum: todayDeposits.reduce((sum, d) => sum + d.amount, 0),
      approvedSum: todayDeposits.reduce((sum, d) => sum + d.amount, 0), // –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω—ã
      pendingCount: 0, // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
      rejectedCount: 0, // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    const weekDeposits = await prisma.processor_deposits.findMany({
      where: {
        ...(processorId && { processorId }),
        createdAt: {
          gte: weekStart,
        },
      },
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    const monthDeposits = await prisma.processor_deposits.findMany({
      where: {
        ...(processorId && { processorId }),
        createdAt: {
          gte: monthStart,
        },
      },
    });

    // –í—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
    const monthSalary = await prisma.salary_requests.findMany({
      where: {
        ...(processorId && { processorId }),
        status: "PAID",
        paidAt: {
          gte: monthStart,
        },
      },
    });

    // –ë–æ–Ω—É—Å—ã –∑–∞ –º–µ—Å—è—Ü
    const monthBonuses = await prisma.bonus_payments.findMany({
      where: {
        ...(processorId && { processorId }),
        status: "PAID",
        paidAt: {
          gte: monthStart,
        },
      },
    });

    // –ë–∞–ª–∞–Ω—Å
    const allApprovedDeposits = await prisma.processor_deposits.findMany({
      where: {
        ...(processorId && { processorId }),
      },
    });

    const allPaidSalary = await prisma.salary_requests.findMany({
      where: {
        ...(processorId && { processorId }),
        status: "PAID",
      },
    });

    const earned = allApprovedDeposits.reduce((sum, d) => sum + d.bonusAmount, 0);
    const paid = allPaidSalary.reduce((sum, s) => sum + (s.calculatedAmount || s.requestedAmount), 0);
    const available = earned - paid;

    const stats = {
      today: todayStats,
      period: {
        weekDeposits: weekDeposits.reduce((sum, d) => sum + d.amount, 0),
        monthDeposits: monthDeposits.reduce((sum, d) => sum + d.amount, 0),
        salaryPaid: monthSalary.reduce((sum, s) => sum + (s.calculatedAmount || s.requestedAmount), 0),
        bonuses: monthBonuses.reduce((sum, b) => sum + b.amount, 0),
      },
      balance: {
        earned: Math.round(earned * 100) / 100,
        paid: Math.round(paid * 100) / 100,
        pending: 0, // Pending –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É
        available: Math.round(available * 100) / 100,
      },
    };

    return NextResponse.json(stats);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
