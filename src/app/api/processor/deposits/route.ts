import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import {
  getCurrentUTC3Time,
  getCurrentDayStartUTC3,
  getShiftType,
  validate24HourReset
} from "@/lib/time-utils";
import { requireProcessorAuth } from "@/lib/api-auth";

export async function GET(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const authResult = await requireProcessorAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  const { user } = authResult;
  
  try {
    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã, –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –∏—Ö
    const processorId = user.role === "ADMIN" ? null : user.userId;

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "20");
    const status = searchParams.get("status");
    const skip = (page - 1) * limit;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    const where: {
      processorId?: string;
      status?: "PENDING" | "APPROVED" | "REJECTED" | "PROCESSING";
    } = {
      ...(processorId && { processorId }),
    };

    if (status && status !== "all") {
      where.status = status.toUpperCase() as "PENDING" | "APPROVED" | "REJECTED" | "PROCESSING";
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [deposits, total] = await Promise.all([
      prisma.processor_deposits.findMany({
        where,
        orderBy: {
          createdAt: "desc",
        },
        skip,
        take: limit,
      }),
      prisma.processor_deposits.count({ where }),
    ]);

    return NextResponse.json({
      deposits,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit),
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const authResult = await requireProcessorAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  const { user } = authResult;
  
  try {
    const processorId = user.userId;
    const data = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!data.amount || !data.currency || !data.playerEmail) {
      return NextResponse.json(
        { error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: amount, currency, playerEmail" },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.playerEmail)) {
      return NextResponse.json(
        { error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email" },
        { status: 400 }
      );
    }

    if (data.amount <= 0) {
      return NextResponse.json(
        { error: "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (email + —Å—É–º–º–∞ + –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const existingDeposit = await prisma.processor_deposits.findFirst({
      where: {
        processorId,
        playerEmail: data.playerEmail,
        amount: data.amount,
        currency: data.currency,
        createdAt: {
          gte: oneHourAgo,
        },
      },
    });

    if (existingDeposit) {
      return NextResponse.json(
        { error: "–ü–æ—Ö–æ–∂–∏–π –¥–µ–ø–æ–∑–∏—Ç —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞" },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤
    const bonusSettings = await prisma.bonus_settings.findFirst({
      where: { isActive: true },
      orderBy: { createdAt: "desc" },
    });

    const commissionRate = bonusSettings?.baseCommissionRate || 30.0;
    let bonusRate = bonusSettings?.baseBonusRate || 5.0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –±–æ–Ω—É—Å–æ–≤
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC+3 –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ 24-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const utc3Now = getCurrentUTC3Time();
    const todayStart = getCurrentDayStartUTC3();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–º–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const currentShiftType = getShiftType(utc3Now);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞
    const isResetValid = validate24HourReset();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (UTC+3)
    const todayDeposits = await prisma.processor_deposits.findMany({
      where: {
        processorId,
        createdAt: {
          gte: todayStart,
        },
      },
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
    const existingTodaySum = todayDeposits.reduce((sum, d) => sum + d.amount, 0);
    
    // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –¥–µ–Ω—å (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç)
    const todaySum = existingTodaySum + data.amount;
    
    console.log(`üí∞ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ $${data.amount}:`);
    console.log(`   - –í—Ä–µ–º—è UTC+3: ${utc3Now.toISOString()}`);
    console.log(`   - –ù–∞—á–∞–ª–æ –¥–Ω—è UTC+3: ${todayStart.toISOString()}`);
    console.log(`   - –¢–∏–ø —Å–º–µ–Ω—ã: ${currentShiftType}`);
    console.log(`   - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –¥–µ–Ω—å: $${existingTodaySum}`);
    console.log(`   - –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: $${todaySum}`);
    console.log(`   - 24-—á–∞—Å–æ–≤–æ–π —Å–±—Ä–æ—Å: ${isResetValid ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'}`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ç–∫—É –±–æ–Ω—É—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–º–µ–Ω—ã
    const bonusGrid = await prisma.bonus_grid.findFirst({
      where: {
        isActive: true,
        shiftType: currentShiftType.toUpperCase() as any, // MORNING, DAY, NIGHT
        minAmount: { lte: todaySum },
        OR: [
          { maxAmount: { gte: todaySum } },
          { maxAmount: null }
        ]
      },
      orderBy: { bonusPercentage: "desc" }
    });

    if (bonusGrid) {
      bonusRate = bonusGrid.bonusPercentage;
      console.log(`   - –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –±–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞: ${bonusGrid.minAmount} - ${bonusGrid.maxAmount || '‚àû'} = ${bonusGrid.bonusPercentage}%`);
    } else {
      console.log(`   - –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${bonusRate}%`);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
    let bonusAmount = (data.amount * bonusRate) / 100;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (bonusGrid && bonusGrid.fixedBonus && bonusGrid.fixedBonusMin && todaySum >= bonusGrid.fixedBonusMin) {
      bonusAmount += bonusGrid.fixedBonus;
      console.log(`   - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å: +$${bonusGrid.fixedBonus} (–ø–æ—Ä–æ–≥: $${bonusGrid.fixedBonusMin})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const activeMotivations = await prisma.bonus_motivations.findMany({
      where: { isActive: true }
    });

    for (const motivation of activeMotivations) {
      try {
        const conditions = motivation.conditions ? JSON.parse(motivation.conditions) : {};
        let shouldApply = true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        if (conditions.minDeposits) {
          const totalDeposits = await prisma.processor_deposits.count({
            where: { processorId }
          });
          if (totalDeposits < conditions.minDeposits) shouldApply = false;
        }

        if (conditions.minAmount) {
          if (todaySum < conditions.minAmount) shouldApply = false;
        }

        if (shouldApply) {
          if (motivation.type === 'PERCENTAGE') {
            bonusAmount += (data.amount * motivation.value) / 100;
          } else if (motivation.type === 'FIXED_AMOUNT') {
            bonusAmount += motivation.value;
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ ${motivation.id}:`, error);
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞–ª—é—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    const currencyType = 'CRYPTO';

    // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
    const deposit = await prisma.processor_deposits.create({
      data: {
        processorId,
        playerId: data.playerId || `deposit_${Date.now()}`, // Fallback –µ—Å–ª–∏ –Ω–µ—Ç playerId
        playerNick: data.playerNick,
        playerEmail: data.playerEmail,
        offerId: data.offerId,
        offerName: data.offerName,
        geo: data.geo,
        amount: data.amount,
        currency: data.currency.toUpperCase(),
        currencyType: currencyType,
        paymentMethod: data.paymentMethod,
        leadSource: data.leadSource,
        proofs: data.proofs ? JSON.stringify(data.proofs) : null,
        notes: data.notes,
        commissionRate,
        bonusRate,
        bonusAmount,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–Ω—É—Å–µ –≤ —Ö–æ–ª–¥–µ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
    if (bonusAmount > 0) {
      const holdUntil = new Date(todayStart);
      holdUntil.setUTCDate(holdUntil.getUTCDate() + 1); // –•–æ–ª–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

      await prisma.bonus_payments.create({
        data: {
          processorId,
          type: 'DEPOSIT_BONUS',
          description: `–ë–æ–Ω—É—Å –∑–∞ –¥–µ–ø–æ–∑–∏—Ç $${data.amount} (${currentShiftType})`,
          amount: bonusAmount,
          depositId: deposit.id,
          period: todayStart,
          shiftType: currentShiftType.toUpperCase() as any,
          holdUntil,
          status: 'HELD', // –ë–æ–Ω—É—Å –≤ —Ö–æ–ª–¥–µ
        },
      });

      console.log(`   - –ë–æ–Ω—É—Å $${bonusAmount} –ø–æ–º–µ—â–µ–Ω –≤ —Ö–æ–ª–¥ –¥–æ ${holdUntil.toISOString()}`);
    }

    return NextResponse.json(deposit, { status: 201 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
