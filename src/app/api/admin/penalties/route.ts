import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCurrentDayStartUTC3, getShiftType } from "@/lib/time-utils";

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const processorId = searchParams.get('processorId');
    const status = searchParams.get('status');

    const where: any = {};
    if (processorId) where.processorId = processorId;
    if (status) where.status = status;

    const penalties = await prisma.shift_penalties.findMany({
      where,
      include: {
        processor: {
          select: { name: true, email: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    return NextResponse.json({ penalties });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    const { processorId, shiftType, shiftDate, reason, adminComment } = data;

    if (!processorId || !shiftType || !shiftDate) {
      return NextResponse.json(
        { error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: processorId, shiftType, shiftDate" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const processor = await prisma.users.findUnique({
      where: { id: processorId }
    });

    if (!processor || processor.role !== 'PROCESSOR') {
      return NextResponse.json(
        { error: "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —ç—Ç—É —Å–º–µ–Ω—É
    const existingPenalty = await prisma.shift_penalties.findFirst({
      where: {
        processorId,
        shiftType: shiftType.toUpperCase(),
        shiftDate: new Date(shiftDate)
      }
    });

    if (existingPenalty) {
      return NextResponse.json(
        { error: "–®—Ç—Ä–∞—Ñ –∑–∞ —ç—Ç—É —Å–º–µ–Ω—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ
    const penalty = await prisma.shift_penalties.create({
      data: {
        processorId,
        type: 'SHIFT_MISS',
        shiftType: shiftType.toUpperCase(),
        shiftDate: new Date(shiftDate),
        amount: -50.0, // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–º–µ–Ω—ã
        reason: reason || '–ü—Ä–æ–ø—É—Å–∫ —Å–º–µ–Ω—ã',
        adminComment,
        status: 'APPLIED',
        appliedAt: new Date()
      }
    });

    console.log(`üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ -50$ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processor.name} –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–º–µ–Ω—ã ${shiftType} ${shiftDate}`);

    return NextResponse.json(penalty, { status: 201 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const data = await request.json();
    const { id, updates } = data;

    const updatedPenalty = await prisma.shift_penalties.update({
      where: { id },
      data: updates
    });

    return NextResponse.json(updatedPenalty);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
