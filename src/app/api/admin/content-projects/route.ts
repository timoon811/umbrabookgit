import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAuth } from '@/lib/api-auth';

// GET /api/admin/content-projects - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export async function GET(request: NextRequest) {
  try {
    const authResult = await requireAuth(request);
    if ('error' in authResult) {
      return authResult.error;
    }

    const { user } = authResult;
    if (user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
        { status: 403 }
      );
    }

    const projects = await prisma.content_projects.findMany({
      where: {
        isActive: true
      },
      orderBy: [
        { type: 'asc' },
        { name: 'asc' }
      ]
    });

    // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (projects.length === 0) {
      console.log('üìÅ –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
      
      const defaultProjects = [
        {
          name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
          description: '–ì–ª–∞–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
          type: 'documentation',
          isActive: true
        },
        {
          name: '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          description: '–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          type: 'courses', 
          isActive: true
        }
      ];

      const createdProjects = await Promise.all(
        defaultProjects.map(project => 
          prisma.content_projects.create({ data: project })
        )
      );

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', createdProjects.length);
      return NextResponse.json(createdProjects);
    }

    return NextResponse.json(projects);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// POST /api/admin/content-projects - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const authResult = await requireAuth(request);
    if ('error' in authResult) {
      return authResult.error;
    }

    const { user } = authResult;
    if (user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { name, description, type } = body;

    if (!name || !type) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã
    const allowedTypes = ['documentation', 'courses', 'materials'];
    if (!allowedTypes.includes(type)) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞' },
        { status: 400 }
      );
    }

    const project = await prisma.content_projects.create({
      data: {
        name,
        description,
        type,
        isActive: true
      }
    });

    return NextResponse.json(project, { status: 201 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
