import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞...");

    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    await prisma.$executeRaw`TRUNCATE TABLE analytics RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE course_pages RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE course_sections RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE courses RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE deposits RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE deposit_sources RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE documentation RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE documentation_sections RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE finance_transactions RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE finance_projects RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE finance_counterparties RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE finance_categories RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE finance_accounts RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE content_projects RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE articles RESTART IDENTITY CASCADE`;
    await prisma.$executeRaw`TRUNCATE TABLE users RESTART IDENTITY CASCADE`;

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã");

    return NextResponse.json({ 
      success: true, 
      message: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏–º–ø–æ—Ä—Ç—É. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –¥–∞–º–ø —á–µ—Ä–µ–∑ SSH." 
    });

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    return NextResponse.json({ 
      error: 'Database preparation failed', 
      details: error.message 
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}
