import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireAdminAuth } from "@/lib/api-auth";
import { getCurrentUTC3Time } from "@/lib/time-utils";

export async function POST(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const authResult = await requireAdminAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  try {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const processors = await prisma.users.findMany({
      where: { 
        role: 'PROCESSOR',
        status: 'APPROVED'
      }
    });

    if (processors.length === 0) {
      return NextResponse.json({
        success: false,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω
    const shiftSettings = await prisma.shift_settings.findMany();
    
    if (shiftSettings.length === 0) {
      const defaultSettings = [
        {
          shiftType: 'MORNING',
          startHour: 6,
          startMinute: 0,
          endHour: 14,
          endMinute: 0,
          name: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞',
          description: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ —Å 06:00 –¥–æ 14:00 –ú–°–ö'
        },
        {
          shiftType: 'DAY',
          startHour: 14,
          startMinute: 0,
          endHour: 22,
          endMinute: 0,
          name: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞',
          description: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å 14:00 –¥–æ 22:00 –ú–°–ö'
        },
        {
          shiftType: 'NIGHT',
          startHour: 22,
          startMinute: 0,
          endHour: 6,
          endMinute: 0,
          name: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞',
          description: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ —Å 22:00 –¥–æ 06:00 –ú–°–ö'
        }
      ];

      for (const setting of defaultSettings) {
        await prisma.shift_settings.upsert({
          where: { shiftType: setting.shiftType as any },
          update: setting,
          create: setting
        });
      }
    }

    const currentTime = getCurrentUTC3Time();
    const today = new Date(currentTime);
    today.setUTCHours(6, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC+3

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Å–º–µ–Ω –∏ –∏—Ö –≤—Ä–µ–º—è
    const shiftTypes = [
      { type: 'MORNING', startHour: 6, endHour: 14 },
      { type: 'DAY', startHour: 14, endHour: 22 },
      { type: 'NIGHT', startHour: 22, endHour: 6 } // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    ];

    let createdShifts = 0;

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for (let dayOffset = -7; dayOffset <= 0; dayOffset++) {
      const shiftDate = new Date(today);
      shiftDate.setUTCDate(today.getUTCDate() + dayOffset);

      for (const processor of processors) {
        // –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ 1-2 —Å–º–µ–Ω—ã –≤ –¥–µ–Ω—å
        const shiftsPerDay = Math.floor(Math.random() * 2) + 1;
        const selectedShifts = shiftTypes.slice(0, shiftsPerDay);

        for (const shiftInfo of selectedShifts) {
          const scheduledStart = new Date(shiftDate);
          scheduledStart.setUTCHours(shiftInfo.startHour, 0, 0, 0);

          const scheduledEnd = new Date(shiftDate);
          if (shiftInfo.type === 'NIGHT') {
            // –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            scheduledEnd.setUTCDate(shiftDate.getUTCDate() + 1);
            scheduledEnd.setUTCHours(shiftInfo.endHour, 0, 0, 0);
          } else {
            scheduledEnd.setUTCHours(shiftInfo.endHour, 0, 0, 0);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
          let status = 'SCHEDULED';
          let actualStart = null;
          let actualEnd = null;
          let notes = null;

          // –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (dayOffset < 0) {
            const random = Math.random();
            if (random < 0.1) {
              // 10% —Å–º–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω—ã
              status = 'MISSED';
            } else if (random < 0.8) {
              // 70% —Å–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω—ã
              status = 'COMPLETED';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
              actualStart = new Date(scheduledStart);
              actualStart.setMinutes(actualStart.getMinutes() + Math.floor(Math.random() * 10) - 5); // ¬±5 –º–∏–Ω—É—Ç
              
              actualEnd = new Date(scheduledEnd);
              actualEnd.setMinutes(actualEnd.getMinutes() + Math.floor(Math.random() * 20) - 10); // ¬±10 –º–∏–Ω—É—Ç
              
              const workQuality = ['–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–º–µ–Ω–∞', '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'];
              notes = workQuality[Math.floor(Math.random() * workQuality.length)];
            } else {
              // 10% —Å–º–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã (–¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–Ω–µ–π)
              status = 'ACTIVE';
              actualStart = new Date(scheduledStart);
              actualStart.setMinutes(actualStart.getMinutes() + Math.floor(Math.random() * 10) - 5);
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–º–µ–Ω–∞
          const existingShift = await prisma.processor_shifts.findFirst({
            where: {
              processorId: processor.id,
              shiftType: shiftInfo.type as any,
              shiftDate: shiftDate
            }
          });

          if (!existingShift) {
            await prisma.processor_shifts.create({
              data: {
                processorId: processor.id,
                shiftType: shiftInfo.type as any,
                shiftDate: shiftDate,
                scheduledStart: scheduledStart,
                scheduledEnd: scheduledEnd,
                actualStart: actualStart,
                actualEnd: actualEnd,
                status: status as any,
                notes: notes
              }
            });

            createdShifts++;
          }
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.processor_shifts.groupBy({
      by: ['status'],
      _count: {
        id: true
      }
    });

    const statusStats = stats.reduce((acc: any, stat: any) => {
      acc[stat.status.toLowerCase()] = stat._count.id;
      return acc;
    }, {});

    return NextResponse.json({
      success: true,
      message: `–°–æ–∑–¥–∞–Ω–æ ${createdShifts} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω`,
      processorsCount: processors.length,
      stats: statusStats
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
