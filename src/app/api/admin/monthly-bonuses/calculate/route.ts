import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireAdminAuth } from "@/lib/api-auth";

// POST /api/admin/monthly-bonuses/calculate - –†–∞—Å—á–µ—Ç –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
export async function POST(request: NextRequest) {
  const authResult = await requireAdminAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  try {
    const { month, year, dryRun = true } = await request.json();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    const currentDate = new Date();
    const targetYear = year || currentDate.getFullYear();
    const targetMonth = month !== undefined ? month : currentDate.getMonth();

    const startOfMonth = new Date(targetYear, targetMonth, 1);
    const endOfMonth = new Date(targetYear, targetMonth + 1, 0, 23, 59, 59);

    console.log(`üéØ –†–∞—Å—á–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∑–∞ ${startOfMonth.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã
    const monthlyPlans = await prisma.salary_monthly_bonus.findMany({
      where: { isActive: true },
      orderBy: { minAmount: 'desc' } // –û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
    });

    if (monthlyPlans.length === 0) {
      return NextResponse.json({
        error: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const managers = await prisma.users.findMany({
      where: { 
        role: { in: ['PROCESSOR', 'ADMIN'] },
        status: 'APPROVED'
      }
    });

    const results = [];

    for (const manager of managers) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
      const deposits = await prisma.processor_deposits.findMany({
        where: {
          processorId: manager.id,
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth
          }
        }
      });

      const totalMonthlyVolume = deposits.reduce((sum, deposit) => sum + deposit.amount, 0);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω (–Ω–∞–∏–±–æ–ª—å—à–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π)
      let applicablePlan = null;
      for (const plan of monthlyPlans) {
        if (totalMonthlyVolume >= plan.minAmount) {
          applicablePlan = plan;
          break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
        }
      }

      const monthlyBonusAmount = applicablePlan 
        ? (totalMonthlyVolume * applicablePlan.bonusPercent / 100)
        : 0;

      let bonusPaymentId = null;

      // –ï—Å–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –µ—Å—Ç—å –±–æ–Ω—É—Å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ
      if (!dryRun && monthlyBonusAmount > 0) {
        const bonusPayment = await prisma.bonus_payments.create({
          data: {
            processorId: manager.id,
            type: 'MONTHLY_PLAN_BONUS',
            amount: monthlyBonusAmount,
            description: `–ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–ª–∞–Ω "${applicablePlan.name}" ($${totalMonthlyVolume.toLocaleString()})`,
            periodStart: startOfMonth,
            periodEnd: endOfMonth,
            bonusPercent: applicablePlan.bonusPercent,
            isActive: true,
            status: 'PENDING' // –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          }
        });
        bonusPaymentId = bonusPayment.id;
      }

      results.push({
        managerId: manager.id,
        managerName: manager.name,
        managerEmail: manager.email,
        totalMonthlyVolume,
        depositsCount: deposits.length,
        applicablePlan: applicablePlan ? {
          id: applicablePlan.id,
          name: applicablePlan.name,
          minAmount: applicablePlan.minAmount,
          bonusPercent: applicablePlan.bonusPercent
        } : null,
        monthlyBonusAmount,
        bonusPaymentId,
        status: monthlyBonusAmount > 0 ? 'ELIGIBLE' : 'NOT_ELIGIBLE'
      });
    }

    // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalBonusAmount = results.reduce((sum, r) => sum + r.monthlyBonusAmount, 0);
    const eligibleManagers = results.filter(r => r.monthlyBonusAmount > 0).length;

    const summary = {
      period: {
        month: targetMonth,
        year: targetYear,
        startDate: startOfMonth.toISOString(),
        endDate: endOfMonth.toISOString(),
        displayName: startOfMonth.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })
      },
      plans: monthlyPlans.map(plan => ({
        id: plan.id,
        name: plan.name,
        minAmount: plan.minAmount,
        bonusPercent: plan.bonusPercent
      })),
      statistics: {
        totalManagers: managers.length,
        eligibleManagers,
        totalBonusAmount,
        averageBonusAmount: eligibleManagers > 0 ? totalBonusAmount / eligibleManagers : 0
      },
      results,
      dryRun
    };

    console.log(`‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${eligibleManagers}/${managers.length} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–ª—É—á–∞—Ç –±–æ–Ω—É—Å—ã –Ω–∞ —Å—É–º–º—É $${totalBonusAmount.toFixed(2)}`);

    return NextResponse.json(summary);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Å—è—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
