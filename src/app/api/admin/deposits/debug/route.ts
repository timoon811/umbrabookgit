import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getWebSocketClient } from "@/lib/websocket-client";
import jwt from "jsonwebtoken";
import { cookies } from "next/headers";

const JWT_SECRET = process.env.JWT_SECRET || "umbra_platform_super_secret_jwt_key_2024";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function checkAdminAuth() {
  const cookieStore = await cookies();
  const token = cookieStore.get("auth-token")?.value;

  if (!token) {
    throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
  }

  const decoded = jwt.verify(token, JWT_SECRET) as {
    userId: string;
    role: string;
  };

  if (decoded.role !== "ADMIN") {
    throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  return decoded.userId;
}

// GET /api/admin/deposits/debug - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    await checkAdminAuth();

    console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í ===');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –ë–î
    const depositSources = await prisma.deposit_sources.findMany({
      include: {
        project: {
          select: {
            id: true,
            name: true,
            status: true
          }
        },
        _count: {
          select: {
            deposits: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositSources.length}`);
    depositSources.forEach(source => {
      console.log(`  - ${source.name} (${source.id}): ${source.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}, –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${source._count.deposits}, –ø—Ä–æ–µ–∫—Ç: ${source.project.name}`);
      console.log(`    –¢–æ–∫–µ–Ω: ${source.token.substring(0, 20)}...`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const wsClient = getWebSocketClient();
    const connectionStats = wsClient.getConnectionStats();

    console.log(`üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`);
    Object.entries(connectionStats).forEach(([sourceId, stats]) => {
      const source = depositSources.find(s => s.id === sourceId);
      console.log(`  - ${source?.name || sourceId}: ${stats.stateText}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
    const totalDeposits = await prisma.deposits.count();
    const recentDeposits = await prisma.deposits.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        depositSource: {
          select: {
            name: true,
            project: {
              select: {
                name: true
              }
            }
          }
        }
      }
    });

    console.log(`üí∞ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –ë–î: ${totalDeposits}`);
    console.log(`üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
    recentDeposits.forEach(deposit => {
      console.log(`  - ${deposit.id}: ${deposit.mammothLogin}, ${deposit.amount} ${deposit.token}, –∏—Å—Ç–æ—á–Ω–∏–∫: ${deposit.depositSource.name}`);
    });

    // 4. –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "Gambler timoon811"
    const gamblerSource = depositSources.find(source => 
      source.name.toLowerCase().includes('gambler') && 
      source.name.toLowerCase().includes('timoon811')
    );

    if (gamblerSource) {
      console.log(`üéØ –ù–∞–π–¥–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ Gambler timoon811:`);
      console.log(`  - ID: ${gamblerSource.id}`);
      console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${gamblerSource.isActive ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - –ü—Ä–æ–µ–∫—Ç: ${gamblerSource.project.name}`);
      console.log(`  - –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${gamblerSource._count.deposits}`);
      console.log(`  - WebSocket: ${connectionStats[gamblerSource.id]?.stateText || '–ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const gamblerDeposits = await prisma.deposits.findMany({
        where: { depositSourceId: gamblerSource.id },
        orderBy: { createdAt: 'desc' },
        take: 5
      });

      console.log(`  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:`);
      gamblerDeposits.forEach(deposit => {
        console.log(`    ${deposit.id}: ${deposit.mammothLogin}, ${deposit.amount} ${deposit.token} (${new Date(deposit.createdAt).toISOString()})`);
      });
    } else {
      console.log(`‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ "Gambler timoon811" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    // 5. –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–∑ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const activeSources = depositSources.filter(s => s.isActive);
    const disconnectedSources = activeSources.filter(s => !connectionStats[s.id] || connectionStats[s.id].stateText !== 'OPEN');

    if (disconnectedSources.length > 0) {
      console.log(`‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ë–ï–ó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`);
      disconnectedSources.forEach(source => {
        console.log(`  - ${source.name} (${source.id})`);
      });
    }

    return NextResponse.json({
      summary: {
        totalSources: depositSources.length,
        activeSources: activeSources.length,
        connectedSources: Object.keys(connectionStats).length,
        totalDeposits,
        gamblerSourceFound: !!gamblerSource
      },
      depositSources: depositSources.map(source => ({
        id: source.id,
        name: source.name,
        isActive: source.isActive,
        project: source.project.name,
        depositsCount: source._count.deposits,
        webSocketStatus: connectionStats[source.id]?.stateText || 'NOT_CONNECTED',
        tokenPreview: source.token.substring(0, 20) + '...'
      })),
      recentDeposits: recentDeposits.map(deposit => ({
        id: deposit.id,
        mammothLogin: deposit.mammothLogin,
        amount: deposit.amount,
        token: deposit.token,
        sourceName: deposit.depositSource.name,
        projectName: deposit.depositSource.project.name,
        createdAt: deposit.createdAt
      })),
      gamblerSource: gamblerSource ? {
        id: gamblerSource.id,
        name: gamblerSource.name,
        isActive: gamblerSource.isActive,
        project: gamblerSource.project.name,
        depositsCount: gamblerSource._count.deposits,
        webSocketStatus: connectionStats[gamblerSource.id]?.stateText || 'NOT_CONNECTED'
      } : null,
      disconnectedSources: disconnectedSources.map(source => ({
        id: source.id,
        name: source.name,
        project: source.project.name
      }))
    });

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", error);
    return NextResponse.json(
      { error: error.message || "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏" },
      { status: error.message === "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" ? 401 : error.message === "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" ? 403 : 500 }
    );
  }
}

// POST /api/admin/deposits/debug - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
export async function POST(request: NextRequest) {
  try {
    await checkAdminAuth();

    const body = await request.json();
    const { action } = body;

    const wsClient = getWebSocketClient();

    if (action === 'reconnect') {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
      wsClient.reconnectAll();
      return NextResponse.json({ message: "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ" });
    }

    if (action === 'sync') {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      const activeSources = await prisma.deposit_sources.findMany({
        where: { isActive: true }
      });

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      for (const source of activeSources) {
        wsClient.updateSource({
          id: source.id,
          name: source.name,
          token: source.token,
          projectId: source.projectId,
          isActive: source.isActive
        });
      }

      return NextResponse.json({ 
        message: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
        syncedSources: activeSources.length 
      });
    }

    return NextResponse.json({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" }, { status: 400 });

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", error);
    return NextResponse.json(
      { error: error.message || "–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
      { status: error.message === "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" ? 401 : error.message === "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" ? 403 : 500 }
    );
  }
}
