import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireAdminAuth } from "@/lib/api-auth";
import { getCurrentUTC3Time } from "@/lib/time-utils";
import { ProcessorLogger } from "@/lib/processor-logger";
import { SalaryLogger } from "@/lib/salary-logger";

/**
 * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è cron –∏–ª–∏ –∞–¥–º–∏–Ω–∞)
      const authResult = await requireAdminAuth(request);
      
        if ('error' in authResult) {
        return authResult.error;
      }
    
      
        const { user } = authResult;
    
        const now = getCurrentUTC3Time();
        console.log(`üîÑ [AUTO-END] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω –≤ ${now.toISOString()}`);
    
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        const activeShifts = await prisma.processor_shifts.findMany({
          where: {
            status: 'ACTIVE',
            scheduledEnd: {
              lt: new Date(now.getTime() - 30 * 60 * 1000) // –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            }
          },
          include: {
            processor: true
          }
        });
    
        console.log(`üîç [AUTO-END] –ù–∞–π–¥–µ–Ω–æ ${activeShifts.length} —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`);
    
        const results = [];
    
        for (const shift of activeShifts) {
          try {
            const thirtyMinutesAfterEnd = new Date(shift.scheduledEnd!.getTime() + 30 * 60 * 1000);
            
            console.log(`‚è∞ [AUTO-END] –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É ${shift.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${shift.processor.name} (${shift.processor.email})`);
    
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
            const autoEndedShift = await prisma.processor_shifts.update({
              where: { id: shift.id },
              data: {
                actualEnd: thirtyMinutesAfterEnd,
                status: 'COMPLETED',
                notes: (shift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]'
              }
            });
    
            // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await ProcessorLogger.logShiftEnd(
              shift.processorId,
              shift.shiftType,
              thirtyMinutesAfterEnd.getTime() - new Date(shift.actualStart!).getTime(),
              request,
              true // –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            );
    
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
            await calculateAndLogShiftEarnings(shift.processorId, shift.id, autoEndedShift);
    
            results.push({
              shiftId: shift.id,
              processorId: shift.processorId,
              processorName: shift.processor.name,
              shiftType: shift.shiftType,
              autoEndedAt: thirtyMinutesAfterEnd.toISOString(),
              success: true
            });
    
            console.log(`‚úÖ [AUTO-END] –°–º–µ–Ω–∞ ${shift.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    
          
  } catch (error: any) {
        console.error(`‚ùå [AUTO-END] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã ${shift.id}:`, error);
        results.push({
          shiftId: shift.id,
          processorId: shift.processorId,
          processorName: shift.processor.name,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          success: false
        });
      }
    }

    const successCount = results.filter(r => r.success).length;
    const errorCount = results.filter(r => !r.success).length;

    console.log(`üéØ [AUTO-END] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —Å–º–µ–Ω —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);

    return NextResponse.json({
      message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–º–µ–Ω: ${results.length}`,
      totalChecked: activeShifts.length,
      successfullyEnded: successCount,
      errors: errorCount,
      results: results,
      checkedAt: now.toISOString()
    });

  } catch (error: any) {
    console.error('‚ùå [AUTO-END] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω" },
      { status: 500 }
    );
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
 */
async function calculateAndLogShiftEarnings(
  processorId: string,
  shiftId: string,
  shift: { actualStart?: Date | null; actualEnd?: Date | null; shiftType: string; [key: string]: unknown }
) {
  try {
    console.log(`[SHIFT_EARNINGS] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processorId}`);

    // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤—É—é –æ–ø–ª–∞—Ç—É
    if (shift.actualStart && shift.actualEnd) {
      const actualStartTime = new Date(shift.actualStart);
      const actualEndTime = new Date(shift.actualEnd);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
      if (actualEndTime <= actualStartTime) {
        console.warn(`[SHIFT_EARNINGS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω-–∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã ${shiftId}: –∫–æ–Ω–µ—Ü (${actualEndTime.toISOString()}) —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—É (${actualStartTime.toISOString()})`);
        return;
      }
      
      const shiftDurationMs = actualEndTime.getTime() - actualStartTime.getTime();
      const shiftHours = shiftDurationMs / (1000 * 60 * 60);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
      const salarySettings = await prisma.salary_settings.findFirst({
        where: { isActive: true },
        orderBy: { createdAt: 'desc' }
      });

      const hourlyRate = salarySettings?.hourlyRate || 2.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $2/—á–∞—Å

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∑–∞ —Å–º–µ–Ω—É)
      if (shiftHours > 0 && shiftHours <= 24) {
        const hourlyPayment = shiftHours * hourlyRate;
        await SalaryLogger.logShiftHourlyPay(
          processorId,
          shiftId,
          shiftHours,
          hourlyRate,
          hourlyPayment
        );
        console.log(`[SHIFT_EARNINGS] –ù–∞—á–∏—Å–ª–µ–Ω–æ ${hourlyPayment}$ –∑–∞ ${shiftHours.toFixed(2)} —á–∞—Å–æ–≤ –∞–¥–º–∏–Ω-–∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã`);
      } else {
        console.warn(`[SHIFT_EARNINGS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω-–∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã: ${shiftHours.toFixed(2)} —á–∞—Å–æ–≤`);
      }
    }

    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–º–µ–Ω—É
    const shiftDeposits = await prisma.processor_deposits.findMany({
      where: {
        processorId,
        status: 'APPROVED',
        createdAt: {
          gte: shift.actualStart || undefined,
          lte: shift.actualEnd || new Date(),
        },
      },
    });

    console.log(`[SHIFT_DEPOSITS] –ù–∞–π–¥–µ–Ω–æ ${shiftDeposits.length} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    for (const deposit of shiftDeposits) {
      if (deposit.processorEarnings > 0) {
        await SalaryLogger.logDepositEarnings(
          processorId,
          deposit.id,
          shiftId,
          deposit.processorEarnings,
          deposit.amount,
          deposit.commissionRate,
          deposit.bonusAmount
        );
      }
    }

    console.log(`[SHIFT_EARNINGS] ‚úì –ó–∞–≤–µ—Ä—à–µ–Ω —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId}`);

  } catch (error: any) {
    console.error(`[SHIFT_EARNINGS] ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId}:`, error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
  }
}