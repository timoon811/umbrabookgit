import { NextRequest, NextResponse } from "next/server";
import { execSync } from "child_process";

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    try {
      execSync('npx prisma migrate deploy', { 
        stdio: 'pipe',
        env: process.env,
        cwd: process.cwd()
      });
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
      return NextResponse.json({
        status: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π',
        error: error instanceof Error ? error.message : 'Unknown error'
      }, { status: 500 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
    try {
      execSync('npx prisma generate', { 
        stdio: 'pipe',
        env: process.env,
        cwd: process.cwd()
      });
      console.log('‚úÖ Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error: unknown) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma Client:', error);
      return NextResponse.json({
        status: 'error',
        message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma Client',
        error: error instanceof Error ? error.message : 'Unknown error'
      }, { status: 500 });
    }

    return NextResponse.json({
      status: 'success',
      message: '–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      timestamp: new Date().toISOString()
    });
    
  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    
    return NextResponse.json({
      status: 'error',
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
