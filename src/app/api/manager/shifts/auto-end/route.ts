import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireManagerAuth } from "@/lib/api-auth";
import { getSystemTime } from '@/lib/system-time';
import { ProcessorLogger } from "@/lib/processor-logger";
import { SalaryLogger } from "@/lib/salary-logger";
import { requireAuth } from '@/lib/api-auth';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
 * –≠—Ç–æ—Ç endpoint –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
 */
export async function POST(request: NextRequest) {
  try {
  

    const authResult = await requireAuth(request);
  
    if ('error' in authResult) {
    return authResult.error;
  }
  
  const { user } = authResult;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const now = getSystemTime();
    const todayStart = new Date(now);
    todayStart.setUTCHours(3, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è –ø–æ UTC+3 = 06:00 UTC+3 = 03:00 UTC

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeShift = await prisma.processor_shifts.findFirst({
      where: {
        processorId: user.userId,
        status: 'ACTIVE',
        shiftDate: todayStart,
      }
    });

    if (!activeShift || !activeShift.scheduledEnd) {
      return NextResponse.json({ 
        message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        autoEnded: false 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    const thirtyMinutesAfterEnd = new Date(activeShift.scheduledEnd.getTime() + 30 * 60 * 1000);
    
    if (now > thirtyMinutesAfterEnd) {
      console.log(`üîÑ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã ${activeShift.id} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${user.userId}`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
      const autoEndedShift = await prisma.processor_shifts.update({
        where: { id: activeShift.id },
        data: {
          actualEnd: thirtyMinutesAfterEnd,
          status: 'COMPLETED',
          notes: (activeShift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]'
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await ProcessorLogger.logShiftEnd(
        user.userId, 
        activeShift.shiftType, 
        thirtyMinutesAfterEnd.getTime() - new Date(activeShift.actualStart!).getTime(), 
        request, 
        true // –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      );

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
      await calculateAndLogShiftEarnings(user.userId, activeShift.id, autoEndedShift);

      return NextResponse.json({ 
        shift: autoEndedShift, 
        autoEnded: true,
        message: "–°–º–µ–Ω–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è" 
      });
    }

    // –°–º–µ–Ω–∞ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const minutesLeft = Math.round((thirtyMinutesAfterEnd.getTime() - now.getTime()) / (1000 * 60));
    return NextResponse.json({ 
      message: `–°–º–µ–Ω–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω—É—Ç`,
      autoEnded: false,
      minutesUntilAutoEnd: minutesLeft
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã" },
      { status: 500 }
    );
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
 */
async function calculateAndLogShiftEarnings(
  processorId: string, 
  shiftId: string, 
  shift: { actualStart?: Date | null; actualEnd?: Date | null; shiftType: string; [key: string]: unknown }
) {
  try {
    console.log(`[SHIFT_EARNINGS] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processorId}`);

    // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤—É—é –æ–ø–ª–∞—Ç—É
    if (shift.actualStart && shift.actualEnd) {
      const actualStartTime = new Date(shift.actualStart);
      const actualEndTime = new Date(shift.actualEnd);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
      if (actualEndTime <= actualStartTime) {
        console.warn(`[SHIFT_EARNINGS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã ${shiftId}: –∫–æ–Ω–µ—Ü (${actualEndTime.toISOString()}) —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—É (${actualStartTime.toISOString()})`);
        return;
      }
      
      const shiftDurationMs = actualEndTime.getTime() - actualStartTime.getTime();
      const shiftHours = shiftDurationMs / (1000 * 60 * 60);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
      const salarySettings = await prisma.salary_settings.findFirst({
        where: { isActive: true },
        orderBy: { createdAt: 'desc' }
      });

      const hourlyRate = salarySettings?.hourlyRate || 2.0; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $2/—á–∞—Å

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∑–∞ —Å–º–µ–Ω—É)
      if (shiftHours > 0 && shiftHours <= 24) {
        const hourlyPayment = shiftHours * hourlyRate;
        await SalaryLogger.logShiftHourlyPay(
          processorId,
          shiftId,
          shiftHours,
          hourlyRate,
          hourlyPayment
        );
        console.log(`[SHIFT_EARNINGS] –ù–∞—á–∏—Å–ª–µ–Ω–æ ${hourlyPayment}$ –∑–∞ ${shiftHours.toFixed(2)} —á–∞—Å–æ–≤ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã`);
      } else {
        console.warn(`[SHIFT_EARNINGS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã: ${shiftHours.toFixed(2)} —á–∞—Å–æ–≤`);
      }
    }

    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–º–µ–Ω—É
    const shiftDeposits = await prisma.processor_deposits.findMany({
      where: {
        processorId,
        status: 'APPROVED',
        createdAt: {
          gte: shift.actualStart || undefined,
          lte: shift.actualEnd || new Date(),
        },
      },
    });

    console.log(`[SHIFT_DEPOSITS] –ù–∞–π–¥–µ–Ω–æ ${shiftDeposits.length} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    for (const deposit of shiftDeposits) {
      if (deposit.processorEarnings > 0) {
        await SalaryLogger.logDepositEarnings(
          processorId,
          deposit.id,
          shiftId,
          deposit.processorEarnings,
          deposit.amount,
          deposit.commissionRate,
          deposit.bonusAmount
        );
      }
    }

    console.log(`[SHIFT_EARNINGS] ‚úì –ó–∞–≤–µ—Ä—à–µ–Ω —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId}`);

  } catch (error) {
    console.error(`[SHIFT_EARNINGS] ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É ${shiftId}:`, error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
  }
}
