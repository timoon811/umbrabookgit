import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireAuth } from "@/lib/api-auth";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface DocumentationResult {
  id: string;
  title: string;
  description: string | null;
  slug: string;
  sectionId: string | null;
  content: string | null;
}




// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function calculateRelevance(title: string, content: string | null, query: string): number {
  const queryLower = query.toLowerCase();
  const titleLower = title.toLowerCase();
  const contentLower = content?.toLowerCase() || '';
  
  let score = 0;
  
  // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  if (titleLower.includes(queryLower)) {
    score += 100;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if (titleLower.startsWith(queryLower)) {
      score += 50;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —Ü–µ–ª–∏–∫–æ–º
    const titleWords = titleLower.split(/\s+/);
    const queryWords = queryLower.split(/\s+/);
    queryWords.forEach(word => {
      if (titleWords.includes(word)) {
        score += 30;
      }
    });
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
  if (contentLower.includes(queryLower)) {
    score += 20;
    
    // –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç—É –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏
    const matches = (contentLower.match(new RegExp(queryLower, 'gi')) || []).length;
    score += Math.min(matches * 5, 30); // –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤ –∑–∞ —á–∞—Å—Ç–æ—Ç—É
  }
  
  // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã = –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ)
  score += queryLower.length * 2;
  
  return score;
}

export async function GET(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –ø–æ–∏—Å–∫ —Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authResult = await requireAuth(request);
  if ('error' in authResult) {
    return authResult.error;
  }

  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('q');
    const type = searchParams.get('type'); // 'all', 'docs'
    const limit = parseInt(searchParams.get('limit') || '10');

    if (!query || query.trim().length < 2) {
      return NextResponse.json([]);
    }

    const searchTerm = query.trim();

    const results: Array<{
      id: string;
      title: string;
      description?: string | null;
      slug: string;
      type: 'documentation' | 'course';
      url: string;
      displayTitle: string;
      section?: string;
      relevance: number;
    }> = [];

    // –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (type !== 'none') {
      const docsResults = await prisma.documentation.findMany({
        where: {
          OR: [
            { title: { contains: searchTerm } },
            { description: { contains: searchTerm } },
            { content: { contains: searchTerm } },
            { slug: { contains: searchTerm } },
          ],
          isPublished: true,
        },
        select: {
          id: true,
          title: true,
          description: true,
          slug: true,
          sectionId: true,
          content: true,
        },
        take: limit * 2, // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      const docsWithRelevance = docsResults.map((doc: DocumentationResult) => ({
        ...doc,
        relevance: calculateRelevance(doc.title, doc.content, searchTerm),
        type: 'documentation' as const,
        url: `/docs/${doc.slug}`,
        displayTitle: `üìö ${doc.title}`,
        section: doc.sectionId,
      }));

      results.push(...docsWithRelevance);
    }

    // –ü–æ–∏—Å–∫ –≤ –∫—É—Ä—Å–∞—Ö —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const sortedResults = results
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, limit)
      .map(({ relevance, type, ...result }) => ({
        ...result,
        // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è relevance –∏ type –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      }));

    return NextResponse.json(sortedResults);
  } catch (error: unknown) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

