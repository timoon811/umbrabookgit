import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userCount = await prisma.user.count();
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    
    if (userCount === 0) {
      console.log('üå± –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminPassword = await bcrypt.hash('umbra2024', 10);
      const admin = await prisma.user.create({
        data: {
          email: 'admin@umbra-platform.dev',
          name: 'Umbra Platform Admin',
          password: adminPassword,
          role: 'ADMIN',
          status: 'APPROVED',
          apiKey: 'umbra_admin_key_' + Math.random().toString(36).substring(2, 15),
        },
      });
      
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', admin.email);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userPassword = await bcrypt.hash('user123', 10);
      const user = await prisma.user.create({
        data: {
          email: 'user@umbra-platform.dev',
          name: 'Regular User',
          password: userPassword,
          role: 'USER',
          status: 'APPROVED',
          apiKey: 'umbra_user_key_' + Math.random().toString(36).substring(2, 15),
        },
      });
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = [
        {
          key: 'getting-started',
          name: '–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´',
          description: '–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
          order: 1,
        },
        {
          key: 'api',
          name: 'API REFERENCE V2',
          description: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API',
          order: 2,
        },
      ];
      
      for (const categoryData of categories) {
        await prisma.category.upsert({
          where: { key: categoryData.key },
          update: categoryData,
          create: categoryData,
        });
      }
      
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
      
      return NextResponse.json({
        status: 'success',
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
        admin: {
          email: admin.email,
          role: admin.role,
          status: admin.status,
        },
        user: {
          email: user.email,
          role: user.role,
          status: user.status,
        },
        categories: categories.length,
      });
      
    } else {
      console.log('üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const admin = await prisma.user.findFirst({
        where: { 
          email: 'admin@umbra-platform.dev',
          role: 'ADMIN'
        }
      });
      
      if (admin) {
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω:', admin.email);
        return NextResponse.json({
          status: 'success',
          message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
          admin: {
            email: admin.email,
            role: admin.role,
            status: admin.status,
          },
          userCount,
        });
      } else {
        console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
        
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminPassword = await bcrypt.hash('umbra2024', 10);
        const newAdmin = await prisma.user.create({
          data: {
            email: 'admin@umbra-platform.dev',
            name: 'Umbra Platform Admin',
            password: adminPassword,
            role: 'ADMIN',
            status: 'APPROVED',
            apiKey: 'umbra_admin_key_' + Math.random().toString(36).substring(2, 15),
          },
        });
        
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', newAdmin.email);
        
        return NextResponse.json({
          status: 'success',
          message: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω',
          admin: {
            email: newAdmin.email,
            role: newAdmin.role,
            status: newAdmin.status,
          },
          userCount: userCount + 1,
        });
      }
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    
    let errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    let statusCode = 500;
    
    if (error.code === 'P1001') {
      errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
      statusCode = 503;
    } else if (error.code === 'P2002') {
      errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      statusCode = 409;
    } else if (error.code === 'P1017') {
      errorMessage = '–°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      statusCode = 503;
    }
    
    return NextResponse.json({
      status: 'error',
      message: errorMessage,
      error: error.message,
    }, { status: statusCode });
    
  } finally {
    await prisma.$disconnect();
  }
}
