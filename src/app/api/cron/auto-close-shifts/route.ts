import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getSystemTime } from '@/lib/system-time';
import { ProcessorLogger } from "@/lib/processor-logger";
import { SalaryLogger } from "@/lib/salary-logger";

/**
 * CRON endpoint –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è cron (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    const cronSecret = process.env.CRON_SECRET_KEY;
    if (cronSecret) {
      const providedSecret = request.headers.get('Authorization')?.replace('Bearer ', '') || 
                           request.headers.get('X-Cron-Secret') ||
                           new URL(request.url).searchParams.get('secret');
      
      if (providedSecret !== cronSecret) {
        return NextResponse.json(
          { error: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ cron —ç–Ω–¥–ø–æ–∏–Ω—Ç—É" },
          { status: 401 }
        );
      }
    }

    const now = getSystemTime();
    console.log(`üîÑ [CRON-AUTO-CLOSE] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω: ${now.toISOString()}`);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    const activeShifts = await prisma.processor_shifts.findMany({
      where: {
        status: 'ACTIVE',
        scheduledEnd: {
          lt: new Date(now.getTime() - 30 * 60 * 1000) // –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        }
      },
      include: {
        processor: {
          select: {
            name: true,
            email: true,
            telegram: true
          }
        }
      }
    });

    console.log(`üîç [CRON-AUTO-CLOSE] –ù–∞–π–¥–µ–Ω–æ ${activeShifts.length} —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è`);

    if (activeShifts.length === 0) {
      return NextResponse.json({
        message: "–ó–∞–≤–∏—Å—à–∏—Ö —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        totalChecked: 0,
        successfullyEnded: 0,
        errors: 0,
        checkedAt: now.toISOString()
      });
    }

    const results = [];

    for (const shift of activeShifts) {
      try {
        const thirtyMinutesAfterEnd = new Date(shift.scheduledEnd!.getTime() + 30 * 60 * 1000);
        
        console.log(`‚è∞ [CRON-AUTO-CLOSE] –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É ${shift.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${shift.processor.name}`);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        const autoEndedShift = await prisma.processor_shifts.update({
          where: { id: shift.id },
          data: {
            actualEnd: thirtyMinutesAfterEnd,
            status: 'COMPLETED',
            notes: (shift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ CRON —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]'
          }
        });

        // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try {
          await ProcessorLogger.logShiftEnd(
            shift.processorId,
            shift.shiftType,
            thirtyMinutesAfterEnd.getTime() - new Date(shift.actualStart!).getTime(),
            request,
            true // –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
          );
        } catch (logError) {
          console.warn(`‚ö†Ô∏è [CRON-AUTO-CLOSE] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –¥–ª—è —Å–º–µ–Ω—ã ${shift.id}:`, logError);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
        await calculateShiftEarnings(shift.processorId, shift.id, autoEndedShift);

        results.push({
          shiftId: shift.id,
          processorId: shift.processorId,
          processorName: shift.processor.name,
          shiftType: shift.shiftType,
          autoEndedAt: thirtyMinutesAfterEnd.toISOString(),
          success: true
        });

        console.log(`‚úÖ [CRON-AUTO-CLOSE] –°–º–µ–Ω–∞ ${shift.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

      } catch (error: any) {
        console.error(`‚ùå [CRON-AUTO-CLOSE] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã ${shift.id}:`, error);
        results.push({
          shiftId: shift.id,
          processorId: shift.processorId,
          processorName: shift.processor.name,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          success: false
        });
      }
    }

    const successCount = results.filter(r => r.success).length;
    const errorCount = results.filter(r => !r.success).length;

    console.log(`üéØ [CRON-AUTO-CLOSE] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —Å–º–µ–Ω —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);

    return NextResponse.json({
      message: `CRON –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–º–µ–Ω: ${results.length}`,
      totalChecked: activeShifts.length,
      successfullyEnded: successCount,
      errors: errorCount,
      results: results,
      checkedAt: now.toISOString()
    });

  } catch (error: any) {
    console.error('‚ùå [CRON-AUTO-CLOSE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω" },
      { status: 500 }
    );
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–º–µ–Ω—É
 */
async function calculateShiftEarnings(
  processorId: string,
  shiftId: string,
  shift: { actualStart?: Date | null; actualEnd?: Date | null; shiftType: string; [key: string]: unknown }
) {
  try {
    console.log(`[CRON-EARNINGS] –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –∑–∞ —Å–º–µ–Ω—É ${shiftId}`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤—É—é –æ–ø–ª–∞—Ç—É
    if (shift.actualStart && shift.actualEnd) {
      const actualStartTime = new Date(shift.actualStart);
      const actualEndTime = new Date(shift.actualEnd);
      
      if (actualEndTime <= actualStartTime) {
        console.warn(`[CRON-EARNINGS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã ${shiftId}`);
        return;
      }
      
      const shiftDurationMs = actualEndTime.getTime() - actualStartTime.getTime();
      const shiftHours = shiftDurationMs / (1000 * 60 * 60);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
      const salarySettings = await prisma.salary_settings.findFirst({
        where: { isActive: true },
        orderBy: { createdAt: 'desc' }
      });

      const hourlyRate = salarySettings?.hourlyRate || 2.0;

      if (shiftHours > 0 && shiftHours <= 24) {
        const hourlyPayment = shiftHours * hourlyRate;
        
        await SalaryLogger.logShiftHourlyPay(
          processorId,
          shiftId,
          shiftHours,
          hourlyRate,
          hourlyPayment
        );
        
        console.log(`[CRON-EARNINGS] –ù–∞—á–∏—Å–ª–µ–Ω–æ $${hourlyPayment.toFixed(2)} –∑–∞ ${shiftHours.toFixed(2)} —á–∞—Å–æ–≤`);
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–º–µ–Ω—É
    const shiftDeposits = await prisma.processor_deposits.findMany({
      where: {
        processorId,
        createdAt: {
          gte: shift.actualStart || undefined,
          lte: shift.actualEnd || new Date(),
        },
      },
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    for (const deposit of shiftDeposits) {
      if (deposit.processorEarnings > 0) {
        await SalaryLogger.logDepositEarnings(
          processorId,
          deposit.id,
          shiftId,
          deposit.processorEarnings,
          deposit.amount,
          deposit.commissionRate,
          deposit.bonusAmount
        );
      }
    }

    console.log(`[CRON-EARNINGS] ‚úì –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Å–º–µ–Ω—ã ${shiftId}`);

  } catch (error: any) {
    console.error(`[CRON-EARNINGS] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã ${shiftId}:`, error);
  }
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET(request: NextRequest) {
  const now = getSystemTime();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω
  const activeShiftsCount = await prisma.processor_shifts.count({
    where: {
      status: 'ACTIVE'
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
  const overdueshiftsCount = await prisma.processor_shifts.count({
    where: {
      status: 'ACTIVE',
      scheduledEnd: {
        lt: new Date(now.getTime() - 30 * 60 * 1000)
      }
    }
  });

  return NextResponse.json({
    status: "CRON Auto-Close Service",
    currentTime: now.toISOString(),
    activeShifts: activeShiftsCount,
    overdueShifts: overdueshiftsCount,
    needsAction: overdueshiftsCount > 0
  });
}
