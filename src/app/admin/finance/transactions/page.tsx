"use client";

import { useState, useEffect } from "react";

interface Transaction {
  id: string;
  type: string;
  amount: number;
  description: string | null;
  date: string;
  accountId: string;
  counterpartyId: string | null;
  categoryId: string | null;
  projectId: string | null;
  account: {
    id: string;
    name: string;
    balance: number;
    currency: string;
  };
  counterparty: {
    id: string;
    name: string;
    type: string;
  } | null;
  category: {
    id: string;
    name: string;
    type: string;
    color: string;
  } | null;
  project: {
    id: string;
    name: string;
    status: string;
  } | null;
}

interface Account {
  id: string;
  name: string;
  balance: number;
  currency: string;
}

interface Category {
  id: string;
  name: string;
  type: string;
  color: string;
}

interface Project {
  id: string;
  name: string;
  status: string;
}

interface Counterparty {
  id: string;
  name: string;
  type: string;
}

export default function FinanceTransactionsPage() {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [counterparties, setCounterparties] = useState<Counterparty[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [periodFilter, setPeriodFilter] = useState<'current_month' | 'all' | 'planned_actual'>('current_month');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);
  const [sidebarMode, setSidebarMode] = useState<'create' | 'edit'>('create');

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
  const openCreateSidebar = () => {
    setSelectedTransaction(null);
    setSidebarMode('create');
    setSidebarOpen(true);
  };

  const openEditSidebar = (transaction: Transaction) => {
    setSelectedTransaction(transaction);
    setSidebarMode('edit');
    setSidebarOpen(true);
  };

  const closeSidebar = () => {
    setSidebarOpen(false);
    setSelectedTransaction(null);
  };
  const [accountFilter, setAccountFilter] = useState<string | null>(null);
  const [projectFilter, setProjectFilter] = useState<string | null>(null);
  const [counterpartyFilter, setCounterpartyFilter] = useState<string | null>(null);
  const [categoryFilter, setCategoryFilter] = useState<string | null>(null);
  const [amountFilter, setAmountFilter] = useState('');
  const [descriptionFilter, setDescriptionFilter] = useState('');
  const [fileFilter, setFileFilter] = useState<'all' | 'with_files' | 'without_files'>('all');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [showAddModal, setShowAddModal] = useState(false);
  const [modalType, setModalType] = useState<'income' | 'expense' | 'transfer'>('expense');
  const [formData, setFormData] = useState({
    amount: '',
    accountId: '',
    toAccountId: '',
    categoryId: '',
    date: new Date().toISOString().split('T')[0],
    projectId: '',
    counterpartyId: '',
    description: '',
    includeInLiabilities: false,
    accrueOnDifferentDate: false,
    repeatOperation: false
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [transactionsRes, accountsRes, categoriesRes, projectsRes, counterpartiesRes] = await Promise.all([
        fetch('/api/admin/finance/transactions'),
        fetch('/api/admin/finance/accounts'),
        fetch('/api/admin/finance/categories'),
        fetch('/api/admin/finance/projects'),
        fetch('/api/admin/finance/counterparties')
      ]);

      if (transactionsRes.ok) {
        const data = await transactionsRes.json();
        setTransactions(data.transactions || []);
      }
      
      if (accountsRes.ok) {
        const data = await accountsRes.json();
        setAccounts(data.accounts || []);
      }
      
      if (categoriesRes.ok) {
        const data = await categoriesRes.json();
        setCategories(data.categories || []);
      }
      
      if (projectsRes.ok) {
        const data = await projectsRes.json();
        setProjects(data.projects || []);
      }
      
      if (counterpartiesRes.ok) {
        const data = await counterpartiesRes.json();
        setCounterparties(data.counterparties || []);
      }
      
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleAddTransaction = async () => {
    try {
      const response = await fetch('/api/admin/finance/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          type: modalType.toUpperCase(),
          amount: parseFloat(formData.amount),
          ...(modalType === 'transfer' && { toAccountId: formData.toAccountId }),
        }),
      });

      if (response.ok) {
        setShowAddModal(false);
        setFormData({
          amount: '',
          accountId: '',
          toAccountId: '',
          categoryId: '',
          date: new Date().toISOString().split('T')[0],
          projectId: '',
          counterpartyId: '',
          description: '',
          includeInLiabilities: false,
          accrueOnDifferentDate: false,
          repeatOperation: false
        });
        fetchData(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    }
  };

  const openAddModal = (type: 'income' | 'expense' | 'transfer') => {
    setModalType(type);
    setShowAddModal(true);
  };

  const formatCurrency = (amount: number, currency: string = 'USD') => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    if (date.toDateString() === today.toDateString()) {
      return '–°–µ–≥–æ–¥–Ω—è';
    } else if (date.toDateString() === yesterday.toDateString()) {
      return '–í—á–µ—Ä–∞';
    } else {
      return date.toLocaleDateString('ru-RU');
    }
  };

  const getUncategorizedCount = () => {
    return transactions.filter(t => !t.categoryId).length;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="p-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                  –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                </h1>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  {getUncategorizedCount()} –±–µ–∑ —Å—Ç–∞—Ç—å–∏
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex gap-3 mb-6">
              <button
                onClick={openCreateSidebar}
                className="px-4 py-2 text-sm font-medium text-white bg-green-600 hover:bg-green-700 rounded-lg transition-colors flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                –ü—Ä–∏—Ö–æ–¥
              </button>
              <button
                onClick={openCreateSidebar}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                </svg>
                –†–∞—Å—Ö–æ–¥
              </button>
              <button
                onClick={openCreateSidebar}
                className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                </svg>
                –ü–µ—Ä–µ–≤–æ–¥
              </button>

              <button className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium">
                üîç –§–∏–ª—å—Ç—Ä
              </button>
              <button className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium">
                üì• –ò–º–ø–æ—Ä—Ç
              </button>
              <button className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium">
                üì§ –≠–∫—Å–ø–æ—Ä—Ç
              </button>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="flex flex-wrap gap-2 mb-6">
              <button
                onClick={() => setPeriodFilter('current_month')}
                className={`px-3 py-1 rounded-lg text-sm font-medium ${
                  periodFilter === 'current_month'
                    ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
                    : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                }`}
              >
                –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
              </button>
              <button
                onClick={() => setPeriodFilter('all')}
                className={`px-3 py-1 rounded-lg text-sm font-medium ${
                  periodFilter === 'all'
                    ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
                    : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                }`}
              >
                –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
              </button>
              <button
                onClick={() => setPeriodFilter('planned_actual')}
                className={`px-3 py-1 rounded-lg text-sm font-medium ${
                  periodFilter === 'planned_actual'
                    ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
                    : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                }`}
              >
                –ü–ª–∞–Ω–æ–≤—ã–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ
              </button>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div className="grid grid-cols-3 gap-4 mb-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –°—É–º–º–∞
                </label>
                <input
                  type="text"
                  value={amountFilter}
                  onChange={(e) => setAmountFilter(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                </label>
                <input
                  type="text"
                  value={descriptionFilter}
                  onChange={(e) => setDescriptionFilter(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –§–∞–π–ª—ã
                </label>
                <select
                  value={fileFilter}
                  onChange={(e) => setFileFilter(e.target.value as any)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                >
                  <option value="all">–° —Ñ–∞–π–ª–∞–º–∏ –∏ –±–µ–∑</option>
                  <option value="with_files">–° —Ñ–∞–π–ª–∞–º–∏</option>
                  <option value="without_files">–ë–µ–∑ —Ñ–∞–π–ª–æ–≤</option>
                </select>
              </div>
            </div>
          </div>

          {/* –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –î–ê–¢–ê
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –û–ü–ï–†–ê–¶–ò–Ø
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –°–¢–ê–¢–¨–Ø/–û–ü–ò–°–ê–ù–ò–ï
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –ü–†–û–ï–ö–¢
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –ö–û–ù–¢–†–ê–ì–ï–ù–¢
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –°–ß–ï–¢
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {transactions.map((transaction) => (
                    <tr 
                      key={transaction.id} 
                      className="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer"
                      onClick={() => openEditSidebar(transaction)}
                    >
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                        {formatDate(transaction.date)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`text-sm font-medium ${
                          transaction.type === 'INCOME' 
                            ? 'text-green-600 dark:text-green-400' 
                            : 'text-red-600 dark:text-red-400'
                        }`}>
                          {transaction.type === 'INCOME' ? '+' : '-'}
                          {formatCurrency(transaction.amount, transaction.account.currency)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                        {transaction.category?.name || '–ë–µ–∑ —Å—Ç–∞—Ç—å–∏'} {transaction.description}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                        {transaction.project?.name || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                        {transaction.counterparty?.name || '–ë–µ–∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                        {transaction.account.name} ({formatCurrency(transaction.account.balance, transaction.account.currency)})
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        {showAddModal && (
          <div className="w-96 bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                {modalType === 'income' && '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏—Ö–æ–¥–∞'}
                {modalType === 'expense' && '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞'}
                {modalType === 'transfer' && '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'}
              </h2>
              <button
                onClick={() => setShowAddModal(false)}
                className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                ‚úï
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –°–£–ú–ú–ê *
                </label>
                <input
                  type="number"
                  step="0.01"
                  value={formData.amount}
                  onChange={(e) => setFormData({...formData, amount: e.target.value})}
                  placeholder="0,00"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –°–ß–ï–¢ *
                </label>
                <select
                  value={formData.accountId}
                  onChange={(e) => setFormData({...formData, accountId: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç...</option>
                  {accounts.map(account => (
                    <option key={account.id} value={account.id}>
                      {account.name} ({formatCurrency(account.balance, account.currency)})
                    </option>
                  ))}
                </select>
              </div>

              {modalType !== 'transfer' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°–¢–ê–¢–¨–Ø
                  </label>
                  <select
                    value={formData.categoryId}
                    onChange={(e) => setFormData({...formData, categoryId: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é...</option>
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {modalType === 'transfer' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      –°–û –°–ß–ï–¢–ê
                    </label>
                    <select
                      value={formData.accountId}
                      onChange={(e) => setFormData({...formData, accountId: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç...</option>
                      {accounts.map(account => (
                        <option key={account.id} value={account.id}>
                          {account.name} ({formatCurrency(account.balance, account.currency)})
                        </option>
                      ))}
                    </select>
                  </div>
                                     <div>
                     <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                       –ù–ê –°–ß–ï–¢
                     </label>
                     <select
                       value={formData.toAccountId}
                       onChange={(e) => setFormData({...formData, toAccountId: e.target.value})}
                       className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                     >
                       <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç...</option>
                       {accounts.map(account => (
                         <option key={account.id} value={account.id}>
                           {account.name} ({formatCurrency(account.balance, account.currency)})
                         </option>
                       ))}
                     </select>
                   </div>
                </>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –î–ê–¢–ê
                </label>
                <input
                  type="date"
                  value={formData.date}
                  onChange={(e) => setFormData({...formData, date: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                />
              </div>

              {modalType !== 'transfer' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ü–†–û–ï–ö–¢ –ò–õ–ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï
                  </label>
                  <select
                    value={formData.projectId}
                    onChange={(e) => setFormData({...formData, projectId: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç...</option>
                    {projects.map(project => (
                      <option key={project.id} value={project.id}>
                        {project.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {modalType !== 'transfer' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ö–û–ù–¢–†–ê–ì–ï–ù–¢
                  </label>
                  <select
                    value={formData.counterpartyId}
                    onChange={(e) => setFormData({...formData, counterpartyId: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...</option>
                    {counterparties.map(counterparty => (
                      <option key={counterparty.id} value={counterparty.id}>
                        {counterparty.name}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –û–ü–ò–°–ê–ù–ò–ï
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                />
              </div>

              <div className="space-y-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formData.includeInLiabilities}
                    onChange={(e) => setFormData({...formData, includeInLiabilities: e.target.checked})}
                    className="mr-2"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">
                    –£—á–∏—Ç—ã–≤–∞—Ç—å –≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
                  </span>
                  <a href="#" className="ml-2 text-gray-600 hover:text-gray-800 text-sm">
                    –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç?
                  </a>
                </label>

                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formData.accrueOnDifferentDate}
                    onChange={(e) => setFormData({...formData, accrueOnDifferentDate: e.target.checked})}
                    className="mr-2"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">
                    –ù–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É
                  </span>
                  <a href="#" className="ml-2 text-gray-600 hover:text-gray-800 text-sm">
                    –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç?
                  </a>
                </label>

                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formData.repeatOperation}
                    onChange={(e) => setFormData({...formData, repeatOperation: e.target.checked})}
                    className="mr-2"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">
                    –ü–æ–≤—Ç–æ—Ä—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                  </span>
                </label>
              </div>

              <button
                onClick={handleAddTransaction}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium"
              >
                {modalType === 'income' && '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
                {modalType === 'expense' && '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
                {modalType === 'transfer' && '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'}
              </button>

              <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 text-center">
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏{' '}
                  <a href="#" className="text-gray-600 hover:text-gray-800">
                    –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
                  </a>
                </p>
              </div>
            </div>
          </div>
        )}

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        {sidebarOpen && (
        <div className="fixed inset-0 z-50 overflow-hidden">
          <div className="absolute inset-0 bg-black bg-opacity-50" onClick={closeSidebar}></div>
          <div className="absolute right-0 top-0 h-full w-96 bg-white dark:bg-gray-800 shadow-xl">
            <div className="flex flex-col h-full">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  {sidebarMode === 'create' ? '–û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'}
                </h2>
                <button
                  onClick={closeSidebar}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              {/* –§–æ—Ä–º–∞ */}
              <div className="flex-1 overflow-y-auto p-4">
                <form className="space-y-4">
                  {/* –°—É–º–º–∞ –∏ —Å—á–µ—Ç */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –°–£–ú–ú–ê
                      </label>
                      <input
                        type="number"
                        defaultValue={selectedTransaction?.amount || 105.00}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        –°–ß–ï–¢
                      </label>
                      <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                        <option>br (-$6 953.00)</option>
                        {accounts.map(account => (
                          <option key={account.id} value={account.id}>
                            {account.name} ({account.currency})
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>

                  {/* –°—Ç–∞—Ç—å—è */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –°–¢–ê–¢–¨–Ø
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                      <option>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é...</option>
                      {categories.map(category => (
                        <option key={category.id} value={category.id}>
                          {category.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* –î–∞—Ç–∞ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –î–ê–¢–ê
                    </label>
                    <input
                      type="date"
                      defaultValue="2025-09-03"
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                    />
                  </div>

                  {/* –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –ü–†–û–ï–ö–¢ –ò–õ–ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                      <option>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç...</option>
                      {projects.map(project => (
                        <option key={project.id} value={project.id}>
                          {project.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –ö–û–ù–¢–†–ê–ì–ï–ù–¢
                    </label>
                    <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                      <option>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞...</option>
                      {counterparties.map(counterparty => (
                        <option key={counterparty.id} value={counterparty.id}>
                          {counterparty.name}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      –û–ü–ò–°–ê–ù–ò–ï
                    </label>
                    <textarea
                      defaultValue="Bro - v00693249@gmail.com"
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      rows={3}
                    />
                  </div>

                  {/* –ß–µ–∫–±–æ–∫—Å—ã */}
                  <div className="space-y-2">
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm text-gray-700 dark:text-gray-300">
                        –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
                      </span>
                      <span className="ml-auto text-xs text-gray-500">–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?</span>
                    </label>
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm text-gray-700 dark:text-gray-300">
                        –ù–∞—á–∏—Å–ª—è—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É
                      </span>
                      <span className="ml-auto text-xs text-gray-500">–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?</span>
                    </label>
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm text-gray-700 dark:text-gray-300">
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                      </span>
                    </label>
                  </div>
                </form>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ */}
              <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                <div className="flex gap-3">
                  <button className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                  <button 
                    onClick={closeSidebar}
                    className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>

                {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */}
                <div className="mt-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 text-center">
                  <p className="text-sm text-gray-600 dark:text-gray-400">
                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏{' '}
                    <a href="#" className="text-purple-600 hover:text-purple-700">
                      –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
                    </a>
                  </p>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ */}
                <div className="mt-4 text-xs text-gray-500">
                  T T —Å–æ–∑–¥–∞–ª(–∞) 03.09.2025 22:11
                </div>
              </div>
            </div>
          </div>
        </div>
        )}
      </div>
  );
}


