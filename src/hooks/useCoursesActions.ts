import { useCallback, useRef, useState } from 'react';
import { CourseSection, CoursePage } from './useCoursesData';
import { useToast } from '@/components/Toast';

interface UseCoursesActionsProps {
  sections: CourseSection[];
  setSections: (sections: CourseSection[]) => void;
  loadCourses: () => Promise<void>;
}

export function useCoursesActions({ sections, setSections, loadCourses }: UseCoursesActionsProps) {
  const [saving, setSaving] = useState(false);
  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const { showSuccess, showError, showWarning } = useToast();

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const updatePageInState = useCallback((updatedPage: CoursePage) => {
    setSections(currentSections =>
      currentSections.map(section => ({
        ...section,
        pages: section.pages.map(page =>
          page.id === updatedPage.id ? updatedPage : page
        )
      }))
    );
  }, [setSections]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
  const generateSystemPageName = (sectionId: string) => {
    const allPages = sections.flatMap(s => s.pages);
    
    let pageNumber = 1;
    while (allPages.some(page => page.title === `–£—Ä–æ–∫ ${pageNumber}`)) {
      pageNumber++;
    }
    return `–£—Ä–æ–∫ ${pageNumber}`;
  };

  const generateSystemSlug = (sectionId: string) => {
    const allPages = sections.flatMap(s => s.pages);
    
    let pageNumber = 1;
    while (allPages.some(page => page.slug === `lesson-${pageNumber}`)) {
      pageNumber++;
    }
    
    if (pageNumber > 1000) {
      return `lesson-${Date.now()}`;
    }
    
    return `lesson-${pageNumber}`;
  };

  const generateSystemSectionName = () => {
    let sectionNumber = 1;
    while (sections.some(section => section.name === `–†–∞–∑–¥–µ–ª ${sectionNumber}`)) {
      sectionNumber++;
    }
    return `–†–∞–∑–¥–µ–ª ${sectionNumber}`;
  };

  const generateSystemSectionKey = () => {
    let sectionNumber = 1;
    while (sections.some(section => section.key === `section-${sectionNumber}`)) {
      sectionNumber++;
    }
    return `section-${sectionNumber}`;
  };

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
  const autoSave = useCallback(async (page: CoursePage, fieldsToSave?: Partial<CoursePage>) => {
    if (!page.id) return;
    
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }

    saveTimeoutRef.current = setTimeout(async () => {
      try {
        setSaving(true);
        
        const dataToSave = fieldsToSave || {
          title: page.title,
          description: page.description,
          content: page.content,
          isPublished: page.isPublished
        };
        
        const response = await fetch(`/api/admin/courses/pages/${page.id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(dataToSave)
        });

        if (response.ok) {
          const updatedPage = await response.json();
          updatePageInState(updatedPage);
          
          if (fieldsToSave && Object.keys(fieldsToSave).some(key => key !== 'content')) {
            showSuccess('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
          }
          
          return true;
        } else {
          const errorData = await response.json();
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:', errorData.error);
          showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
          return false;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showWarning('–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é', '–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        return false;
      } finally {
        setSaving(false);
      }
    }, 800);
  }, [updatePageInState, showSuccess, showError, showWarning]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleUpdateContent = useCallback(async (content: string, page?: CoursePage | null) => {
    if (!page) return;
    
    const updatedPage = { ...page, content };
    updatePageInState(updatedPage);
    autoSave(updatedPage, { content });
  }, [updatePageInState, autoSave]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleUpdateTitle = useCallback(async (title: string, page?: CoursePage | null) => {
    if (!page) return;
    
    const updatedPage = { ...page, title };
    updatePageInState(updatedPage);
    autoSave(updatedPage, { title });
  }, [updatePageInState, autoSave]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleUpdateDescription = useCallback(async (description: string, page?: CoursePage | null) => {
    if (!page) return;
    
    const updatedPage = { ...page, description };
    updatePageInState(updatedPage);
    autoSave(updatedPage, { description });
  }, [updatePageInState, autoSave]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const forceSave = async (page: CoursePage): Promise<boolean> => {
    try {
      const response = await fetch(`/api/admin/courses/pages/${page.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: page.title,
          description: page.description,
          content: page.content,
          isPublished: page.isPublished
        })
      });

      return response.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return false;
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞
  const handleCreatePage = async (sectionId: string): Promise<CoursePage | null> => {
    const systemName = generateSystemPageName(sectionId);
    const systemSlug = generateSystemSlug(sectionId);
    const section = sections.find(s => s.id === sectionId);
    const pageCount = section?.pages.length || 0;
    
    try {
      const response = await fetch('/api/admin/courses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: systemName,
          slug: systemSlug,
          description: '',
          content: '',
          sectionId: sectionId,
          order: pageCount,
          isPublished: false
        })
      });

      if (response.ok) {
        const newPage = await response.json();
        await loadCourses();
        return newPage;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞:', error);
    }
    return null;
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞ (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ UI)
  const handleDeletePage = async (pageId: string) => {
    if (!pageId) return false;

    try {
      const response = await fetch(`/api/admin/courses/pages/${pageId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        await loadCourses();
        showSuccess('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
        return true;
      } else {
        const errorData = await response.json();
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞:', error);
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É—Ä—Å–∞');
    }
    return false;
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleTogglePagePublication = async (pageId: string) => {
    const page = sections.flatMap(s => s.pages).find(p => p.id === pageId);
    if (!page) return;

    try {
      const response = await fetch(`/api/admin/courses/pages/${pageId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isPublished: !page.isPublished
        })
      });

      if (response.ok) {
        const updatedPage = { ...page, isPublished: !page.isPublished };
        updatePageInState(updatedPage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∫—É—Ä—Å–∞
  const handleCreateSection = async () => {
    const sectionCount = sections.length;
    const systemName = `–†–∞–∑–¥–µ–ª ${sectionCount + 1}`;
    const systemKey = `section-${sectionCount + 1}`;
    
    try {
      const response = await fetch('/api/admin/courses/sections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: systemName,
          key: systemKey,
          description: '',
          emoji: 'üìñ',
          order: sectionCount,
          isVisible: true
        })
      });

      if (response.ok) {
        await loadCourses();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –∫—É—Ä—Å–∞:', error);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
  const handleUpdateSectionName = async (sectionId: string, name: string) => {
    try {
      const response = await fetch(`/api/admin/courses/sections/${sectionId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name })
      });

      if (response.ok) {
        await loadCourses();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞:', error);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleUpdatePageName = async (pageId: string, title: string) => {
    try {
      const response = await fetch(`/api/admin/courses/pages/${pageId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ title })
      });

      if (response.ok) {
        await loadCourses();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–∞
  const handleToggleSectionVisibility = async (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    if (!section) return;

    try {
      const response = await fetch(`/api/admin/courses/sections/${sectionId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isVisible: !section.isVisible
        })
      });

      if (response.ok) {
        await loadCourses();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–∞:', error);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
  const handleDeleteSection = async (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    if (!section) return;

    if (section.pages.length > 0) {
      if (!confirm(`–†–∞–∑–¥–µ–ª "${section.name}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${section.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ?`)) {
        return;
      }
    } else {
      if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª "${section.name}"?`)) {
        return;
      }
    }

    try {
      const response = await fetch(`/api/admin/courses/sections/${sectionId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        await loadCourses();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞:', error);
    }
  };

  return {
    saving,
    forceSave,
    handleUpdateContent,
    handleUpdateTitle,
    handleUpdateDescription,
    handleCreatePage,
    handleDeletePage,
    handleTogglePagePublication,
    handleCreateSection,
    handleUpdateSectionName,
    handleUpdatePageName,
    handleToggleSectionVisibility,
    handleDeleteSection
  };
}
