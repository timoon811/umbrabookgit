'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import DebugInfo from './DebugInfo';

interface DocsRedirectProps {
  fallbackSlug?: string;
}

export default function DocsRedirect({ fallbackSlug }: DocsRedirectProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [debugData, setDebugData] = useState<any>(null);

  useEffect(() => {
    async function redirectToFirstDoc() {
      try {
        console.log('üîÑ DocsRedirect: –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º fallback, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (fallbackSlug) {
          console.log(`üîÑ DocsRedirect: –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ fallback /docs/${fallbackSlug}`);
          router.replace(`/docs/${fallbackSlug}`);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/documentation');
        
        if (!response.ok) {
          throw new Error(`API Error: ${response.status}`);
        }

        const data = await response.json();
        console.log('üìÑ DocsRedirect: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
        setDebugData({ response: data, fallbackSlug });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if (data.documentation && Array.isArray(data.documentation) && data.documentation.length > 0) {
          const firstDoc = data.documentation[0];
          if (firstDoc && firstDoc.slug) {
            console.log(`üîÑ DocsRedirect: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /docs/${firstDoc.slug}`);
            router.replace(`/docs/${firstDoc.slug}`);
            return;
          }
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (fallbackSlug) {
          console.log(`üîÑ DocsRedirect: –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ fallback /docs/${fallbackSlug}`);
          router.replace(`/docs/${fallbackSlug}`);
        } else {
          console.log('‚ö†Ô∏è DocsRedirect: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          setError('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          setLoading(false);
        }
      } catch (err) {
        console.error('‚ùå DocsRedirect: –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:', err);
        setError(err instanceof Error ? err.message : String(err));
        setLoading(false);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const timer = setTimeout(() => {
      redirectToFirstDoc();
    }, 100);

    return () => clearTimeout(timer);
  }, [router, fallbackSlug]);

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto text-center py-16">
        <div className="w-24 h-24 mx-auto mb-6 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center">
          <svg className="w-12 h-12 text-blue-500 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
        </div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400">
          –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-4xl mx-auto text-center py-16">
        <div className="w-24 h-24 mx-auto mb-6 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center">
          <svg className="w-12 h-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        </div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-400 mb-6">
          {error}
        </p>
        <button
          onClick={() => window.location.reload()}
          className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <>
      <DebugInfo 
        title="DocsRedirect Debug" 
        data={debugData}
        error={error}
      />
    </>
  );
}
