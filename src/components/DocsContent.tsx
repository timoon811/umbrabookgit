'use client';

import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import DocsNavigation from "@/components/DocsNavigation";
import TableOfContents from "@/components/TableOfContents";
import SmartSidebar from "@/components/SmartSidebar";

interface NavItem {
  title: string;
  href: string;
  depth?: number;
}

interface NavSection {
  title: string;
  sectionKey: string;
  items: NavItem[];
}

interface DocsContentProps {
  children: React.ReactNode;
}

export default function DocsContent({ children }: DocsContentProps) {
  const searchParams = useSearchParams();
  const [nav, setNav] = useState<NavSection[]>([]);
  const [loading, setLoading] = useState(true);
  
  // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const projectId = searchParams.get('project');

  useEffect(() => {
    loadNavigation();
  }, [projectId]);

  const loadNavigation = async () => {
    try {
      setLoading(true);
      console.log('üîÑ DocsContent: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', projectId);
      
      // –°—Ç—Ä–æ–∏–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
      const apiUrl = projectId 
        ? `/api/docs/navigation?projectId=${projectId}`
        : '/api/docs/navigation';
      
      const response = await fetch(apiUrl, {
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setNav(data);
        console.log('‚úÖ DocsContent: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–¥–µ–ª–æ–≤:', data.length);
      } else {
        console.error('‚ùå DocsContent: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', response.status);
        setNav([]);
      }
    } catch (error) {
      console.error('‚ùå DocsContent: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      setNav([]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      {/* –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ö—ç–¥–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–∑ ConditionalNavigation */}

      <div className="docs-layout">
        {/* –õ–µ–≤—ã–π —Å–∞–π–¥–±–∞—Ä - –Ω–∞–≤–∏–≥–∞—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) */}
        <aside className="docs-sidebar border-r border-gray-200 dark:border-gray-800">
          <SmartSidebar>
            {loading ? (
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 dark:bg-[#0a0a0a] rounded animate-pulse"></div>
                <div className="h-3 bg-gray-200 dark:bg-[#0a0a0a] rounded animate-pulse ml-2"></div>
                <div className="h-3 bg-gray-200 dark:bg-[#0a0a0a] rounded animate-pulse ml-4"></div>
                <div className="h-3 bg-gray-200 dark:bg-[#0a0a0a] rounded animate-pulse ml-2"></div>
                <div className="h-4 bg-gray-200 dark:bg-[#0a0a0a] rounded animate-pulse"></div>
              </div>
            ) : (
              <DocsNavigation nav={nav} />
            )}
          </SmartSidebar>
        </aside>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className="docs-content">
          {children}
        </main>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - TOC (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) */}
        <aside className="docs-toc border-l border-gray-200 dark:border-gray-800">
          <SmartSidebar>
            <div className="text-sm font-medium text-gray-900 dark:text-white mb-3">
              –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            </div>
            <TableOfContents content="dynamic" />
          </SmartSidebar>
        </aside>
      </div>
    </div>
  );
}
