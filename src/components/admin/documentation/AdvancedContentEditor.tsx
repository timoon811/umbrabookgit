"use client";

import { useState, useEffect, useRef } from 'react';

import { DocumentationPage, DocumentationSection } from '@/types/documentation';
import KeyboardShortcuts, { ShortcutsHelp } from './KeyboardShortcuts';
import BlockMenu, { useBlockMenuPosition } from './BlockMenu';
import ConfirmModal from '@/components/modals/ConfirmModal';
import FileUploader from '@/components/admin/FileUploader';

export interface Block {
  id: string;
  type: string;
  content: string;
  metadata?: {
    alignment?: 'left' | 'center' | 'right';
    color?: string;
    backgroundColor?: string;
    url?: string;
    alt?: string;
    caption?: string;
    language?: string;
    fontSize?: 'small' | 'normal' | 'large' | 'xlarge';
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    strikethrough?: boolean;
    highlight?: boolean;
    highlightColor?: string;
    linkUrl?: string;
    linkTitle?: string;
    internalPageId?: string;
    youtubeId?: string;
    videoUrl?: string;
    isCallout?: boolean;
    calloutType?: 'info' | 'warning' | 'error' | 'success';
  };
}

interface AdvancedContentEditorProps {
  selectedPage: DocumentationPage | null;
  onUpdateContent: (content: string) => void;
  onUpdateTitle?: (title: string) => void;
  onUpdateDescription?: (description: string) => void;
  onDeletePage?: (pageId: string) => void;
  onTogglePublication?: (pageId: string) => void;
  onForceSave?: (page: DocumentationPage) => Promise<boolean>;
  saving: boolean;
  sections?: DocumentationSection[]; // –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
}

export default function AdvancedContentEditor({
  selectedPage,
  onUpdateContent,
  onUpdateTitle,
  onUpdateDescription,
  onDeletePage,
  onTogglePublication,
  onForceSave,
  saving,
  sections = []
}: AdvancedContentEditorProps) {
  const [blocks, setBlocks] = useState<Block[]>([]);
  const [activeBlockId, setActiveBlockId] = useState<string | null>(null);
  const [showToolbar, setShowToolbar] = useState(false);
  const [showLinkModal, setShowLinkModal] = useState(false);
  const [showInternalLinkModal, setShowInternalLinkModal] = useState(false);
  const [selectedText, setSelectedText] = useState('');
  const [toolbarPosition, setToolbarPosition] = useState({ top: 0, left: 0 });
  const [showShortcutsHelp, setShowShortcutsHelp] = useState(false);
  const [showBlockMenu, setShowBlockMenu] = useState(false);
  const [blockMenuPosition, setBlockMenuPosition] = useState({ top: 0, left: 0 });
  const [pendingBlockId, setPendingBlockId] = useState<string | null>(null);
  const [undoStack, setUndoStack] = useState<Block[][]>([]);
  const [redoStack, setRedoStack] = useState<Block[][]>([]);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isManualSaving, setIsManualSaving] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [showAdvancedToolbar, setShowAdvancedToolbar] = useState(false);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const [contextMenuPosition, setContextMenuPosition] = useState({ top: 0, left: 0 });
  const [fontSize, setFontSize] = useState<'small' | 'normal' | 'large' | 'xlarge'>('normal');
  const [textColor, setTextColor] = useState('#000000');
  const [highlightColor, setHighlightColor] = useState('#ffff00');
  
  const { getMenuPosition } = useBlockMenuPosition();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç race conditions
  useEffect(() => {
    if (!selectedPage) {
      setBlocks([createEmptyBlock()]);
      setIsInitialLoad(false);
      return;
    }

    setIsInitialLoad(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    const initTimer = setTimeout(() => {
      if (selectedPage?.content) {
        try {
          const parsedBlocks = parseMarkdownToBlocks(selectedPage.content);
          setBlocks(parsedBlocks.length > 0 ? parsedBlocks : [createEmptyBlock()]);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
          setBlocks([createEmptyBlock()]);
        }
      } else {
        setBlocks([createEmptyBlock()]);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      setTimeout(() => setIsInitialLoad(false), 200);
    }, 50);

    return () => clearTimeout(initTimer);
  }, [selectedPage?.id]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  useEffect(() => {
    if (!isInitialLoad && blocks.length > 0 && selectedPage?.id) {
      const markdown = convertBlocksToMarkdown(blocks);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
      if (markdown !== selectedPage.content) {
        setHasUnsavedChanges(true);
      }
    }
  }, [blocks, selectedPage?.id, selectedPage?.content, isInitialLoad]);



  const createEmptyBlock = (): Block => ({
    id: generateId(),
    type: 'paragraph',
    content: '',
    metadata: {}
  });

  const generateId = () => `block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  // –ü–∞—Ä—Å–∏–Ω–≥ Markdown –≤ –±–ª–æ–∫–∏
  const parseMarkdownToBlocks = (markdown: string): Block[] => {
    const lines = markdown.split('\n');
    const blocks: Block[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      // YouTube —Å—Å—ã–ª–∫–∏
      const youtubeMatch = line.match(/^https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
      if (youtubeMatch) {
        blocks.push({
          id: generateId(),
          type: 'youtube',
          content: line,
          metadata: { youtubeId: youtubeMatch[1] }
        });
        continue;
      }

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      if (line.startsWith('# ')) {
        blocks.push({
          id: generateId(),
          type: 'heading1',
          content: line.substring(2),
          metadata: {}
        });
        continue;
      }

      if (line.startsWith('## ')) {
        blocks.push({
          id: generateId(),
          type: 'heading2',
          content: line.substring(3),
          metadata: {}
        });
        continue;
      }

      if (line.startsWith('### ')) {
        blocks.push({
          id: generateId(),
          type: 'heading3',
          content: line.substring(4),
          metadata: {}
        });
        continue;
      }

      // –ö–æ–¥ –±–ª–æ–∫–∏
      if (line.startsWith('```')) {
        const language = line.substring(3).trim() || 'text';
        const codeLines = [];
        i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º–∏ ```
        
        while (i < lines.length && !lines[i].trim().startsWith('```')) {
          codeLines.push(lines[i]);
          i++;
        }
        
        blocks.push({
          id: generateId(),
          type: 'code',
          content: codeLines.join('\n'),
          metadata: { language }
        });
        continue;
      }

      // –¶–∏—Ç–∞—Ç—ã
      if (line.startsWith('> ')) {
        blocks.push({
          id: generateId(),
          type: 'quote',
          content: line.substring(2),
          metadata: {}
        });
        continue;
      }

      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageMatch = line.match(/!\[([^\]]*)\]\(([^)]+)\)/);
      if (imageMatch) {
        blocks.push({
          id: generateId(),
          type: 'image',
          content: imageMatch[2],
          metadata: { url: imageMatch[2], alt: imageMatch[1], caption: imageMatch[1] }
        });
        continue;
      }

      // –§–∞–π–ª—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã)
      const fileMatch = line.match(/\[üìé\s*([^\]]+)\]\(([^)]+)\)/);
      if (fileMatch) {
        blocks.push({
          id: generateId(),
          type: 'file',
          content: fileMatch[2],
          metadata: { url: fileMatch[2], name: fileMatch[1] }
        });
        continue;
      }

      // –°–ø–∏—Å–∫–∏
      if (line.match(/^[-*] /)) {
        blocks.push({
          id: generateId(),
          type: 'list',
          content: line.substring(2),
          metadata: {}
        });
        continue;
      }

      if (line.match(/^\d+\. /)) {
        blocks.push({
          id: generateId(),
          type: 'numbered-list',
          content: line.replace(/^\d+\. /, ''),
          metadata: {}
        });
        continue;
      }

      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      if (line.trim()) {
        blocks.push({
          id: generateId(),
          type: 'paragraph',
          content: line,
          metadata: {}
        });
      }
    }

    return blocks.length > 0 ? blocks : [createEmptyBlock()];
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –≤ Markdown
  const convertBlocksToMarkdown = (blocks: Block[]): string => {
    return blocks.map(block => {
      switch (block.type) {
        case 'heading1':
          return `# ${block.content}`;
        case 'heading2':
          return `## ${block.content}`;
        case 'heading3':
          return `### ${block.content}`;
        case 'quote':
          return `> ${block.content}`;
        case 'code':
          return `\`\`\`${block.metadata?.language || 'text'}\n${block.content}\n\`\`\``;
        case 'list':
          return `- ${block.content}`;
        case 'numbered-list':
          return `1. ${block.content}`;
        case 'image':
          return `![${block.metadata?.alt || ''}](${block.metadata?.url || block.content})`;
        case 'file':
          return `[üìé ${block.metadata?.name || '–§–∞–π–ª'}](${block.metadata?.url || block.content})`;
        case 'youtube':
          return block.content;
        case 'internal-link':
          return `[${block.content}](/docs/${block.metadata?.internalPageId})`;
        case 'external-link':
          return `[${block.content}](${block.metadata?.linkUrl})`;
        case 'callout':
          const calloutType = block.metadata?.calloutType || 'info';
          return `> **${calloutType.toUpperCase()}**: ${block.content}`;
        case 'divider':
          return '---';
        default:
          return block.content;
      }
    }).join('\n\n');
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è undo
  const saveStateForUndo = () => {
    setUndoStack(prev => {
      const newStack = [...prev, JSON.parse(JSON.stringify(blocks))];
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ –¥–æ 50 –æ–ø–µ—Ä–∞—Ü–∏–π
      return newStack.slice(-50);
    });
    setRedoStack([]); // –û—á–∏—â–∞–µ–º redo stack –ø—Ä–∏ –Ω–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const updateBlock = (blockId: string, updates: Partial<Block>) => {
    saveStateForUndo();
    setBlocks(prev => prev.map(block => 
      block.id === blockId 
        ? { ...block, ...updates }
        : block
    ));
  };

  // –§—É–Ω–∫—Ü–∏—è undo
  const performUndo = () => {
    if (undoStack.length === 0) return;
    
    const currentState = JSON.parse(JSON.stringify(blocks));
    const previousState = undoStack[undoStack.length - 1];
    
    setRedoStack(prev => [...prev, currentState]);
    setUndoStack(prev => prev.slice(0, -1));
    setBlocks(previousState);
  };

  // –§—É–Ω–∫—Ü–∏—è redo
  const performRedo = () => {
    if (redoStack.length === 0) return;
    
    const currentState = JSON.parse(JSON.stringify(blocks));
    const nextState = redoStack[redoStack.length - 1];
    
    setUndoStack(prev => [...prev, currentState]);
    setRedoStack(prev => prev.slice(0, -1));
    setBlocks(nextState);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
  const addBlock = (type: string, afterId?: string) => {
    saveStateForUndo();
    const newBlock: Block = {
      id: generateId(),
      type,
      content: '',
      metadata: {}
    };

    if (afterId) {
      const index = blocks.findIndex(b => b.id === afterId);
      const newBlocks = [...blocks];
      newBlocks.splice(index + 1, 0, newBlock);
      setBlocks(newBlocks);
    } else {
      setBlocks(prev => [...prev, newBlock]);
    }

    setActiveBlockId(newBlock.id);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const deleteBlock = (blockId: string) => {
    saveStateForUndo();
    if (blocks.length === 1) {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π
      setBlocks([createEmptyBlock()]);
    } else {
      setBlocks(prev => prev.filter(block => block.id !== blockId));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleTextSelection = () => {
    const selection = window.getSelection();
    if (selection && selection.toString().trim()) {
      setSelectedText(selection.toString());
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      setToolbarPosition({
        top: rect.top - 60,
        left: rect.left + (rect.width / 2)
      });
      setShowToolbar(true);
    } else {
      setShowToolbar(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
  const getAllPages = () => {
    const pages: Array<{id: string, title: string, sectionName: string}> = [];
    sections.forEach(section => {
      section.pages?.forEach((page) => {
        pages.push({
          id: page.id,
          title: page.title,
          sectionName: section.name
        });
      });
    });
    return pages;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  const handleShortcut = (action: string, data?: { level?: number; prefix?: string }) => {
    const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
    
    switch (action) {
      case 'bold':
        applyTextFormatting(activeElement, '**', '**');
        break;
      case 'italic':
        applyTextFormatting(activeElement, '*', '*');
        break;
      case 'underline':
        applyTextFormatting(activeElement, '__', '__');
        break;
      case 'strikethrough':
        applyTextFormatting(activeElement, '~~', '~~');
        break;
      case 'code':
        applyTextFormatting(activeElement, '`', '`');
        break;
      case 'link':
        if (activeElement && activeElement.selectionStart !== activeElement.selectionEnd) {
          setSelectedText(activeElement.value.substring(activeElement.selectionStart || 0, activeElement.selectionEnd || 0));
        }
        setShowLinkModal(true);
        break;
      case 'save':
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        break;
      case 'heading':
        if (activeBlockId && data?.level) {
          updateBlock(activeBlockId, { type: `heading${data.level}` });
        }
        break;
      case 'undo':
        performUndo();
        break;
      case 'redo':
        performRedo();
        break;
      case 'continueList':
        if (activeBlockId && data?.prefix) {
          continueList(activeBlockId, data.prefix);
        }
        break;
      case 'exitList':
        if (activeBlockId) {
          exitList(activeBlockId);
        }
        break;
      case 'indent':
        if (activeBlockId) {
          indentListItem(activeBlockId);
        }
        break;
      case 'outdent':
        if (activeBlockId) {
          outdentListItem(activeBlockId);
        }
        break;
      default:
        console.log('Unhandled shortcut:', action, data);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
  const continueList = (blockId: string, prefix: string) => {
    const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
    if (!activeElement) return;

    const cursorPos = activeElement.selectionStart || 0;
    const newText = activeElement.value.substring(0, cursorPos) + '\n' + prefix + activeElement.value.substring(cursorPos);
    
    updateBlock(blockId, { content: newText });
    
    setTimeout(() => {
      activeElement.focus();
      const newCursorPos = cursorPos + 1 + prefix.length;
      activeElement.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };

  const exitList = (blockId: string) => {
    const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
    if (!activeElement) return;

    const cursorPos = activeElement.selectionStart || 0;
    const textBeforeCursor = activeElement.value.substring(0, cursorPos);
    const textAfterCursor = activeElement.value.substring(cursorPos);
    
    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
    const lines = textBeforeCursor.split('\n');
    const lastLine = lines[lines.length - 1];
    const cleanedLine = lastLine.replace(/^[-*]\s|^\d+\.\s/, '');
    lines[lines.length - 1] = cleanedLine;
    
    const newText = lines.join('\n') + textAfterCursor;
    updateBlock(blockId, { content: newText });
    
    setTimeout(() => {
      activeElement.focus();
      const newCursorPos = cursorPos - (lastLine.length - cleanedLine.length);
      activeElement.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };

  const indentListItem = (blockId: string) => {
    const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
    if (!activeElement) return;

    const cursorPos = activeElement.selectionStart || 0;
    const textBeforeCursor = activeElement.value.substring(0, cursorPos);
    const textAfterCursor = activeElement.value.substring(cursorPos);
    
    const lines = textBeforeCursor.split('\n');
    const lineIndex = lines.length - 1;
    const currentLine = lines[lineIndex];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
    if (currentLine.match(/^[-*]\s/) || currentLine.match(/^\d+\.\s/)) {
      lines[lineIndex] = '  ' + currentLine;
      const newText = lines.join('\n') + textAfterCursor;
      updateBlock(blockId, { content: newText });
      
      setTimeout(() => {
        activeElement.focus();
        activeElement.setSelectionRange(cursorPos + 2, cursorPos + 2);
      }, 0);
    }
  };

  const outdentListItem = (blockId: string) => {
    const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
    if (!activeElement) return;

    const cursorPos = activeElement.selectionStart || 0;
    const textBeforeCursor = activeElement.value.substring(0, cursorPos);
    const textAfterCursor = activeElement.value.substring(cursorPos);
    
    const lines = textBeforeCursor.split('\n');
    const lineIndex = lines.length - 1;
    const currentLine = lines[lineIndex];
    
    // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø
    if (currentLine.startsWith('  ')) {
      lines[lineIndex] = currentLine.substring(2);
      const newText = lines.join('\n') + textAfterCursor;
      updateBlock(blockId, { content: newText });
      
      setTimeout(() => {
        activeElement.focus();
        activeElement.setSelectionRange(cursorPos - 2, cursorPos - 2);
      }, 0);
    }
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const applyTextFormatting = (element: HTMLTextAreaElement | HTMLInputElement | null, prefix: string, suffix: string) => {
    if (!element || !activeBlockId) return;

    const start = element.selectionStart || 0;
    const end = element.selectionEnd || 0;
    const selectedText = element.value.substring(start, end);
    
    let newText: string;
    let newCursorPos: number;

    if (selectedText) {
      // –ï—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
      newText = element.value.substring(0, start) + prefix + selectedText + suffix + element.value.substring(end);
      newCursorPos = end + prefix.length + suffix.length;
    } else {
      // –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –≤—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏ —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –º–µ–∂–¥—É –Ω–∏–º–∏
      newText = element.value.substring(0, start) + prefix + suffix + element.value.substring(end);
      newCursorPos = start + prefix.length;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
    updateBlock(activeBlockId, { content: newText });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
    setTimeout(() => {
      element.focus();
      element.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const handleKeyDown = (e: React.KeyboardEvent, blockId: string) => {
    const target = e.target as HTMLTextAreaElement | HTMLInputElement;
    const cursorPos = target.selectionStart || 0;
    
    // –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ - –ø–æ–∑–≤–æ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/" –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –±–ª–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
    if (e.key === '/' && !e.ctrlKey && !e.metaKey && !e.altKey) {
      const textBeforeCursor = target.value.substring(0, cursorPos);
      const lastChar = textBeforeCursor[textBeforeCursor.length - 1];
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ / –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞/–ø–µ—Ä–µ–Ω–æ—Å–∞
      if (textBeforeCursor.length === 0 || lastChar === '\n' || /\s/.test(lastChar)) {
        e.preventDefault();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–µ–Ω—é
        const position = getMenuPosition(target);
        
        setBlockMenuPosition(position);
        setPendingBlockId(blockId);
        setShowBlockMenu(true);
      }
      // –ò–Ω–∞—á–µ –ø–æ–∑–≤–æ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–∞ "/"
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (e.key === 'Enter') {
      const block = blocks.find(b => b.id === blockId);
      if (!block) return;

      // –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      if (block.type === 'numbered-list' || block.type === 'list') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞
        const lines = target.value.split('\n');
        const currentLineIndex = target.value.substring(0, cursorPos).split('\n').length - 1;
        const currentLine = lines[currentLineIndex] || '';
        
        if (currentLine.trim() === '') {
          // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞
          e.preventDefault();
          updateBlock(blockId, { type: 'paragraph' });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        e.preventDefault();
        const currentIndex = blocks.findIndex(b => b.id === blockId);
        
        const newBlock = {
          ...createEmptyBlock(),
          type: block.type
        };
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const newBlocks = [...blocks];
        newBlocks.splice(currentIndex + 1, 0, newBlock);
        setBlocks(newBlocks);
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ
        setTimeout(() => {
          setActiveBlockId(newBlock.id);
          const newBlockElement = document.querySelector(`[data-block-id="${newBlock.id}"] textarea, [data-block-id="${newBlock.id}"] input`);
          if (newBlockElement) {
            (newBlockElement as HTMLElement).focus();
          }
        }, 100);
        return;
      }
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (paragraph, heading, etc.) —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      // –ù–ï –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Enter, –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
      return;
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à - –ù–ï –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º, –ø–æ–∑–≤–æ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞ –∏–∑ –º–µ–Ω—é
  const handleBlockTypeSelect = (type: string) => {
    if (pendingBlockId) {
      updateBlock(pendingBlockId, { type });
      setPendingBlockId(null);
    }
    setShowBlockMenu(false);
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const handleManualSave = async () => {
    if (!selectedPage?.id || !hasUnsavedChanges) return;

    setIsManualSaving(true);
    try {
      const currentContent = convertBlocksToMarkdown(blocks);
      const updatedPage = {
        ...selectedPage,
        content: currentContent
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      onUpdateContent(currentContent);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      if (onForceSave) {
        const saveResult = await onForceSave(updatedPage);
        if (saveResult) {
          setHasUnsavedChanges(false);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    } finally {
      setIsManualSaving(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –Ω–∞–¥–µ–∂–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (selectedPage?.id && hasUnsavedChanges && !saving) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º —Å –ø–æ–º–æ—â—å—é sendBeacon
        const currentContent = convertBlocksToMarkdown(blocks);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        if (currentContent !== selectedPage.content) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º –¥–ª—è sendBeacon
            const data = new FormData();
            data.append('content', currentContent);
            data.append('title', selectedPage.title);
            data.append('description', selectedPage.description || '');
            
            // sendBeacon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const sent = navigator.sendBeacon(
              `/api/admin/documentation/${selectedPage.id}`, 
              data
            );
            
            if (!sent) {
              console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ sendBeacon');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ sendBeacon:', error);
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          e.preventDefault();
          e.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
          return e.returnValue;
        }
      }
    };

    const handleVisibilityChange = async () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏/–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞
      if (document.visibilityState === 'hidden' && selectedPage?.id && hasUnsavedChanges && onForceSave) {
        const currentContent = convertBlocksToMarkdown(blocks);
        if (currentContent !== selectedPage.content) {
          const updatedPage = { ...selectedPage, content: currentContent };
          await onForceSave(updatedPage);
        }
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [selectedPage, blocks, hasUnsavedChanges, onForceSave, saving]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ ? –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === '?' && !e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey) {
        const target = e.target as HTMLElement;
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–ª–∏ –ù–ï –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const isInInputField = target.tagName === 'INPUT' || target.tagName === 'TEXTAREA';
        const isInDocumentationEditor = target.closest('[data-documentation-editor]') !== null;
        
        if (!isInInputField || !isInDocumentationEditor) {
          e.preventDefault();
          setShowShortcutsHelp(true);
        }
      }
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ Escape
      if (e.key === 'Escape') {
        if (showBlockMenu) {
          setShowBlockMenu(false);
          setPendingBlockId(null);
        } else if (showShortcutsHelp) {
          setShowShortcutsHelp(false);
        } else if (showDeleteConfirm) {
          setShowDeleteConfirm(false);
        } else if (showContextMenu) {
          setShowContextMenu(false);
        } else if (showToolbar) {
          setShowToolbar(false);
        }
      }
    };

    const handleClickOutside = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ—á–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
      if (showBlockMenu) {
        if (!target.closest('.fixed[style*="z-index: 50"], .fixed[class*="z-50"]')) {
          setShowBlockMenu(false);
          setPendingBlockId(null);
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
      if (showContextMenu) {
        if (!target.closest('.fixed')) {
          setShowContextMenu(false);
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      if (showToolbar) {
        const selection = window.getSelection();
        if (!selection || selection.toString().trim() === '') {
          setShowToolbar(false);
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('click', handleClickOutside);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('click', handleClickOutside);
    };
  }, [showBlockMenu, showShortcutsHelp, showDeleteConfirm, showContextMenu, showToolbar]);

  const renderToolbar = () => {
    if (!showToolbar) return null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞
    const adjustedLeft = Math.max(10, Math.min(toolbarPosition.left - 150, window.innerWidth - 320));
    const adjustedTop = Math.max(10, toolbarPosition.top - 60);

    return (
      <div 
        className="fixed z-50 bg-white dark:bg-gray-800 shadow-xl rounded-lg border border-gray-200 dark:border-gray-700 px-3 py-2"
        style={{ 
          top: adjustedTop, 
          left: adjustedLeft,
          minWidth: '300px'
        }}
      >
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
        <div className="flex items-center gap-1 mb-2">
          {/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */}
          <button
            onClick={() => handleShortcut('bold')}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            title="–ñ–∏—Ä–Ω—ã–π (Ctrl+B)"
          >
            <strong className="text-sm">B</strong>
          </button>
          <button
            onClick={() => handleShortcut('italic')}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded italic transition-colors"
            title="–ö—É—Ä—Å–∏–≤ (Ctrl+I)"
          >
            <span className="text-sm">I</span>
          </button>
          <button
            onClick={() => handleShortcut('underline')}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded underline transition-colors"
            title="–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (Ctrl+U)"
          >
            <span className="text-sm">U</span>
          </button>
          <button
            onClick={() => handleShortcut('strikethrough')}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded line-through transition-colors"
            title="–ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
          >
            <span className="text-sm">S</span>
          </button>
          
          <div className="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>
          
          {/* –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */}
          <select
            value={fontSize}
            onChange={(e) => {
              setFontSize(e.target.value as any);
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
              const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
              if (activeElement && activeBlockId) {
                applyTextFormatting(activeElement, `<span style="font-size: ${e.target.value === 'small' ? '0.875rem' : e.target.value === 'large' ? '1.125rem' : e.target.value === 'xlarge' ? '1.25rem' : '1rem'}">`, '</span>');
              }
            }}
            className="px-2 py-1 text-xs bg-transparent border border-gray-300 dark:border-gray-600 rounded focus:ring-1 focus:ring-blue-500"
            title="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
          >
            <option value="small">–ú–∞–ª—ã–π</option>
            <option value="normal">–û–±—ã—á–Ω—ã–π</option>
            <option value="large">–ë–æ–ª—å—à–æ–π</option>
            <option value="xlarge">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
          </select>

          <div className="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>

          {/* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */}
          <div className="flex items-center gap-1">
            <input
              type="color"
              value={textColor}
              onChange={(e) => {
                setTextColor(e.target.value);
                const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
                if (activeElement && activeBlockId) {
                  applyTextFormatting(activeElement, `<span style="color: ${e.target.value}">`, '</span>');
                }
              }}
              className="w-6 h-6 border border-gray-300 dark:border-gray-600 rounded cursor-pointer"
              title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            />
            <button
              onClick={() => {
                const activeElement = document.activeElement as HTMLTextAreaElement | HTMLInputElement;
                if (activeElement && activeBlockId) {
                  applyTextFormatting(activeElement, `<mark style="background-color: ${highlightColor}">`, '</mark>');
                }
              }}
              className="p-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
              title="–í—ã–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–º"
            >
              <div className="w-4 h-4 bg-yellow-300 rounded"></div>
            </button>
            <input
              type="color"
              value={highlightColor}
              onChange={(e) => setHighlightColor(e.target.value)}
              className="w-6 h-6 border border-gray-300 dark:border-gray-600 rounded cursor-pointer"
              title="–¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è"
            />
          </div>

          <div className="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>

          {/* –ö–æ–¥ */}
          <button
            onClick={() => handleShortcut('code')}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded font-mono text-xs transition-colors"
            title="–ö–æ–¥ (Ctrl+`)"
          >
            &lt;/&gt;
          </button>
        </div>

        {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className="flex items-center gap-1">
          {/* –û—Ç–º–µ–Ω–∞/–ü–æ–≤—Ç–æ—Ä */}
          <button
            onClick={() => performUndo()}
            disabled={undoStack.length === 0}
            className={`p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors ${undoStack.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
            title="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M3 10l6-6m-6 6l6 6" />
            </svg>
          </button>
          <button
            onClick={() => performRedo()}
            disabled={redoStack.length === 0}
            className={`p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors ${redoStack.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
            title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Shift+Z)"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 10H3m18 0l-6-6m6 6l-6 6" />
            </svg>
          </button>

          <div className="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>

          {/* –°—Å—ã–ª–∫–∏ */}
          <button
            onClick={() => setShowLinkModal(true)}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            title="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (Ctrl+K)"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
          </button>
          <button
            onClick={() => setShowInternalLinkModal(true)}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            title="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </button>

          <div className="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>

          {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */}
          <button
            onClick={() => handleShortcut('heading', { level: 1 })}
            className="px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-xs font-bold transition-colors"
            title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 (Ctrl+1)"
          >
            H1
          </button>
          <button
            onClick={() => handleShortcut('heading', { level: 2 })}
            className="px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-xs font-semibold transition-colors"
            title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 (Ctrl+2)"
          >
            H2
          </button>
          <button
            onClick={() => handleShortcut('heading', { level: 3 })}
            className="px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-xs font-medium transition-colors"
            title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 (Ctrl+3)"
          >
            H3
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
          <button
            onClick={() => setShowToolbar(false)}
            className="ml-auto p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
            title="–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
        <div className="mt-2 pt-2 border-t border-gray-200 dark:border-gray-700">
          <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
            –í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </p>
        </div>
      </div>
    );
  };

  const renderBlock = (block: Block) => {
    const isActive = activeBlockId === block.id;

    return (
      <div key={block.id} className="group relative mb-4" data-block-id={block.id}>
        {/* –ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <div 
          className={`relative ${isActive ? 'ring-2 ring-gray-400 dark:ring-gray-500 rounded-lg' : ''}`}
          onClick={() => setActiveBlockId(block.id)}
        >
          <BlockRenderer
            block={block}
            isActive={isActive}
            onUpdate={(updates) => updateBlock(block.id, updates)}
            onTextSelection={handleTextSelection}
            onSlashCommand={handleKeyDown}
            sections={sections}
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–º */}
        {isActive && (
          <div className="absolute -left-12 top-0 flex flex-col gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
            <button
              onClick={() => addBlock('paragraph', block.id)}
              className="w-8 h-8 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded flex items-center justify-center text-xs"
              title="–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫"
            >
              +
            </button>
            {blocks.length > 1 && (
              <button
                onClick={() => deleteBlock(block.id)}
                className="w-8 h-8 bg-red-100 dark:bg-red-900 hover:bg-red-200 dark:hover:bg-red-800 rounded flex items-center justify-center text-xs text-red-600 dark:text-red-400"
                title="–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫"
              >
                √ó
              </button>
            )}
          </div>
        )}

        {/* –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤ */}
        {isActive && (
          <div className="absolute -right-2 top-0 z-40">
            <button
              onClick={(e) => {
                const position = getMenuPosition(e.currentTarget);
                setBlockMenuPosition(position);
                setPendingBlockId(block.id);
                setShowBlockMenu(true);
              }}
              className="bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 p-2 opacity-0 group-hover:opacity-100 transition-all duration-200 hover:scale-105"
              title="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –±–ª–æ–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /)"
            >
              <svg className="w-5 h-5 text-gray-600 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
              </svg>
            </button>
          </div>
        )}
      </div>
    );
  };



  if (!selectedPage) {
    return (
      <div className="flex-1 flex items-center justify-center bg-white dark:bg-gray-900">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 dark:bg-neutral-700 rounded-full flex items-center justify-center">
            <svg className="w-8 h-8 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </h3>
          <p className="text-gray-500 dark:text-gray-400">
            –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ª–µ–≤–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col bg-white dark:bg-gray-900" data-documentation-editor="true">
      {/* –®–∞–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */}
      <div className="border-b border-gray-200 dark:border-gray-700 px-3 py-3">
        {/* –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ */}
        <div className="flex items-start gap-2 mb-3">
          <div className={`w-2 h-2 rounded-full mt-1.5 flex-shrink-0 ${
            selectedPage.isPublished ? 'bg-green-500' : 'bg-yellow-500'
          }`} />
          <div className="flex-1 min-w-0 space-y-2">
            {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <input
              type="text"
              value={selectedPage.title}
              onChange={(e) => {
                if (onUpdateTitle) {
                  onUpdateTitle(e.target.value);
                }
              }}
              className="text-lg font-semibold text-gray-900 dark:text-white bg-transparent border-none outline-none w-full focus:ring-1 focus:ring-blue-500 focus:bg-gray-50 dark:focus:bg-gray-800 rounded px-1 py-0.5 transition-colors"
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."
            />
            {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ */}
            <input
              type="text"
              value={selectedPage.description || ''}
              onChange={(e) => {
                if (onUpdateDescription) {
                  onUpdateDescription(e.target.value);
                }
              }}
              className="text-xs text-gray-600 dark:text-gray-400 bg-transparent border-none outline-none w-full focus:ring-1 focus:ring-blue-500 focus:bg-gray-50 dark:focus:bg-gray-800 rounded px-1 py-0.5 transition-colors"
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."
            />
          </div>
        </div>
        
        {/* –°—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex items-center justify-between gap-2">
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ */}
          <div className="flex items-center gap-1.5 px-2 py-1 bg-gray-50 dark:bg-gray-800 rounded text-xs">
            <div className={`w-1.5 h-1.5 rounded-full ${hasUnsavedChanges ? 'bg-orange-500' : 'bg-green-500'}`}></div>
            <span className={`font-medium ${hasUnsavedChanges ? 'text-orange-600 dark:text-orange-400' : 'text-green-600 dark:text-green-400'}`}>
              {hasUnsavedChanges ? '–ò–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}
            </span>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex items-center gap-1">
            {/* –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            <button
              onClick={handleManualSave}
              disabled={!hasUnsavedChanges || isManualSaving}
              className={`flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium rounded transition-all ${
                hasUnsavedChanges && !isManualSaving
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'
              }`}
              title={hasUnsavedChanges ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"}
            >
              {isManualSaving ? (
                <>
                  <div className="w-3 h-3 border border-white/30 border-t-white rounded-full animate-spin"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </>
              )}
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/—Å–∫—Ä—ã—Ç–∏—è */}
            {onTogglePublication && (
              <button
                onClick={() => onTogglePublication(selectedPage.id)}
                className={`flex items-center gap-1 px-2 py-1.5 text-xs font-medium rounded transition-all ${
                  selectedPage.isPublished
                    ? 'text-orange-600 hover:text-orange-700 bg-orange-50 hover:bg-orange-100 dark:bg-orange-900/20 dark:text-orange-400'
                    : 'text-green-600 hover:text-green-700 bg-green-50 hover:bg-green-100 dark:bg-green-900/20 dark:text-green-400'
                }`}
                title={selectedPage.isPublished ? "–°–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É" : "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"}
              >
                {selectedPage.isPublished ? (
                  <>
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                    </svg>
                    –°–∫—Ä—ã—Ç—å
                  </>
                ) : (
                  <>
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                  </>
                )}
              </button>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ */}
            <button
              onClick={() => setShowShortcutsHelp(true)}
              className="flex items-center justify-center w-6 h-6 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
              title="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </button>

            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
            {onDeletePage && (
              <button
                onClick={() => setShowDeleteConfirm(true)}
                className="flex items-center justify-center w-6 h-6 text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20 rounded transition-colors"
                title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
              >
                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
      <div className="flex-1 overflow-y-auto">
        <div className="max-w-4xl mx-auto px-6 py-6">
          <div onMouseUp={handleTextSelection}>
            {blocks.map((block) => renderBlock(block))}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ */}
          <button
            onClick={() => addBlock('paragraph')}
            className="w-full mt-4 p-3 border-2 border-dashed border-gray-200 dark:border-gray-700 rounded-lg hover:border-gray-300 dark:hover:border-gray-600 text-gray-500 dark:text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
          >
            + –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
          </button>
        </div>
      </div>

      {/* –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      {renderToolbar()}

      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      {showContextMenu && (
        <div
          className="fixed z-50 bg-white dark:bg-gray-800 shadow-lg rounded-lg border border-gray-200 dark:border-gray-700 py-2 min-w-[200px]"
          style={{
            top: Math.min(contextMenuPosition.top, window.innerHeight - 200),
            left: Math.min(contextMenuPosition.left, window.innerWidth - 220)
          }}
          onMouseLeave={() => setShowContextMenu(false)}
        >
          <button
            onClick={() => {
              handleShortcut('bold');
              setShowContextMenu(false);
            }}
            className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
          >
            <strong className="text-sm">B</strong>
            <span className="text-sm">–°–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º</span>
            <span className="ml-auto text-xs text-gray-400">Ctrl+B</span>
          </button>
          <button
            onClick={() => {
              handleShortcut('italic');
              setShowContextMenu(false);
            }}
            className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
          >
            <span className="text-sm italic">I</span>
            <span className="text-sm">–ö—É—Ä—Å–∏–≤</span>
            <span className="ml-auto text-xs text-gray-400">Ctrl+I</span>
          </button>
          <button
            onClick={() => {
              handleShortcut('underline');
              setShowContextMenu(false);
            }}
            className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
          >
            <span className="text-sm underline">U</span>
            <span className="text-sm">–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</span>
            <span className="ml-auto text-xs text-gray-400">Ctrl+U</span>
          </button>
          <hr className="my-1 border-gray-200 dark:border-gray-600" />
          <button
            onClick={() => {
              setShowLinkModal(true);
              setShowContextMenu(false);
            }}
            className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            <span className="text-sm">–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</span>
            <span className="ml-auto text-xs text-gray-400">Ctrl+K</span>
          </button>
          <button
            onClick={() => {
              handleShortcut('code');
              setShowContextMenu(false);
            }}
            className="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3"
          >
            <span className="text-xs font-mono">&lt;/&gt;</span>
            <span className="text-sm">–ö–æ–¥</span>
            <span className="ml-auto text-xs text-gray-400">Ctrl+`</span>
          </button>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <LinkModal 
        isOpen={showLinkModal}
        onClose={() => setShowLinkModal(false)}
        selectedText={selectedText}
        onApply={() => {
          // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
          setShowLinkModal(false);
        }}
      />

      <InternalLinkModal
        isOpen={showInternalLinkModal}
        onClose={() => setShowInternalLinkModal(false)}
        selectedText={selectedText}
        pages={getAllPages()}
        onApply={() => {
          // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Å—ã–ª–∫–∏
          setShowInternalLinkModal(false);
        }}
      />

      {/* –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –±–ª–æ–∫–æ–≤ - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ */}
      <BlockMenu
        isOpen={showBlockMenu}
        onClose={() => {
          setShowBlockMenu(false);
          setPendingBlockId(null);
        }}
        onSelectType={handleBlockTypeSelect}
        position={blockMenuPosition}
        currentBlockType={pendingBlockId ? blocks.find(b => b.id === pendingBlockId)?.type : undefined}
      />

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à */}
      <KeyboardShortcuts onShortcut={handleShortcut} />
      <ShortcutsHelp 
        isOpen={showShortcutsHelp} 
        onClose={() => setShowShortcutsHelp(false)} 
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <ConfirmModal
        isOpen={showDeleteConfirm}
        onClose={() => setShowDeleteConfirm(false)}
        onConfirm={() => {
          if (onDeletePage) {
            onDeletePage(selectedPage.id);
          }
        }}
        title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏?"
        message={`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É "${selectedPage.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥–µ—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É—Ç–µ—Ä—è–Ω–æ.`}
        type="danger"
        actionType="delete-page"
        confirmText="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        cancelText="–û—Ç–º–µ–Ω–∏—Ç—å"
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
function BlockRenderer({ 
  block, 
  isActive, 
  onUpdate, 
  onTextSelection,
  onSlashCommand,
}: {
  block: Block;
  isActive: boolean;
  onUpdate: (updates: Partial<Block>) => void;
  onTextSelection: () => void;
  onSlashCommand?: (e: React.KeyboardEvent, blockId: string) => void;
  sections?: DocumentationSection[];
}) {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (textareaRef.current && autoResize.current) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å React —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
      const timeoutId = setTimeout(() => {
        if (textareaRef.current && autoResize.current) {
          autoResize.current(textareaRef.current);
        }
      }, 10);
      
      return () => clearTimeout(timeoutId);
    }
  }, [block.content]);

  // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è responsive –ø–æ–≤–µ–¥–µ–Ω–∏—è
  useEffect(() => {
    if (!textareaRef.current) return;

    const resizeObserver = new ResizeObserver(() => {
      if (textareaRef.current && autoResize.current) {
        autoResize.current(textareaRef.current);
      }
    });

    resizeObserver.observe(textareaRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  const updateContent = (content: string) => {
    onUpdate({ content });
  };

  const updateMetadata = (metadata: Partial<Block['metadata']>) => {
    onUpdate({ metadata: { ...block.metadata, ...metadata } });
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ textarea
  const autoResize = useRef<((element: HTMLTextAreaElement) => void) | null>(null);
  
  if (!autoResize.current) {
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å debouncing –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    autoResize.current = (element: HTMLTextAreaElement) => {
      requestAnimationFrame(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        const cursorPosition = element.selectionStart;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º scrollbar –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        const originalOverflow = element.style.overflow;
        element.style.overflow = 'hidden';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        element.style.height = 'auto';
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤—ã—Å–æ—Ç—É —Å —É—á–µ—Ç–æ–º padding –∏ border
        const computed = window.getComputedStyle(element);
        const paddingTop = parseInt(computed.paddingTop, 10);
        const paddingBottom = parseInt(computed.paddingBottom, 10);
        const borderTop = parseInt(computed.borderTopWidth, 10);
        const borderBottom = parseInt(computed.borderBottomWidth, 10);
        const lineHeight = parseInt(computed.lineHeight, 10) || 20;
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ + padding + border
        const minHeight = lineHeight + paddingTop + paddingBottom + borderTop + borderBottom;
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ = 30 —Å—Ç—Ä–æ–∫ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
        const maxHeight = lineHeight * 30 + paddingTop + paddingBottom + borderTop + borderBottom;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        const newHeight = Math.min(Math.max(element.scrollHeight, minHeight), maxHeight);
        element.style.height = newHeight + 'px';
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
        if (element.scrollHeight > maxHeight) {
          element.style.overflowY = 'auto';
        } else {
          element.style.overflowY = 'hidden';
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º overflow –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
        if (originalOverflow) {
          element.style.overflow = originalOverflow;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        element.setSelectionRange(cursorPosition, cursorPosition);
      });
    };
  }

  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    updateContent(e.target.value);
    if (autoResize.current) {
      autoResize.current(e.target);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
    setContextMenuPosition({ top: e.clientY, left: e.clientX });
    setShowContextMenu(true);
  };

  const baseInputProps = {
    value: block.content,
    onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      if (e.target.tagName === 'TEXTAREA') {
        handleTextareaChange(e.target as HTMLTextAreaElement);
      } else {
        updateContent(e.target.value);
      }
    },
    onMouseUp: onTextSelection,
    onKeyDown: (e: React.KeyboardEvent) => onSlashCommand?.(e, block.id),
    onContextMenu: handleContextMenu,
    className: "w-full bg-transparent border-none outline-none resize-none focus:ring-0",
    onInput: (e: React.FormEvent<HTMLTextAreaElement>) => {
      if (e.target && (e.target as HTMLElement).tagName === 'TEXTAREA' && autoResize.current) {
        autoResize.current(e.target as HTMLTextAreaElement);
      }
    }
  };

  switch (block.type) {
    case 'heading1':
      return (
        <input 
          {...baseInputProps}
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1"
          className={`${baseInputProps.className} text-3xl font-bold text-gray-900 dark:text-white py-2`}
        />
      );

    case 'heading2':
      return (
        <input 
          {...baseInputProps}
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2"
          className={`${baseInputProps.className} text-2xl font-semibold text-gray-900 dark:text-white py-2`}
        />
      );

    case 'heading3':
      return (
        <input 
          {...baseInputProps}
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3"
          className={`${baseInputProps.className} text-xl font-medium text-gray-900 dark:text-white py-1`}
        />
      );

    case 'quote':
      return (
        <div className="border-l-4 border-gray-400 dark:border-gray-500 pl-4 bg-gray-50 dark:bg-gray-800/50 rounded-r-lg">
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–¶–∏—Ç–∞—Ç–∞..."
            className={`${baseInputProps.className} text-gray-700 dark:text-gray-300 italic py-3 min-h-[80px]`}
            style={{ minHeight: '80px', overflow: 'hidden' }}
          />
        </div>
      );

    case 'list':
      return (
        <div className="flex items-start gap-3">
          <span className="text-gray-400 mt-1">‚Ä¢</span>
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞..."
            className={`${baseInputProps.className} text-gray-900 dark:text-white flex-1 min-h-[24px]`}
            style={{ minHeight: '24px', overflow: 'hidden' }}
          />
        </div>
      );

    case 'numbered-list':
      return (
        <div className="flex items-start gap-3">
          <span className="text-gray-400 mt-1">1.</span>
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞..."
            className={`${baseInputProps.className} text-gray-900 dark:text-white flex-1 min-h-[24px]`}
            style={{ minHeight: '24px', overflow: 'hidden' }}
          />
        </div>
      );

    case 'code':
      return (
        <div className="bg-gray-100 dark:bg-gray-800 rounded-lg border">
          <div className="flex items-center justify-between px-4 py-2 border-b border-gray-200 dark:border-gray-700">
            <select
              value={block.metadata?.language || 'text'}
              onChange={(e) => updateMetadata({ language: e.target.value })}
              className="text-sm bg-transparent border-none outline-none text-gray-600 dark:text-gray-400"
            >
              <option value="text">–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
              <option value="javascript">JavaScript</option>
              <option value="typescript">TypeScript</option>
              <option value="python">Python</option>
              <option value="html">HTML</option>
              <option value="css">CSS</option>
              <option value="json">JSON</option>
              <option value="bash">Bash</option>
              <option value="sql">SQL</option>
              <option value="php">PHP</option>
            </select>
          </div>
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–ö–æ–¥..."
            className={`${baseInputProps.className} font-mono text-sm text-gray-900 dark:text-gray-100 p-4 min-h-[120px]`}
            style={{ minHeight: '120px', overflow: 'hidden' }}
          />
        </div>
      );

    case 'image':
      return (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          {block.metadata?.url ? (
            <div>
              <img 
                src={block.metadata.url} 
                alt={block.metadata.alt || ''}
                className="max-w-full h-auto rounded-lg"
              />
              <input
                type="text"
                value={block.metadata.caption || ''}
                onChange={(e) => updateMetadata({ caption: e.target.value })}
                placeholder="–ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                className="w-full mt-3 text-sm text-gray-600 dark:text-gray-400 bg-transparent border-none outline-none"
              />
              <button
                onClick={() => updateMetadata({ url: '' })}
                className="mt-2 text-xs text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
              >
                –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
              <FileUploader
                type="image"
                accept="image/*"
                onUpload={(url, name, fileType) => {
                  updateContent(url);
                  updateMetadata({ 
                    url: url, 
                    alt: name,
                    caption: name
                  });
                }}
                className="mb-4"
              />
              
              {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
              <div className="flex items-center gap-3">
                <hr className="flex-1 border-gray-300 dark:border-gray-600" />
                <span className="text-xs text-gray-500 dark:text-gray-400">–∏–ª–∏</span>
                <hr className="flex-1 border-gray-300 dark:border-gray-600" />
              </div>
              
              {/* –ü–æ–ª–µ –¥–ª—è URL */}
              <div className="text-center">
                <input
                  type="url"
                  value={block.content}
                  onChange={(e) => {
                    updateContent(e.target.value);
                    updateMetadata({ url: e.target.value });
                  }}
                  placeholder="–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
                  className="w-full text-center bg-transparent border border-gray-300 dark:border-gray-600 rounded px-3 py-2 outline-none focus:border-gray-900 dark:focus:border-gray-300 text-gray-600 dark:text-gray-400"
                />
              </div>
            </div>
          )}
        </div>
      );

    case 'file':
      const getFileIcon = (fileName: string, fileType?: string) => {
        if (fileType?.startsWith('image/')) return 'üñº';
        if (fileType?.includes('pdf')) return 'üìÑ';
        if (fileType?.includes('word') || fileType?.includes('document')) return 'üìù';
        if (fileType?.includes('excel') || fileType?.includes('spreadsheet')) return 'üìä';
        if (fileType?.includes('powerpoint') || fileType?.includes('presentation')) return 'üìΩ';
        if (fileType?.includes('zip') || fileType?.includes('rar') || fileType?.includes('7z')) return 'üóú';
        if (fileType?.includes('audio')) return 'üéµ';
        if (fileType?.includes('video')) return 'üé¨';
        if (fileName?.endsWith('.txt')) return 'üìã';
        if (fileName?.endsWith('.json')) return 'üìã';
        if (fileName?.endsWith('.csv')) return 'üìä';
        return 'üìé';
      };

      return (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          {block.metadata?.url ? (
            <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="text-2xl">
                {getFileIcon(block.metadata.name || '', block.metadata.type)}
              </div>
              <div className="flex-1 min-w-0">
                <input
                  type="text"
                  value={block.metadata.name || ''}
                  onChange={(e) => updateMetadata({ name: e.target.value })}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"
                  className="w-full font-medium text-gray-900 dark:text-white bg-transparent border-none outline-none"
                />
                {block.metadata.size && (
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    –†–∞–∑–º–µ—Ä: {(block.metadata.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                )}
              </div>
              <div className="flex items-center gap-2">
                <a
                  href={block.metadata.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-gray-200"
                  title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
                <button
                  onClick={() => updateMetadata({ url: '', name: '', size: undefined, type: undefined })}
                  className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                  title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
              <FileUploader
                type="file"
                accept="*/*"
                onUpload={(url, name, fileType) => {
                  updateContent(url);
                  updateMetadata({ 
                    url: url, 
                    name: name,
                    type: fileType
                  });
                }}
              />
              
              {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
              <div className="flex items-center gap-3">
                <hr className="flex-1 border-gray-300 dark:border-gray-600" />
                <span className="text-xs text-gray-500 dark:text-gray-400">–∏–ª–∏</span>
                <hr className="flex-1 border-gray-300 dark:border-gray-600" />
              </div>
              
              {/* –ü–æ–ª–µ –¥–ª—è URL */}
              <div className="text-center">
                <input
                  type="url"
                  value={block.content}
                  onChange={(e) => {
                    updateContent(e.target.value);
                    updateMetadata({ url: e.target.value });
                  }}
                  placeholder="–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ URL —Ñ–∞–π–ª–∞..."
                  className="w-full text-center bg-transparent border border-gray-300 dark:border-gray-600 rounded px-3 py-2 outline-none focus:border-gray-900 dark:focus:border-gray-300 text-gray-600 dark:text-gray-400"
                />
              </div>
            </div>
          )}
        </div>
      );

    case 'youtube':
      const youtubeId = block.metadata?.youtubeId || extractYouTubeId(block.content);
      return (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          {youtubeId ? (
            <div>
              <div className="relative aspect-video">
                <iframe
                  src={`https://www.youtube.com/embed/${youtubeId}`}
                  className="w-full h-full rounded-lg"
                  frameBorder="0"
                  allowFullScreen
                  title="YouTube video"
                />
              </div>
              <input
                type="text"
                value={block.metadata?.caption || ''}
                onChange={(e) => updateMetadata({ caption: e.target.value })}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                className="w-full mt-3 text-sm text-gray-600 dark:text-gray-400 bg-transparent border-none outline-none"
              />
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="text-gray-400 mb-3 text-4xl">üì∫</div>
              <input
                type="url"
                value={block.content}
                onChange={(e) => {
                  updateContent(e.target.value);
                  const id = extractYouTubeId(e.target.value);
                  if (id) updateMetadata({ youtubeId: id });
                }}
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ..."
                className="w-full text-center bg-transparent border-none outline-none text-gray-600 dark:text-gray-400"
              />
            </div>
          )}
        </div>
      );

    case 'callout':
      const calloutStyles = {
        info: 'bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700 text-gray-800 dark:text-gray-200',
        warning: 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-200',
        error: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200',
        success: 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200'
      };
      const calloutType = block.metadata?.calloutType || 'info';
      
      return (
        <div className={`border rounded-lg p-4 ${calloutStyles[calloutType]}`}>
          <div className="flex items-center gap-2 mb-2">
            <select
              value={calloutType}
              onChange={(e) => updateMetadata({ calloutType: e.target.value as any })}
              className="bg-transparent border-none outline-none text-sm font-medium"
            >
              <option value="info">üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
              <option value="warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
              <option value="error">‚ùå –û—à–∏–±–∫–∞</option>
              <option value="success">‚úÖ –£—Å–ø–µ—Ö</option>
            </select>
          </div>
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–Ω–æ—Å–∫–∏..."
            className={`${baseInputProps.className} min-h-[60px]`}
            style={{ minHeight: '60px', overflow: 'hidden' }}
          />
        </div>
      );

    case 'divider':
      return (
        <div className="py-6">
          <hr className="border-gray-300 dark:border-gray-600" />
        </div>
      );

    default: // paragraph
      return (
        <div className="relative">
          <textarea 
            {...baseInputProps}
            ref={textareaRef}
            placeholder="–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ / –¥–ª—è –∫–æ–º–∞–Ω–¥..."
            className={`${baseInputProps.className} text-gray-900 dark:text-white min-h-[24px] leading-relaxed py-1`}
            style={{ minHeight: '24px', overflow: 'hidden' }}
          />
          {!block.content && isActive && (
            <div className="absolute top-full left-0 mt-1 text-xs text-gray-400 dark:text-gray-500 pointer-events-none">
              –ù–∞–∂–º–∏—Ç–µ <kbd className="px-1.5 py-0.5 bg-gray-100 dark:bg-gray-700 rounded text-xs">/</kbd> –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
            </div>
          )}
        </div>
      );
  }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
function LinkModal({ 
  isOpen, 
  onClose, 
  selectedText, 
  onApply 
}: {
  isOpen: boolean;
  onClose: () => void;
  selectedText: string;
  onApply: (url: string, title: string) => void;
}) {
  const [url, setUrl] = useState('');
  const [title, setTitle] = useState(selectedText);

  useEffect(() => {
    if (isOpen) {
      setTitle(selectedText);
    }
  }, [isOpen, selectedText]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-96">
        <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
            </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              URL
            </label>
            <input
              type="url"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="https://example.com"
            />
          </div>
        </div>
        
        <div className="flex justify-end gap-3 mt-6">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={() => onApply(url, title)}
            disabled={!url || !title}
            className="px-4 py-2 bg-gray-900 dark:bg-gray-200 text-white dark:text-gray-900 rounded-md hover:bg-gray-800 dark:hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
function InternalLinkModal({ 
  isOpen, 
  onClose, 
  selectedText, 
  pages,
  onApply 
}: {
  isOpen: boolean;
  onClose: () => void;
  selectedText: string;
  pages: Array<{id: string, title: string, sectionName: string}>;
  onApply: (pageId: string, title: string) => void;
}) {
  const [selectedPageId, setSelectedPageId] = useState('');
  const [title, setTitle] = useState(selectedText);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredPages = pages.filter(page => 
    page.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    page.sectionName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  useEffect(() => {
    if (isOpen) {
      setTitle(selectedText);
    }
  }, [isOpen, selectedText]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-96 max-h-96">
        <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
            </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
            </label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white mb-2"
              placeholder="–ù–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É..."
            />
            
            <div className="max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md">
              {filteredPages.map(page => (
                <label key={page.id} className="flex items-center p-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                  <input
                    type="radio"
                    value={page.id}
                    checked={selectedPageId === page.id}
                    onChange={(e) => setSelectedPageId(e.target.value)}
                    className="mr-3"
                  />
                  <div>
                    <div className="text-sm font-medium text-gray-900 dark:text-white">{page.title}</div>
                    <div className="text-xs text-gray-500 dark:text-gray-400">{page.sectionName}</div>
                  </div>
                </label>
              ))}
            </div>
          </div>
        </div>
        
        <div className="flex justify-end gap-3 mt-6">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={() => onApply(selectedPageId, title)}
            disabled={!selectedPageId || !title}
            className="px-4 py-2 bg-gray-900 dark:bg-gray-200 text-white dark:text-gray-900 rounded-md hover:bg-gray-800 dark:hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YouTube ID
function extractYouTubeId(url: string): string | null {
  const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
  return match ? match[1] : null;
}
