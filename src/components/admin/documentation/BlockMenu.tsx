"use client";

import { useState, useEffect, useRef } from 'react';
import { Block } from './AdvancedContentEditor';

interface BlockMenuProps {
  isOpen: boolean;
  onClose: () => void;
  onSelectType: (type: string) => void;
  position: { top: number; left: number };
  currentBlockType?: string;
}

interface BlockType {
  type: string;
  title: string;
  description: string;
  icon: string;
  shortcut?: string;
  category: 'basic' | 'media' | 'structure' | 'advanced';
}

const blockTypes: BlockType[] = [
  // Basic
  { type: 'paragraph', title: '–¢–µ–∫—Å—Ç', description: '–û–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞', icon: '¬∂', category: 'basic' },
  { type: 'heading1', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1', description: '–ö—Ä—É–ø–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞', icon: 'H1', shortcut: 'Ctrl+1', category: 'basic' },
  { type: 'heading2', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞', icon: 'H2', shortcut: 'Ctrl+2', category: 'basic' },
  { type: 'heading3', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3', description: '–ú–∞–ª—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'H3', shortcut: 'Ctrl+3', category: 'basic' },
  
  // Structure
  { type: 'list', title: '–°–ø–∏—Å–æ–∫', description: '–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', icon: '‚Ä¢', category: 'structure' },
  { type: 'numbered-list', title: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', description: '–ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', icon: '1.', category: 'structure' },
  { type: 'quote', title: '–¶–∏—Ç–∞—Ç–∞', description: '–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞', icon: '‚ùù', category: 'structure' },
  { type: 'callout', title: '–í—ã–Ω–æ—Å–∫–∞', description: '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: 'üí°', category: 'structure' },
  { type: 'divider', title: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å', description: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è', icon: '‚Äî', category: 'structure' },
  
  // Media
  { type: 'image', title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', description: '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ —Ñ–æ—Ç–æ', icon: 'üñº', category: 'media' },
  { type: 'file', title: '–§–∞–π–ª', description: '–î–æ–∫—É–º–µ–Ω—Ç, –∞—Ä—Ö–∏–≤ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', icon: 'üìé', category: 'media' },
  { type: 'youtube', title: 'YouTube', description: '–í–∏–¥–µ–æ —Å YouTube', icon: 'üì∫', category: 'media' },
  
  // Advanced
  { type: 'code', title: '–ö–æ–¥', description: '–ë–ª–æ–∫ –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π', icon: '</>', category: 'advanced' },
];

const categoryNames = {
  basic: '–û—Å–Ω–æ–≤–Ω—ã–µ',
  structure: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞',
  media: '–ú–µ–¥–∏–∞',
  advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ'
};

export default function BlockMenu({ isOpen, onClose, onSelectType, position, currentBlockType }: BlockMenuProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedIndex, setSelectedIndex] = useState(0);
  const menuRef = useRef<HTMLDivElement>(null);
  const searchInputRef = useRef<HTMLInputElement>(null);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredBlocks = blockTypes.filter(block =>
    block.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    block.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupedBlocks = filteredBlocks.reduce((acc, block) => {
    if (!acc[block.category]) {
      acc[block.category] = [];
    }
    acc[block.category].push(block);
    return acc;
  }, {} as Record<string, BlockType[]>);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isOpen) return;

      switch (e.key) {
        case 'Escape':
          e.preventDefault();
          onClose();
          break;
        case 'ArrowDown':
          e.preventDefault();
          setSelectedIndex(prev => (prev + 1) % filteredBlocks.length);
          break;
        case 'ArrowUp':
          e.preventDefault();
          setSelectedIndex(prev => (prev - 1 + filteredBlocks.length) % filteredBlocks.length);
          break;
        case 'Enter':
          e.preventDefault();
          if (filteredBlocks[selectedIndex]) {
            onSelectType(filteredBlocks[selectedIndex].type);
            onClose();
          }
          break;
        case 'Tab':
          e.preventDefault();
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, selectedIndex, filteredBlocks, onSelectType, onClose]);

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [isOpen]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(e.target as Node)) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [isOpen, onClose]);

  // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen) {
      setSearchTerm('');
      setSelectedIndex(0);
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div
      ref={menuRef}
      className="fixed z-50 bg-white dark:bg-gray-800 shadow-2xl rounded-lg border border-gray-200 dark:border-gray-700 w-80 sm:w-96 max-h-96 overflow-hidden animate-in fade-in slide-in-from-bottom-2 duration-200"
      style={{
        top: position.top,
        left: position.left
      }}
    >
      {/* –ü–æ–∏—Å–∫ */}
      <div className="p-3 border-b border-gray-200 dark:border-gray-700">
        <div className="relative">
          <input
            ref={searchInputRef}
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setSelectedIndex(0);
            }}
            placeholder="–ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤..."
            className="w-full px-3 py-2 pl-8 text-sm bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-gray-900 dark:focus:ring-gray-300 focus:border-transparent outline-none"
          />
          <svg className="absolute left-2.5 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ */}
      <div className="max-h-80 overflow-y-auto">
        {filteredBlocks.length === 0 ? (
          <div className="p-4 text-center text-gray-500 dark:text-gray-400">
            –ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : (
          Object.entries(groupedBlocks).map(([category, blocks]) => (
            <div key={category} className="py-2">
              <div className="px-3 py-1 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                {categoryNames[category as keyof typeof categoryNames]}
              </div>
              {blocks.map((block, blockIndex) => {
                const globalIndex = filteredBlocks.findIndex(b => b.type === block.type);
                const isSelected = globalIndex === selectedIndex;
                const isCurrent = block.type === currentBlockType;
                
                return (
                  <button
                    key={block.type}
                    onClick={() => {
                      onSelectType(block.type);
                      onClose();
                    }}
                    onMouseEnter={() => setSelectedIndex(globalIndex)}
                    className={`w-full px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${
                      isSelected ? 'bg-gray-100 dark:bg-gray-700' : ''
                    } ${isCurrent ? 'bg-green-50 dark:bg-green-900/20' : ''}`}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded text-sm">
                        {block.icon}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-gray-900 dark:text-white text-sm">
                            {block.title}
                            {isCurrent && <span className="ml-2 text-xs text-green-600 dark:text-green-400">‚Ä¢ –¢–µ–∫—É—â–∏–π</span>}
                          </span>
                          {block.shortcut && (
                            <span className="text-xs text-gray-400 font-mono">
                              {block.shortcut}
                            </span>
                          )}
                        </div>
                        <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                          {block.description}
                        </p>
                      </div>
                    </div>
                  </button>
                );
              })}
            </div>
          ))
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div className="p-2 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
        <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          <span>‚Üë‚Üì –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Ä¢ Enter –≤—ã–±–æ—Ä</span>
          <span>Esc –∑–∞–∫—Ä—ã—Ç—å</span>
        </div>
      </div>
    </div>
  );
}

// –•—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é (–¥–ª—è fixed –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
export function useBlockMenuPosition() {
  const getMenuPosition = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const menuWidth = window.innerWidth > 640 ? 384 : 320; // –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    const menuHeight = 400; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –º–µ–Ω—é
    const padding = 16;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ viewport (–¥–ª—è fixed –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    let left = rect.left;
    let top = rect.bottom + 8;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
    if (left + menuWidth > window.innerWidth - padding) {
      left = Math.max(padding, window.innerWidth - menuWidth - padding);
    }
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    if (window.innerWidth < 640) {
      left = Math.max(padding, (window.innerWidth - menuWidth) / 2);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –º–µ–Ω—é —Å–Ω–∏–∑—É
    if (top + menuHeight > window.innerHeight - padding) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–≤–µ—Ä—Ö—É –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
      top = Math.max(padding, rect.top - menuHeight - 8);
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–Ω—é –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
    if (top < padding) {
      top = padding;
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–Ω—é –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
    if (left < padding) {
      left = padding;
    }
    
    return { top, left };
  };
  
  return { getMenuPosition };
}
