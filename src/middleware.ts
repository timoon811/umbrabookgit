import { NextRequest, NextResponse } from "next/server";
import { checkRateLimit, getRateLimitHeaders, getRateLimitConfig } from "@/lib/rate-limit";

// JWT_SECRET –¥–ª—è Edge Runtime
const JWT_SECRET = "umbra_platform_super_secret_jwt_key_2024";

// –†–æ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const ADMIN_ROLES = ['ADMIN', 'ROP_PROCESSOR', 'ROP_BUYER', 'MODERATOR', 'SUPPORT', 'MEDIA_BUYER'];

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const publicRoutes = [
  "/login",
  "/register",
  "/error",
  "/api/auth/login",
  "/api/auth/register",
  "/api/auth/logout",
  "/api/auth/verify-email",
  "/api/auth/reset-password",
  "/api/seed",
  "/api/admin/import-db",
  "/processing-project", // –î–æ–±–∞–≤–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
];

// –ú–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const protectedRoutes = [
  "/profile",
  "/settings",
  "/management",
  "/deposit",
  "/salaries",
  "/wallets",
  "/api/user",
  "/api/deposits",
  "/api/manager",
  "/api/notifications",
];

// –ú–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminRoutes = [
  "/admin",
  "/connections", // –°–≤—è–∑–∫–∏
  "/buyer", // –ë–∞–π–µ—Ä
  "/finance", // –§–∏–Ω–∞–Ω—Å—ã
];

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
function decodeJWT(token: string): { userId: string; role: string; exp: number } | null {
  try {
    // JWT —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏
    const parts = token.split('.');
    if (parts.length !== 3) {
      return null;
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
    const payload = parts[1];
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ base64
    const base64 = payload.replace(/-/g, '+').replace(/_/g, '/');
    const padded = base64.padEnd(base64.length + (4 - base64.length % 4) % 4, '=');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    const decoded = atob(padded);
    const data = JSON.parse(decoded);

    return {
      userId: data.userId,
      role: data.role,
      exp: data.exp
    };
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function checkAdminRole(role: string): boolean {
  return ADMIN_ROLES.includes(role);
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º –±–µ–∑ rate limiting
  if (
    pathname.startsWith("/_next") ||
    pathname.startsWith("/favicon") ||
    pathname.includes(".") // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  ) {
    return NextResponse.next();
  }

  // Rate limiting –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é)
  if (pathname.startsWith('/api/')) {
    const rateLimitResult = checkRateLimit(request, pathname);
    const config = getRateLimitConfig(pathname);
    
    if (!rateLimitResult.allowed) {
      const headers = getRateLimitHeaders(
        false,
        rateLimitResult.remaining,
        rateLimitResult.resetTime,
        config
      );
      
      return NextResponse.json(
        { 
          error: 'Too Many Requests',
          message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          retryAfter: headers['Retry-After'] 
        },
        { 
          status: 429,
          headers 
        }
      );
    }
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º API –º–∞—Ä—à—Ä—É—Ç–∞–º
  if (
    pathname.startsWith("/api/auth") ||
    pathname.startsWith("/api/seed") || // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
    pathname.startsWith("/api/admin/import-db") // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ë–î
  ) {
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (publicRoutes.some(route => pathname.startsWith(route))) {
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookies –∏–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
  let token = request.cookies.get("auth-token")?.value;
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ cookies, –ø—Ä–æ–≤–µ—Ä—è–µ–º Authorization header
  if (!token) {
    const authHeader = request.headers.get("authorization");
    if (authHeader?.startsWith("Bearer ")) {
      token = authHeader.substring(7);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (protectedRoutes.some(route => pathname.startsWith(route))) {
    if (!token) {
      return NextResponse.redirect(new URL("/login", request.url));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    const decoded = decodeJWT(token);
    if (!decoded || decoded.exp * 1000 < Date.now()) {
      // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
      const response = NextResponse.redirect(new URL("/login", request.url));
      response.cookies.set("auth-token", "", {
        path: "/",
        httpOnly: true,
        maxAge: 0,
        expires: new Date(0),
        sameSite: "lax",
      });
      return response;
    }

    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  if (adminRoutes.some(route => pathname.startsWith(route))) {
    if (!token) {
      const loginUrl = new URL("/login", request.url);
      loginUrl.searchParams.set("from", pathname);
      return NextResponse.redirect(loginUrl);
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = decodeJWT(token);
    
    if (!decoded) {
      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω - –æ—á–∏—â–∞–µ–º –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
      const response = NextResponse.redirect(new URL("/login", request.url));
      response.cookies.set("auth-token", "", {
        path: "/",
        httpOnly: true,
        maxAge: 0,
        expires: new Date(0),
        sameSite: "lax",
      });
      return response;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    if (decoded.exp * 1000 < Date.now()) {
      // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
      const response = NextResponse.redirect(new URL("/login", request.url));
      response.cookies.set("auth-token", "", {
        path: "/",
        httpOnly: true,
        maxAge: 0,
        expires: new Date(0),
        sameSite: "lax",
      });
      return response;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAdmin = checkAdminRole(decoded.role);

    if (!isAdmin) {
      // –†–æ–ª—å –Ω–µ –∞–¥–º–∏–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      return NextResponse.redirect(new URL("/", request.url));
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return NextResponse.next();
  }

  // API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  if (pathname.startsWith("/api/admin")) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - Authorization header)
    let apiToken = request.headers.get("authorization")?.startsWith("Bearer ") 
      ? request.headers.get("authorization")?.substring(7)
      : request.cookies.get("auth-token")?.value;
      
    if (!apiToken) {
      return NextResponse.json(
        { message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" },
        { status: 401 }
      );
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = decodeJWT(apiToken);
    
    if (!decoded || decoded.exp * 1000 < Date.now()) {
      return NextResponse.json(
        { message: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAdmin = checkAdminRole(decoded.role);

    if (!isAdmin) {
      return NextResponse.json(
        { message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" },
        { status: 403 }
      );
    }

    return NextResponse.next();
  }

  // API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –±–∞–π–µ—Ä–æ–≤
  if (pathname.startsWith("/api/buyer")) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - Authorization header)
    let buyerApiToken = request.headers.get("authorization")?.startsWith("Bearer ") 
      ? request.headers.get("authorization")?.substring(7)
      : request.cookies.get("auth-token")?.value;
      
    if (!buyerApiToken) {
      return NextResponse.json(
        { message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" },
        { status: 401 }
      );
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = decodeJWT(buyerApiToken);
    
    if (!decoded || decoded.exp * 1000 < Date.now()) {
      return NextResponse.json(
        { message: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –±–∞–π–µ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const hasBuyerAccess = ['MEDIA_BUYER', 'ROP_BUYER', 'ADMIN'].includes(decoded.role);

    if (!hasBuyerAccess) {
      return NextResponse.json(
        { message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" },
        { status: 403 }
      );
    }

    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª–∏ PROCESSOR
  if (pathname.startsWith("/api/manager")) {
    console.log("üîç Middleware: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º", pathname);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - Authorization header)
    const authHeader = request.headers.get("authorization");
    console.log("üîç Middleware: Authorization header:", authHeader);
    
    let managerApiToken = authHeader?.startsWith("Bearer ") 
      ? authHeader.substring(7)
      : request.cookies.get("auth-token")?.value;
      
    console.log("üîç Middleware: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", managerApiToken ? "–ï–°–¢–¨" : "–ù–ï–¢");
      
    if (!managerApiToken) {
      console.log("‚ùå Middleware: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return NextResponse.json(
        { message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" },
        { status: 401 }
      );
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = decodeJWT(managerApiToken);
    
    if (!decoded || decoded.exp * 1000 < Date.now()) {
      return NextResponse.json(
        { message: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" },
        { status: 401 }
      );
    }

    // –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã
    const hasManagerAccess = ['PROCESSOR', 'ROP_PROCESSOR', 'ADMIN'].includes(decoded.role);

    if (!hasManagerAccess) {
      return NextResponse.json(
        { message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞." },
        { status: 403 }
      );
    }

    return NextResponse.next();
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - uploads (uploaded files)
     * - public files with extensions
     */
    "/((?!_next/static|_next/image|favicon.ico|uploads|.*\\.).*)",
  ],
};