import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminPassword = await bcrypt.hash("umbra2024", 10);
  const admin = await prisma.users.upsert({
    where: { email: "admin@umbra-platform.dev" },
    update: {},
    create: {
      email: "admin@umbra-platform.dev",
      name: "Umbra Platform Admin",
      password: adminPassword,
      role: "ADMIN",
      status: "APPROVED",
    },
  });

  console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤:", admin.email);

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userPassword = await bcrypt.hash("user123", 10);
  const user = await prisma.users.upsert({
    where: { email: "user@umbra-platform.dev" },
    update: {},
    create: {
      email: "user@umbra-platform.dev",
      name: "Regular User",
      password: userPassword,
      role: "USER",
      status: "APPROVED",
    },
  });
  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤:", user.email);

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  const moderatorPassword = await bcrypt.hash("moderator123", 10);
  const moderator = await prisma.users.upsert({
    where: { email: "moderator@umbra-platform.dev" },
    update: {},
    create: {
      email: "moderator@umbra-platform.dev",
      name: "Moderator",
      password: moderatorPassword,
      role: "MODERATOR",
      status: "APPROVED",
    },
  });
  console.log("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤:", moderator.email);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã
  const courses = [
    {
      title: "–û—Å–Ω–æ–≤—ã Umbra Platform",
      description: "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
      slug: "umbra-basics",
      isPublished: true,
    },
    {
      title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      description: "–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      slug: "advanced-features",
      isPublished: true,
    },
    {
      title: "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
      description: "–†–∞–±–æ—Ç–∞ —Å API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
      slug: "api-integrations",
      isPublished: false,
    },
  ];

  for (const course of courses) {
    await prisma.courses.upsert({
      where: { slug: course.slug },
      update: course,
      create: course,
    });
    console.log(`‚úÖ –ö—É—Ä—Å –≥–æ—Ç–æ–≤: ${course.title}`);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—á–µ—Ç–∞
  const accounts = [
    {
      name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç",
      type: "BANK",
      currency: "USD",
      balance: 150000.00,
    },
    {
      name: "–ù–∞–ª–∏—á–Ω—ã–µ",
      type: "CASH",
      currency: "USD",
      balance: 25000.00,
    },
    {
      name: "–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç",
      type: "BANK",
      currency: "USD",
      balance: 5000.00,
    },
    {
      name: "MetaMask Wallet",
      type: "CRYPTO_WALLET",
      currency: "USD",
      balance: 2500.00,
      cryptocurrencies: ["ETH", "MATIC", "LINK"],
    },
    {
      name: "Binance Exchange",
      type: "CRYPTO_EXCHANGE",
      currency: "USD",
      balance: 15000.00,
      cryptocurrencies: ["BTC", "ETH", "BNB", "SOL", "ADA"],
    },
    {
      name: "Trust Wallet",
      type: "CRYPTO_WALLET",
      currency: "USD",
      balance: 800.00,
      cryptocurrencies: ["BTC", "ETH", "XRP", "DOGE"],
    },
  ];

  for (const account of accounts) {
    const accountData = {
      ...account,
      cryptocurrencies: account.cryptocurrencies ? JSON.stringify(account.cryptocurrencies) : null,
    };

    await prisma.finance_accounts.create({
      data: accountData,
    });
    console.log(`‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${account.name}`);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
  const financeProjects = [
    {
      name: "–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Umbra Platform",
      description: "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Umbra",
      status: "ACTIVE",
      budget: 50000.00,
      startDate: new Date("2024-01-01"),
      endDate: new Date("2024-12-31"),
    },
    {
      name: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è",
      description: "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ —Ä—ã–Ω–∫–µ",
      status: "ACTIVE",
      budget: 25000.00,
      startDate: new Date("2024-03-01"),
      endDate: new Date("2024-09-30"),
    },
    {
      name: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API",
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      status: "COMPLETED",
      budget: 15000.00,
      startDate: new Date("2024-02-01"),
      endDate: new Date("2024-06-30"),
    },
    {
      name: "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Umbra",
      status: "ON_HOLD",
      budget: 30000.00,
      startDate: new Date("2024-07-01"),
      endDate: new Date("2024-12-31"),
    },
    {
      name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      description: "–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      status: "ACTIVE",
      budget: 10000.00,
      startDate: new Date("2024-04-01"),
      endDate: new Date("2024-10-31"),
    },
  ];

  for (const project of financeProjects) {
    await prisma.finance_projects.create({
      data: project,
    });
    console.log(`‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${project.name}`);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
  const documentationSections = [
    {
      name: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
      key: "getting-started",

      description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
      order: 1,
      isVisible: true,
    },
    {
      name: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞",
      key: "installation",

      description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      order: 2,
      isVisible: true,
    },
    {
      name: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
      key: "api-reference",

      description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      order: 3,
      isVisible: true,
    },
  ];

  // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö ID
  const createdSections = new Map<string, string>();
  
  for (const section of documentationSections) {
    const createdSection = await prisma.documentation_sections.upsert({
      where: { key: section.key },
      update: section,
      create: section,
    });
    createdSections.set(section.key, createdSection.id);
    console.log(`‚úÖ –†–∞–∑–¥–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤: ${section.name}`);
  }

  const documentationPages = [
    {
      title: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å Umbra Platform",
      description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
      slug: "getting-started",
      content: null, // –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      sectionId: createdSections.get("getting-started")!,
      order: 1,
      isPublished: true,
    },
    {
      title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
      description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      slug: "installation", 
      content: null, // –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      sectionId: createdSections.get("installation")!,
      order: 2,
      isPublished: true,
    },
    {
      title: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
      description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
      slug: "api-reference",
      content: null, // –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      sectionId: createdSections.get("api-reference")!,
      order: 3,
      isPublished: false,
    },
  ];

  for (const page of documentationPages) {
    await prisma.documentation.upsert({
      where: { slug: page.slug },
      update: page,
      create: page,
    });
    console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞: ${page.title}`);
  }

  console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
