generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  name                  String
  password              String
  telegram              String                  @unique
  role                  UserRole                @default(USER)
  status                UserStatus              @default(PENDING)
  isBlocked             Boolean                 @default(false)
  assignedBuyerId       String?
  leadBuyerId           String?                 // Для привязки к Lead Buyer
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  analytics             analytics[]
  assignedBuyer         users?                  @relation("BuyerAssignment", fields: [assignedBuyerId], references: [id])
  assignedProcessors    users[]                 @relation("BuyerAssignment")
  leadBuyer             users?                  @relation("LeadBuyerAssignment", fields: [leadBuyerId], references: [id])
  teamMembers           users[]                 @relation("LeadBuyerAssignment")
  processorDeposits     processor_deposits[]
  salaryRequests        salary_requests[]
  bonusPayments         bonus_payments[]
  processorShifts       processor_shifts[]
  shiftPenalties        shift_penalties[]
  assignedShifts        user_shift_assignments[]
  assignedByShifts      user_shift_assignments[] @relation("AssignedBy")
  goalAchievements      user_goal_achievements[]
  earningsLog           salary_earnings_log[]    @relation("ProcessorEarningsLog")
  requestsLog           salary_request_log[]     @relation("ProcessorRequestLog")
  adminRequestsLog      salary_request_log[]     @relation("AdminRequestLog")

  // Buyer связи
  buyerProjects         buyer_projects[]        @relation("BuyerProjects")
  buyerDailyLogs        buyer_daily_logs[]      @relation("BuyerDailyLogs")
  moderatedLogs         buyer_daily_logs[]      @relation("DailyLogModerator")
  lockedLogs            buyer_daily_logs[]      @relation("DailyLogLocker")
  buyerRequests         buyer_requests[]        @relation("BuyerRequests")
  processedRequests     buyer_requests[]        @relation("RequestProcessor")
  bonusAssignments      buyer_bonus_assignments[] @relation("BuyerBonusAssignments")
  sharedCostAllocations shared_cost_allocations[] @relation("SharedCostAllocations")
  buyerSignals          buyer_signals[]         @relation("BuyerSignals")
  resolvedSignals       buyer_signals[]         @relation("SignalResolver")

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([telegram])
  @@index([assignedBuyerId])
  @@index([leadBuyerId])
  @@map("users")
}

model courses {
  id          String            @id @default(uuid())
  title       String
  description String?
  slug        String            @unique
  category    String            @default("general")
  level       String            @default("beginner")
  isPublished Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  sections    course_sections[]

  @@index([slug])
  @@index([isPublished])
  @@index([category])
  @@map("courses")
}

model course_sections {
  id          String         @id @default(uuid())
  title       String
  description String?
  order       Int            @default(0)
  isPublished Boolean        @default(false)
  courseId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  pages       course_pages[]
  course      courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_sections")
}

model course_pages {
  id          String          @id @default(uuid())
  title       String
  content     String?
  blocks      String?
  order       Int             @default(0)
  isPublished Boolean         @default(false)
  sectionId   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  section     course_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("course_pages")
}

model documentation_sections {
  id          String           @id @default(uuid())
  name        String
  key         String           @unique
  description String?
  order       Int              @default(0)
  isVisible   Boolean          @default(true)
  projectId   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pages       documentation[]
  project     content_projects? @relation(fields: [projectId], references: [id])

  @@map("documentation_sections")
}

model documentation {
  id          String                 @id @default(uuid())
  title       String
  description String?
  slug        String                 @unique
  content     String?
  blocks      String?
  sectionId   String
  order       Int                    @default(0)
  isPublished Boolean                @default(false)
  parentId    String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  section     documentation_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  parent      documentation?         @relation("DocumentationHierarchy", fields: [parentId], references: [id])
  children    documentation[]        @relation("DocumentationHierarchy")

  @@map("documentation")
}

model finance_accounts {
  id                   String                 @id @default(uuid())
  name                 String
  type                 String                 @default("OTHER")
  currency             String                 @default("USD")
  balance              Float                  @default(0)
  commission           Float                  @default(0)
  cryptocurrencies     String?
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  transactions         finance_transactions[]
  transfersTo          finance_transactions[] @relation("TransactionToAccount")

  @@map("finance_accounts")
}

model finance_counterparties {
  id           String                 @id @default(uuid())
  name         String
  type         String                 @default("CLIENT")
  email        String?
  phone        String?
  address      String?
  taxNumber    String?
  bankDetails  String?
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]

  @@map("finance_counterparties")
}

model finance_categories {
  id           String                 @id @default(uuid())
  name         String
  type         String                 @default("EXPENSE")
  description  String?
  color        String                 @default("#3B82F6")
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]

  @@map("finance_categories")
}

model finance_projects {
  id             String                 @id @default(uuid())
  name           String
  description    String?
  status         String                 @default("ACTIVE")
  startDate      DateTime?
  endDate        DateTime?
  budget         Float?
  isArchived     Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  depositSources deposit_sources[]
  transactions   finance_transactions[]

  @@map("finance_projects")
}

model finance_transactions {
  id                String                  @id @default(uuid())
  accountId         String
  counterpartyId    String?
  categoryId        String?
  projectId         String?
  projectKey        String?
  type              TransactionType
  amount            Float
  commissionPercent Float                   @default(0)
  commissionAmount  Float                   @default(0)
  netAmount         Float
  originalAmount    Float
  description       String?
  date              DateTime                @default(now())
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  // Поля для переводов и обменов
  toAccountId       String?
  exchangeRate      Float?
  fromCurrency      String?
  toCurrency        String?
  toAmount          Float?
  
  project           finance_projects?       @relation(fields: [projectId], references: [id])
  category          finance_categories?     @relation(fields: [categoryId], references: [id])
  counterparty      finance_counterparties? @relation(fields: [counterpartyId], references: [id])
  account           finance_accounts        @relation(fields: [accountId], references: [id])
  toAccount         finance_accounts?       @relation("TransactionToAccount", fields: [toAccountId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([projectId])
  @@index([projectKey])
  @@index([date])
  @@index([type])
  @@index([toAccountId])
  @@map("finance_transactions")
}

model deposit_sources {
  id         String           @id @default(uuid())
  name       String
  token      String
  projectId  String
  commission Float            @default(20.0)
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  project    finance_projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deposits   deposits[]

  @@index([projectId])
  @@index([isActive])
  @@map("deposit_sources")
}

model deposits {
  id                  String          @id
  depositSourceId     String
  mammothId           String
  mammothLogin        String
  mammothCountry      String
  mammothPromo        String?
  token               String
  amount              Float
  amountUsd           Float
  commissionPercent   Float
  commissionAmount    Float
  commissionAmountUsd Float
  netAmount           Float
  netAmountUsd        Float
  workerPercent       Int
  domain              String
  txHash              String?
  processed           Boolean         @default(false)
  createdAt           DateTime        @default(now())
  depositSource       deposit_sources @relation(fields: [depositSourceId], references: [id], onDelete: Cascade)

  @@unique([id, depositSourceId])
  @@index([depositSourceId])
  @@index([mammothId])
  @@index([createdAt])
  @@index([processed])
  @@map("deposits")
}

model analytics {
  id        String   @id @default(uuid())
  userId    String
  action    String
  metadata  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("analytics")
}

model articles {
  id          String   @id @default(uuid())
  title       String
  content     String?
  slug        String   @unique
  category    String   @default("general")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([category])
  @@index([isPublished])
  @@map("articles")
}

model content_projects {
  id                     String                    @id @default(uuid())
  name                   String
  description            String?
  type                   String                    @default("documentation")
  isActive               Boolean                   @default(true)
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  documentationSections  documentation_sections[]
  permissions            project_permissions[]

  @@index([type])
  @@index([isActive])
  @@map("content_projects")
}

model project_permissions {
  id        String           @id @default(uuid())
  projectId String
  role      UserRole
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  project   content_projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, role])
  @@index([projectId])
  @@index([role])
  @@map("project_permissions")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  MEDIA_BUYER
  SUPPORT
  PROCESSOR
  ROP_PROCESSOR
  ROP_BUYER
  BUYER
  LEAD_BUYER
  FINANCE
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  EXCHANGE
}


enum SalaryRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum BonusType {
  DEPOSIT_BONUS
  PERIODIC_BONUS
  ACHIEVEMENT_BONUS
  MANUAL_BONUS
}

enum BonusStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  BURNED
  HELD
}

enum EarningsType {
  BASE_SALARY
  DEPOSIT_COMMISSION
  SHIFT_BONUS
  MONTHLY_BONUS
  ACHIEVEMENT_BONUS
  OVERTIME_BONUS
  MANUAL_ADJUSTMENT
}

enum ShiftType {
  MORNING
  DAY
  NIGHT
}

enum ShiftStatus {
  ACTIVE
  COMPLETED
  MISSED
}

enum PenaltyStatus {
  PENDING
  APPLIED
  CANCELLED
  APPEALED
}

enum PenaltyType {
  SHIFT_MISS
  LATE_ARRIVAL
  EARLY_DEPARTURE
  OTHER
}

enum MotivationType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Buyer система енумы
enum ProjectStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum DailyLogStatus {
  DRAFT
  SUBMITTED
  APPROVED
  LOCKED
}

enum RequestType {
  BUDGET
  CONSUMABLES
  ACCESS
  PAYOUT
  CUSTOM
}

enum RequestStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  FULFILLED
  CLOSED
  PAID
}

enum BonusSchemeType {
  FIFTY_FIFTY
  TIER_SYSTEM
  CUSTOM_FORMULA
}

enum SharedCostStatus {
  PLANNED
  ACTIVE
  ALLOCATED
  ARCHIVED
}

enum SignalType {
  ROAS_DROP
  ANOMALY
  MISSING_LOG
  OVERSPEND
  CUSTOM
}

enum SignalSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SignalStatus {
  ACTIVE
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

model processor_deposits {
  id                String        @id @default(uuid())
  processorId       String
  playerId          String
  playerNick        String?
  playerEmail       String?
  offerId           String?
  offerName         String?
  geo               String?
  amount            Float
  currency          String        @default("USD")
  currencyType      String        @default("FIAT")
  paymentMethod     String?
  leadSource        String?
  proofs            String?
  notes             String?
  moderatorId       String?
  moderatorComment  String?
  moderatedAt       DateTime?
  commissionRate              Float         @default(30.0)
  bonusRate                   Float         @default(5.0)
  bonusAmount                 Float         @default(0)
  platformCommissionPercent   Float         @default(0)
  platformCommissionAmount    Float         @default(0)
  processorEarnings           Float         @default(0)
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  processor         users         @relation(fields: [processorId], references: [id], onDelete: Cascade)
  earningsLog       salary_earnings_log[]

  @@index([processorId])
  @@index([playerId])
  @@index([createdAt])
  @@map("processor_deposits")
}

model salary_requests {
  id                String              @id @default(uuid())
  processorId       String
  periodStart       DateTime
  periodEnd         DateTime
  requestedAmount   Float
  calculatedAmount  Float?
  paymentDetails    String?
  comment           String?
  adminComment      String?
  status            SalaryRequestStatus @default(PENDING)
  processedAt       DateTime?
  paidAt            DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  processor         users               @relation(fields: [processorId], references: [id], onDelete: Cascade)
  earningsLog       salary_earnings_log[]
  requestLog        salary_request_log[]

  @@index([processorId])
  @@index([status])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("salary_requests")
}

model salary_earnings_log {
  id                  String        @id @default(uuid())
  processorId         String
  shiftId             String?
  depositId           String?
  salaryRequestId     String?
  type                EarningsType
  description         String
  amount              Float
  baseAmount          Float?
  percentage          Float?
  calculationDetails  String?
  metadata            String?
  period              DateTime?
  processedAt         DateTime?
  isIncludedInSalary  Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  processor           users                @relation("ProcessorEarningsLog", fields: [processorId], references: [id], onDelete: Cascade)
  shift               processor_shifts?    @relation(fields: [shiftId], references: [id], onDelete: SetNull)
  deposit             processor_deposits?  @relation(fields: [depositId], references: [id], onDelete: SetNull)
  salaryRequest       salary_requests?     @relation(fields: [salaryRequestId], references: [id], onDelete: SetNull)

  @@index([processorId])
  @@index([shiftId])
  @@index([type])
  @@index([period])
  @@index([processedAt])
  @@index([isIncludedInSalary])
  @@map("salary_earnings_log")
}

model salary_request_log {
  id               String    @id @default(uuid())
  salaryRequestId  String
  processorId      String
  action           String
  status           String
  details          String?
  amount           Float?
  adminId          String?
  ipAddress        String?
  userAgent        String?
  createdAt        DateTime  @default(now())

  salaryRequest    salary_requests  @relation(fields: [salaryRequestId], references: [id], onDelete: Cascade)
  processor        users           @relation("ProcessorRequestLog", fields: [processorId], references: [id], onDelete: Cascade)
  admin            users?          @relation("AdminRequestLog", fields: [adminId], references: [id], onDelete: SetNull)

  @@index([salaryRequestId])
  @@index([processorId])
  @@index([action])
  @@index([createdAt])
  @@map("salary_request_log")
}

model bonus_payments {
  id          String      @id @default(uuid())
  processorId String
  type        BonusType   @default(DEPOSIT_BONUS)
  description String?
  amount      Float
  depositId   String?
  period      DateTime?
  conditions  String?
  status      BonusStatus @default(PENDING)
  processedAt DateTime?
  paidAt      DateTime?
  burnReason  String?
  burnedAt    DateTime?
  holdUntil   DateTime?
  shiftType   ShiftType?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  processor   users       @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@index([processorId])
  @@index([type])
  @@index([status])
  @@index([period])
  @@index([shiftType])
  @@map("bonus_payments")
}

model bonus_settings {
  id                  String    @id @default(uuid())
  name                String
  description         String?
  baseCommissionRate  Float     @default(30.0)
  tiers               String
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("bonus_settings")
}

model processor_shifts {
  id             String      @id @default(uuid())
  processorId    String
  shiftType      ShiftType   @default(MORNING)
  shiftDate      DateTime
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  status         ShiftStatus @default(ACTIVE)
  notes          String?
  adminNotes     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  processor      users       @relation(fields: [processorId], references: [id], onDelete: Cascade)
  earningsLog    salary_earnings_log[]

  @@unique([processorId, shiftDate])
  @@index([processorId])
  @@index([shiftType])
  @@index([shiftDate])
  @@index([status])
  @@map("processor_shifts")
}

model shift_settings {
  id                     String                   @id @default(uuid())
  shiftType              ShiftType                @unique
  startHour              Int                      @default(6)
  startMinute            Int                      @default(0)
  endHour                Int                      @default(14)
  endMinute              Int                      @default(0)
  timezone               String                   @default("+3")
  isActive               Boolean                  @default(true)
  name                   String?
  description            String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  userShiftAssignments   user_shift_assignments[]

  @@map("shift_settings")
}

model shift_penalties {
  id           String        @id @default(uuid())
  processorId  String
  type         PenaltyType   @default(SHIFT_MISS)
  shiftType    ShiftType?
  shiftDate    DateTime
  amount       Float         @default(-50.0)
  reason       String?
  adminComment String?
  status       PenaltyStatus @default(APPLIED)
  appliedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  processor    users         @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@index([processorId])
  @@index([type])
  @@index([shiftDate])
  @@index([status])
  @@map("shift_penalties")
}

model salary_settings {
  id          String   @id @default(uuid())
  name        String
  description String?
  hourlyRate  Float    @default(2.0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("salary_settings")
}

model salary_deposit_grid {
  id                String   @id @default(uuid())
  salarySettingsId  String?
  minAmount         Float
  maxAmount         Float?
  percentage        Float
  description       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("salary_deposit_grid")
}

model salary_monthly_bonus {
  id           String   @id @default(uuid())
  name         String
  description  String?
  minAmount    Float
  bonusPercent Float
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("salary_monthly_bonus")
}

model user_shift_assignments {
  id             String         @id @default(uuid())
  userId         String
  shiftSettingId String
  assignedAt     DateTime       @default(now())
  assignedBy     String
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftSetting   shift_settings @relation(fields: [shiftSettingId], references: [id], onDelete: Cascade)
  assigner       users          @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: Restrict)

  @@unique([userId, shiftSettingId])
  @@index([userId])
  @@index([shiftSettingId])
  @@map("user_shift_assignments")
}

model bonus_grid {
  id              String     @id @default(uuid())
  minAmount       Float
  maxAmount       Float?
  bonusPercentage Float
  fixedBonus      Float?
  fixedBonusMin   Float?
  shiftType       ShiftType?
  description     String?
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("bonus_grid")
}

model bonus_motivations {
  id          String         @id @default(uuid())
  type        MotivationType
  name        String
  description String?
  value       Float
  conditions  String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("bonus_motivations")
}

model platform_commission {
  id                String   @id @default(uuid())
  name              String
  description       String?
  commissionPercent Float    @default(5.0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("platform_commission")
}

// === СИСТЕМА ПЛАНОВ/ЦЕЛЕЙ ===

model goal_types {
  id          String      @id @default(uuid())
  name        String
  description String?
  unit        String      // '$', 'шт', 'ч'
  type        String      // 'EARNINGS', 'DEPOSITS_COUNT', 'HOURS'
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Связи
  goals       user_goals[]

  @@map("goal_types")
}

model user_goals {
  id          String      @id @default(uuid())
  name        String
  description String?
  goalTypeId  String
  periodType  String      @default("DAILY") // 'DAILY', 'WEEKLY', 'MONTHLY'
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Связи
  goalType    goal_types  @relation(fields: [goalTypeId], references: [id], onDelete: Restrict)
  stages      goal_stages[]
  achievements user_goal_achievements[]

  @@map("user_goals")
}

model goal_stages {
  id          String      @id @default(uuid())
  goalId      String
  stage       Int         // 1, 2, 3, 4...
  targetValue Float       // Целевое значение
  rewardAmount Float      // Фиксированная награда в долларах
  title       String      // "Первый рубеж", "Профессионал"
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Связи
  goal        user_goals  @relation(fields: [goalId], references: [id], onDelete: Cascade)
  achievements user_goal_achievements[]

  @@unique([goalId, stage])
  @@map("goal_stages")
}

model user_goal_achievements {
  id           String      @id @default(uuid())
  userId       String
  goalId       String
  stageId      String
  achievedAt   DateTime    @default(now())
  achievedValue Float      // Достигнутое значение
  rewardAmount Float      // Полученная награда
  period       String     // Период достижения (2025-09-15 для дневных)
  isRewarded   Boolean    @default(false) // Выплачена ли награда
  rewardedAt   DateTime?
  createdAt    DateTime   @default(now())
  
  // Связи
  user         users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal         user_goals @relation(fields: [goalId], references: [id], onDelete: Cascade)
  stage        goal_stages @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([userId, stageId, period])
  @@map("user_goal_achievements")
}

// === BUYER СИСТЕМА ===

// Проекты байеров
model buyer_projects {
  id                 String            @id @default(uuid())
  name               String
  buyerId            String
  offer              String?           // Оффер/вертикаль
  geo                String?           // GEO
  trafficSource      String?           // Источник трафика
  attributionWindow  Int               @default(1)  // Окно атрибуции в днях
  attributionModel   String            @default("DATE_BASED")  // DATE_BASED, CLICK_BASED
  currency           String            @default("USD")
  status             ProjectStatus     @default(ACTIVE)
  stopConditions     String?           // JSON с условиями остановки
  isArchived         Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Связи
  buyer              users             @relation("BuyerProjects", fields: [buyerId], references: [id], onDelete: Cascade)
  dailyLogs          buyer_daily_logs[]
  requests           buyer_requests[]
  sharedCostAllocations shared_cost_allocations[]
  signals            buyer_signals[]

  @@index([buyerId])
  @@index([status])
  @@map("buyer_projects")
}

// Дневники байеров
model buyer_daily_logs {
  id             String            @id @default(uuid())
  buyerId        String
  projectId      String
  date           DateTime          // Дата, за которую записывается лог (T-1)
  spend          Float             @default(0)
  ftdCount       Int               @default(0)
  ftdAmount      Float             @default(0)
  redCount       Int               @default(0)
  redAmount      Float             @default(0)
  totalDeposits  Float             @default(0)
  averageCheck   Float             @default(0)
  registrations  Int               @default(0)
  clicks         Int               @default(0)
  notes          String?
  status         DailyLogStatus    @default(DRAFT)
  adminComment   String?
  moderatedAt    DateTime?
  moderatedBy    String?
  lockedAt       DateTime?
  lockedBy       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  buyer          users             @relation("BuyerDailyLogs", fields: [buyerId], references: [id], onDelete: Cascade)
  project        buyer_projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  moderator      users?            @relation("DailyLogModerator", fields: [moderatedBy], references: [id], onDelete: SetNull)
  locker         users?            @relation("DailyLogLocker", fields: [lockedBy], references: [id], onDelete: SetNull)

  @@unique([projectId, date])
  @@index([buyerId])
  @@index([projectId])
  @@index([date])
  @@index([status])
  @@map("buyer_daily_logs")
}

// Заявки байеров
model buyer_requests {
  id             String            @id @default(uuid())
  buyerId        String
  projectId      String?
  type           RequestType
  title          String
  description    String?
  amount         Float?
  deliveryMethod String?           // Способ выдачи (кошелёк, кабинет и т.п.)
  payoutPeriod   String?           // Период выплаты (1-15, 16-end)
  walletAddress  String?
  items          String?           // JSON со списком расходников
  status         RequestStatus     @default(DRAFT)
  adminComment   String?
  processedAt    DateTime?
  processedBy    String?
  fulfilledAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  buyer          users             @relation("BuyerRequests", fields: [buyerId], references: [id], onDelete: Cascade)
  project        buyer_projects?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  processor      users?            @relation("RequestProcessor", fields: [processedBy], references: [id], onDelete: SetNull)

  @@index([buyerId])
  @@index([projectId])
  @@index([type])
  @@index([status])
  @@map("buyer_requests")
}

// Схемы бонусов для байеров
model buyer_bonus_schemes {
  id             String            @id @default(uuid())
  name           String
  description    String?
  type           BonusSchemeType   // FIFTY_FIFTY, TIER_SYSTEM, CUSTOM_FORMULA
  percentage     Float?            // Для FIFTY_FIFTY
  tiers          String?           // JSON с тирами для TIER_SYSTEM
  formula        String?           // Кастомная формула
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  assignments    buyer_bonus_assignments[]

  @@map("buyer_bonus_schemes")
}

// Назначения схем бонусов байерам
model buyer_bonus_assignments {
  id             String            @id @default(uuid())
  buyerId        String
  schemeId       String
  startDate      DateTime          @default(now())
  endDate        DateTime?
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  buyer          users             @relation("BuyerBonusAssignments", fields: [buyerId], references: [id], onDelete: Cascade)
  scheme         buyer_bonus_schemes @relation(fields: [schemeId], references: [id], onDelete: Cascade)

  @@index([buyerId])
  @@index([schemeId])
  @@index([startDate])
  @@map("buyer_bonus_assignments")
}

// Общие расходы
model shared_costs {
  id             String            @id @default(uuid())
  name           String
  description    String?
  amount         Float
  costType       String            // Тип расходника (accounts, proxy, etc.)
  period         String            // Период действия
  isShared       Boolean           @default(true)
  allocationRule String            @default("BY_SPEND") // BY_SPEND, BY_REVENUE, EQUAL, MANUAL
  status         SharedCostStatus  @default(PLANNED)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  allocations    shared_cost_allocations[]

  @@index([status])
  @@index([costType])
  @@map("shared_costs")
}

// Аллокация общих расходов
model shared_cost_allocations {
  id             String            @id @default(uuid())
  sharedCostId   String
  projectId      String
  buyerId        String
  allocatedAmount Float
  percentage     Float             // Процент от общей суммы
  period         String            // Период аллокации
  calculatedAt   DateTime          @default(now())

  // Связи
  sharedCost     shared_costs      @relation(fields: [sharedCostId], references: [id], onDelete: Cascade)
  project        buyer_projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  buyer          users             @relation("SharedCostAllocations", fields: [buyerId], references: [id], onDelete: Cascade)

  @@unique([sharedCostId, projectId, period])
  @@index([buyerId])
  @@index([period])
  @@map("shared_cost_allocations")
}

// Каталог расходников
model consumable_catalog {
  id             String            @id @default(uuid())
  name           String
  category       String            // accounts, proxy, antidect, sim, domains, hosting, antiсaptcha, tracker, creative, voice, edit
  description    String?
  unit           String            @default("шт")   // шт, мес, год
  basePrice      Float?
  isShared       Boolean           @default(false)
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("consumable_catalog")
}

// Сигналы/алерты
model buyer_signals {
  id             String            @id @default(uuid())
  buyerId        String?
  projectId      String?
  type           SignalType
  title          String
  description    String
  severity       SignalSeverity    @default(MEDIUM)
  status         SignalStatus      @default(ACTIVE)
  metadata       String?           // JSON с дополнительными данными
  resolvedAt     DateTime?
  resolvedBy     String?
  adminComment   String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Связи
  buyer          users?            @relation("BuyerSignals", fields: [buyerId], references: [id], onDelete: SetNull)
  project        buyer_projects?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  resolver       users?            @relation("SignalResolver", fields: [resolvedBy], references: [id], onDelete: SetNull)

  @@index([buyerId])
  @@index([projectId])
  @@index([type])
  @@index([status])
  @@map("buyer_signals")
}
