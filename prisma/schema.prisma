// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  MEDIA_BUYER
  SUPPORT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleType {
  PAGE
  SECTION
}

enum AccountType {
  CASH
  WALLET
  BANK
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum FinanceParticipantRole {
  BUYER
  PROCESSOR
  OTHER
}

enum PayoutRuleRole {
  BUYER
  PROCESSOR
}

enum PayoutRuleMode {
  SHARE       // фиксированный процент
  TIER_SHARE  // лесенка (массив порогов)
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
}

enum FeedbackType {
  HELPFUL
  NOT_HELPFUL
  RATING
  SUGGESTION
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  password     String
  role         UserRole    @default(USER)
  status       UserStatus  @default(PENDING)
  isBlocked    Boolean     @default(false)
  apiKey       String?     @unique
  telegram     String?
  company      String?
  website      String?
  bio          String?
  avatar           String?
  lastLoginAt      DateTime?
  registrationCode String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  articles     Article[]
  comments     Comment[]
  analytics    Analytics[]
  financeTransactions FinanceTransaction[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  isWorkspace Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  articles    Article[]
  financeTransactions FinanceTransaction[]
  financePayoutRules  FinancePayoutRule[]

  @@map("categories")
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  content         String
  excerpt         String?
  status          ArticleStatus @default(DRAFT)
  type            ArticleType   @default(PAGE)
  parentId        String?
  categoryKey     String
  tags            String?       // JSON array
  metaTitle       String?
  metaDescription String?
  authorId        String
  orderIndex      Int           @default(0)
  viewCount       Int           @default(0)
  likeCount       Int           @default(0)
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  author          User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        Category      @relation(fields: [categoryKey], references: [key], onDelete: Restrict)
  comments        Comment[]
  feedbacks       Feedback[]
  parent          Article?      @relation("ArticleHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children        Article[]     @relation("ArticleHierarchy")

  @@map("articles")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  articleId String
  authorId  String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model ApiEndpoint {
  id          String     @id @default(cuid())
  name        String
  method      HttpMethod
  path        String
  description String
  parameters  String?    // JSON
  responses   String?    // JSON
  examples    String?    // JSON
  version     String     @default("v2")
  deprecated  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([method, path, version])
  @@map("api_endpoints")
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}

model Feedback {
  id        String       @id @default(cuid())
  type      FeedbackType
  message   String?
  rating    Int?         // 1-5 stars
  articleId String?
  userAgent String?
  ipAddress String?
  createdAt DateTime     @default(now())

  // Relations
  article   Article?     @relation(fields: [articleId], references: [id], onDelete: SetNull)

  @@map("feedbacks")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  results   Int      @default(0)
  userId    String?
  createdAt DateTime @default(now())

  @@map("search_queries")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  data      String?  // JSON
  userId    String?
  sessionId String?
  userAgent String?
  ipAddress String?
  referer   String?
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics")
}

// Finance domain
model FinanceAccount {
  id        String      @id @default(cuid())
  name      String
  type      AccountType @default(OTHER)
  currency  String      // ISO-4217, напр. RUB, USD, EUR
  balance   Decimal     @default(0)
  isArchived Boolean    @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  transactions FinanceTransaction[]

  @@map("finance_accounts")
}

model FinanceTransaction {
  id          String           @id @default(cuid())
  accountId   String
  type        TransactionType  @default(EXPENSE)
  amount      Decimal          // знак всегда положительный; направление задаёт type
  description String?
  occurredAt  DateTime         @default(now())
  projectKey  String?
  projectId   String?
  userId      String?
  role        FinanceParticipantRole?
  categoryId  String?

  // Optional link for transfer
  relatedId   String?

  // Relations
  account     FinanceAccount   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  project     Category?        @relation(fields: [projectKey], references: [key], onDelete: SetNull)
  financeProject FinanceProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  user        User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  category    FinanceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([occurredAt])
  @@index([type])
  @@map("finance_transactions")
}

model FinanceCategory {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  kind      TransactionType // INCOME/EXPENSE
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions FinanceTransaction[]

  @@map("finance_categories")
}

model FinancePayoutRule {
  id          String          @id @default(cuid())
  projectKey  String?
  projectId   String?
  role        PayoutRuleRole
  mode        PayoutRuleMode  @default(SHARE)
  percent     Decimal?        // для SHARE
  tiers       String?         // JSON: [{threshold:number, percent:number}]
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  project     Category?       @relation(fields: [projectKey], references: [key], onDelete: SetNull)
  financeProject FinanceProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("finance_payout_rules")
}

model FinanceProject {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions FinanceTransaction[]
  payoutRules  FinancePayoutRule[]

  @@map("finance_projects")
}
