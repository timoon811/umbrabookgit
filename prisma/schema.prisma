generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String
  password           String
  telegram           String               @unique
  role               UserRole             @default(USER)
  status             UserStatus           @default(PENDING)
  isBlocked          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  assignedBuyerId    String?
  analytics          analytics[]
  bonusPayments      bonus_payments[]
  processorDeposits  processor_deposits[]
  salaryRequests     salary_requests[]
  assignedBuyer      users?               @relation("BuyerProcessors", fields: [assignedBuyerId], references: [id])
  assignedProcessors users[]              @relation("BuyerProcessors")

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([telegram])
  @@index([assignedBuyerId])
  @@map("users")
}

model courses {
  id          String            @id @default(cuid())
  title       String
  description String?
  slug        String            @unique
  category    String            @default("general")
  level       String            @default("beginner")
  isPublished Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  sections    course_sections[]

  @@index([slug])
  @@index([isPublished])
  @@index([category])
  @@map("courses")
}

model course_sections {
  id          String         @id @default(uuid())
  title       String
  description String?
  order       Int            @default(0)
  isPublished Boolean        @default(false)
  courseId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  pages       course_pages[]
  course      courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_sections")
}

model course_pages {
  id          String          @id @default(uuid())
  title       String
  content     String?
  blocks      String?
  order       Int             @default(0)
  isPublished Boolean         @default(false)
  sectionId   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  section     course_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("course_pages")
}

model documentation_sections {
  id          String          @id @default(uuid())
  name        String
  key         String          @unique
  description String?
  order       Int             @default(0)
  isVisible   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  pages       documentation[]

  @@map("documentation_sections")
}

model documentation {
  id          String                 @id @default(uuid())
  title       String
  description String?
  slug        String                 @unique
  content     String?
  blocks      String?
  sectionId   String
  order       Int                    @default(0)
  isPublished Boolean                @default(false)
  parentId    String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  parent      documentation?         @relation("DocumentationHierarchy", fields: [parentId], references: [id])
  children    documentation[]        @relation("DocumentationHierarchy")
  section     documentation_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("documentation")
}

model finance_accounts {
  id               String                 @id @default(uuid())
  name             String
  type             String                 @default("OTHER")
  currency         String                 @default("USD")
  balance          Float                  @default(0)
  commission       Float                  @default(0)
  cryptocurrencies String?
  isArchived       Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  transactions     finance_transactions[]

  @@map("finance_accounts")
}

model finance_counterparties {
  id           String                 @id @default(uuid())
  name         String
  type         String                 @default("CLIENT")
  email        String?
  phone        String?
  address      String?
  taxNumber    String?
  bankDetails  String?
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]

  @@map("finance_counterparties")
}

model finance_categories {
  id           String                 @id @default(uuid())
  name         String
  type         String                 @default("EXPENSE")
  description  String?
  color        String                 @default("#3B82F6")
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]

  @@map("finance_categories")
}

model finance_projects {
  id             String                 @id @default(cuid())
  name           String
  description    String?
  status         String                 @default("ACTIVE")
  startDate      DateTime?
  endDate        DateTime?
  budget         Float?
  isArchived     Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  depositSources deposit_sources[]
  transactions   finance_transactions[]

  @@map("finance_projects")
}

model finance_transactions {
  id                String                  @id @default(uuid())
  accountId         String
  counterpartyId    String?
  categoryId        String?
  projectId         String?
  projectKey        String?
  type              TransactionType
  amount            Float
  commissionPercent Float                   @default(0)
  commissionAmount  Float                   @default(0)
  netAmount         Float
  originalAmount    Float
  description       String?
  date              DateTime                @default(now())
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  account           finance_accounts        @relation(fields: [accountId], references: [id])
  category          finance_categories?     @relation(fields: [categoryId], references: [id])
  counterparty      finance_counterparties? @relation(fields: [counterpartyId], references: [id])
  project           finance_projects?       @relation(fields: [projectId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([projectId])
  @@index([projectKey])
  @@index([date])
  @@index([type])
  @@map("finance_transactions")
}

model deposit_sources {
  id         String           @id @default(cuid())
  name       String
  token      String
  projectId  String
  commission Float            @default(20.0)
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  project    finance_projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deposits   deposits[]

  @@index([projectId])
  @@index([isActive])
  @@map("deposit_sources")
}

model deposits {
  id                  String          @id
  depositSourceId     String
  mammothId           String
  mammothLogin        String
  mammothCountry      String
  mammothPromo        String?
  token               String
  amount              Float
  amountUsd           Float
  commissionPercent   Float
  commissionAmount    Float
  commissionAmountUsd Float
  netAmount           Float
  netAmountUsd        Float
  workerPercent       Int
  domain              String
  txHash              String?
  processed           Boolean         @default(false)
  createdAt           DateTime        @default(now())
  depositSource       deposit_sources @relation(fields: [depositSourceId], references: [id], onDelete: Cascade)

  @@unique([id, depositSourceId])
  @@index([depositSourceId])
  @@index([mammothId])
  @@index([createdAt])
  @@index([processed])
  @@map("deposits")
}

model analytics {
  id        String   @id @default(uuid())
  userId    String
  action    String
  metadata  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("analytics")
}

model articles {
  id          String   @id @default(uuid())
  title       String
  content     String?
  slug        String   @unique
  category    String   @default("general")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([category])
  @@index([isPublished])
  @@map("articles")
}

model processor_deposits {
  id               String        @id @default(uuid())
  processorId      String
  playerId         String
  playerNick       String?
  playerEmail      String?       // Email депозитера
  offerId          String?
  offerName        String?
  geo              String?
  amount           Float
  currency         String        @default("USD")    // Для криптовалют: BTC, ETH, USDT, etc.
  currencyType     String        @default("FIAT")   // FIAT или CRYPTO
  paymentMethod    String?
  leadSource       String?
  proofs           String?
  notes            String?
  status           DepositStatus @default(PENDING)
  moderatorId      String?
  moderatorComment String?
  moderatedAt      DateTime?
  commissionRate   Float         @default(30.0)
  bonusRate        Float         @default(5.0)
  bonusAmount      Float         @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  processor        users         @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@index([processorId])
  @@index([playerId])
  @@index([status])
  @@index([createdAt])
  @@index([currency])
  @@index([currencyType])
  @@index([playerEmail])
  @@map("processor_deposits")
}

model salary_requests {
  id               String              @id @default(uuid())
  processorId      String
  periodStart      DateTime
  periodEnd        DateTime
  requestedAmount  Float
  calculatedAmount Float?
  paymentDetails   String?
  comment          String?
  adminComment     String?
  status           SalaryRequestStatus @default(PENDING)
  processedAt      DateTime?
  paidAt           DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  processor        users               @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@index([processorId])
  @@index([status])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("salary_requests")
}

model bonus_payments {
  id          String      @id @default(uuid())
  processorId String
  type        BonusType   @default(DEPOSIT_BONUS)
  description String?
  amount      Float
  depositId   String?
  period      DateTime?
  conditions  String?
  status      BonusStatus @default(PENDING)
  processedAt DateTime?
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  processor   users       @relation(fields: [processorId], references: [id], onDelete: Cascade)

  @@index([processorId])
  @@index([type])
  @@index([status])
  @@index([period])
  @@map("bonus_payments")
}

model bonus_settings {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  baseCommissionRate Float    @default(30.0)
  baseBonusRate      Float    @default(5.0)
  tiers              String
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("bonus_settings")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  MEDIA_BUYER
  SUPPORT
  PROCESSOR
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum DepositStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

enum SalaryRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum BonusType {
  DEPOSIT_BONUS
  PERIODIC_BONUS
  ACHIEVEMENT_BONUS
  MANUAL_BONUS
}

enum BonusStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}
