generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String
  password  String
  role      UserRole    @default(USER)
  status    UserStatus  @default(PENDING)
  telegram  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  analytics analytics[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([telegram])
}

model courses {
  id          String            @id @default(cuid())
  title       String
  description String?
  slug        String            @unique
  category    String            @default("general")
  level       String            @default("beginner")
  isPublished Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  sections    course_sections[]

  @@index([slug])
  @@index([isPublished])
  @@index([category])
}

model course_sections {
  id          String         @id @default(cuid())
  title       String
  description String?
  order       Int            @default(0)
  isPublished Boolean        @default(false)
  courseId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  pages       course_pages[]
  course      courses        @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model course_pages {
  id          String          @id @default(cuid())
  title       String
  content     String?
  blocks      String?
  order       Int             @default(0)
  isPublished Boolean         @default(false)
  sectionId   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  section     course_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model documentation_sections {
  id          String          @id @default(cuid())
  name        String
  key         String          @unique

  description String?
  order       Int             @default(0)
  isVisible   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  pages       documentation[]
}

model documentation {
  id          String                 @id @default(cuid())
  title       String
  description String?
  slug        String                 @unique
  content     String?
  blocks      String?
  sectionId   String
  order       Int                    @default(0)
  isPublished Boolean                @default(false)
  parentId    String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  section     documentation_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  parent      documentation?         @relation("DocumentationHierarchy", fields: [parentId], references: [id])
  children    documentation[]        @relation("DocumentationHierarchy")
}

model finance_accounts {
  id               String                 @id @default(cuid())
  name             String
  type             String                 @default("OTHER")
  currency         String                 @default("USD")
  balance          Float                  @default(0)
  commission       Float                  @default(0)
  cryptocurrencies String?
  isArchived       Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  transactions     finance_transactions[]
}

model finance_counterparties {
  id           String                 @id @default(cuid())
  name         String
  type         String                 @default("CLIENT")
  email        String?
  phone        String?
  address      String?
  taxNumber    String?
  bankDetails  String?
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]
}

model finance_categories {
  id           String                 @id @default(cuid())
  name         String
  type         String                 @default("EXPENSE")
  description  String?
  color        String                 @default("#3B82F6")
  isArchived   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions finance_transactions[]
}

model finance_projects {
  id             String                 @id @default(cuid())
  name           String
  description    String?
  status         String                 @default("ACTIVE")
  startDate      DateTime?
  endDate        DateTime?
  budget         Float?
  isArchived     Boolean                @default(false)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  depositSources deposit_sources[]
  transactions   finance_transactions[]
}

model finance_transactions {
  id                String                  @id @default(cuid())
  accountId         String
  counterpartyId    String?
  categoryId        String?
  projectId         String?
  projectKey        String?
  type              TransactionType
  amount            Float
  commissionPercent Float                   @default(0)
  commissionAmount  Float                   @default(0)
  netAmount         Float
  originalAmount    Float
  description       String?
  date              DateTime                @default(now())
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  project           finance_projects?       @relation(fields: [projectId], references: [id])
  category          finance_categories?     @relation(fields: [categoryId], references: [id])
  counterparty      finance_counterparties? @relation(fields: [counterpartyId], references: [id])
  account           finance_accounts        @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([projectId])
  @@index([projectKey])
  @@index([date])
  @@index([type])
}

model deposit_sources {
  id         String           @id @default(cuid())
  name       String
  token      String
  projectId  String
  commission Float            @default(20.0)
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  project    finance_projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deposits   deposits[]

  @@index([projectId])
  @@index([isActive])
}

model deposits {
  id                  String          @id
  depositSourceId     String
  mammothId           String
  mammothLogin        String
  mammothCountry      String
  mammothPromo        String?
  token               String
  amount              Float
  amountUsd           Float
  commissionPercent   Float
  commissionAmount    Float
  commissionAmountUsd Float
  netAmount           Float
  netAmountUsd        Float
  workerPercent       Int
  domain              String
  txHash              String?
  processed           Boolean         @default(false)
  createdAt           DateTime        @default(now())
  depositSource       deposit_sources @relation(fields: [depositSourceId], references: [id], onDelete: Cascade)

  @@unique([id, depositSourceId])
  @@index([depositSourceId])
  @@index([mammothId])
  @@index([createdAt])
  @@index([processed])
}

model analytics {
  id        String   @id @default(cuid())
  userId    String
  action    String
  metadata  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model articles {
  id          String   @id @default(cuid())
  title       String
  content     String?
  slug        String   @unique
  category    String   @default("general")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([category])
  @@index([isPublished])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  MEDIA_BUYER
  SUPPORT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}
