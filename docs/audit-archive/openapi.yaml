openapi: 3.0.3
info:
  title: UmbraPL API
  description: API для платформы управления пользователями и процессорами UmbraPL
  version: 1.0.0
  contact:
    name: UmbraPL Team
    email: admin@umbra-platform.dev
  license:
    name: Private
    
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://umbra-platform.onrender.com/api
    description: Production server

security:
  - BearerAuth: []
  - CookieAuth: []

paths:
  # Authentication
  /auth/login:
    post:
      tags: [Authentication]
      summary: Вход в систему
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/register:
    post:
      tags: [Authentication]  
      summary: Регистрация пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь зарегистрирован
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/me:
    get:
      tags: [Authentication]
      summary: Получить информацию о текущем пользователе
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/verify:
    post:
      tags: [Authentication]
      summary: Проверка токена
      security: []
      responses:
        '200':
          description: Результат проверки токена

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Выход из системы
      responses:
        '200':
          description: Успешный выход

  # Health & System
  /health:
    get:
      tags: [System]
      summary: Проверка здоровья системы
      security: []
      parameters:
        - name: quick
          in: query
          schema:
            type: boolean
            default: false
          description: Быстрая проверка
      responses:
        '200':
          description: Система работает
        '503':
          description: Проблемы с системой

  /seed:
    get:
      tags: [System]
      summary: Инициализация данных (НЕ БЕЗОПАСНО)
      security: []
      responses:
        '200':
          description: Данные созданы

  # Admin APIs
  /admin/users:
    get:
      tags: [Admin]
      summary: Получить список пользователей
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список пользователей
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{id}:
    get:
      tags: [Admin]
      summary: Получить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Информация о пользователе
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/processing/stats:
    get:
      tags: [Admin, Processing]
      summary: Статистика обработки
      responses:
        '200':
          description: Статистика

  # Manager APIs  
  /manager/stats:
    get:
      tags: [Manager]
      summary: Статистика менеджера
      responses:
        '200':
          description: Статистика менеджера

  /manager/deposits:
    get:
      tags: [Manager]
      summary: Список депозитов менеджера
      responses:
        '200':
          description: Список депозитов
    post:
      tags: [Manager]
      summary: Создать депозит
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '201':
          description: Депозит создан

  /manager/shifts:
    get:
      tags: [Manager]
      summary: Смены менеджера
      responses:
        '200':
          description: Список смен
    post:
      tags: [Manager]
      summary: Создать смену
      responses:
        '201':
          description: Смена создана

  # Documentation
  /documentation:
    get:
      tags: [Documentation]
      summary: Получить документацию
      responses:
        '200':
          description: Список документов

  /documentation/{slug}:
    get:
      tags: [Documentation]
      summary: Получить документ по slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Документ найден
        '404':
          $ref: '#/components/responses/NotFound'

  # File Uploads
  /uploads/{path}:
    get:
      tags: [Files]
      summary: Получить загруженный файл
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Файл найден
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CookieAuth:
      type: apiKey
      in: cookie
      name: auth-token

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: admin@umbra-platform.dev
        password:
          type: string
          minLength: 6
          example: umbra2024

    RegisterRequest:
      type: object
      required: [name, email, telegram, password]
      properties:
        name:
          type: string
          minLength: 2
          example: Иван Иванов
        email:
          type: string
          format: email
          example: user@example.com
        telegram:
          type: string
          example: "@username"
        password:
          type: string
          minLength: 6

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
        isBlocked:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
        - MODERATOR
        - MEDIA_BUYER
        - SUPPORT
        - PROCESSOR
        - ROP_PROCESSOR
        - ROP_BUYER
        - BUYER
        - LEAD_BUYER
        - FINANCE

    UserStatus:
      type: string
      enum:
        - PENDING
        - APPROVED
        - REJECTED

    DepositRequest:
      type: object
      required: [playerId, amount]
      properties:
        playerId:
          type: string
        playerNick:
          type: string
        playerEmail:
          type: string
        amount:
          type: number
          minimum: 0
        currency:
          type: string
          default: USD
        paymentMethod:
          type: string
        proofs:
          type: string
        notes:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties: true

  responses:
    BadRequest:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Требуется авторизация
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Конфликт данных
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: Admin
    description: Административные функции
  - name: Manager
    description: Функции менеджера/процессора
  - name: Documentation
    description: Работа с документацией
  - name: Files
    description: Загрузка и получение файлов
  - name: System
    description: Системные функции
