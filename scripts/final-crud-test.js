const fetch = require('node-fetch');

async function finalCRUDTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ CRUD –ß–ï–†–ï–ó –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°\n');
  
  const authToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI";

  console.log('üìã –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–ù–£–°–ù–û–ô –°–ï–¢–ö–ò:');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const currentResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
    method: 'GET',
    headers: { 'Cookie': `auth-token=${authToken}` }
  });
  
  const currentData = await currentResponse.json();
  
  if (currentData.bonusGrids) {
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${currentData.bonusGrids.length}`);
    currentData.bonusGrids.forEach((grid, index) => {
      console.log(`   ${index + 1}. $${grid.minAmount}-${grid.maxAmount || '‚àû'} ‚Üí ${grid.bonusPercentage}%`);
    });
  }

  console.log('\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–ü–ò–°–ò –ß–ï–†–ï–ó –í–ï–ë API:');
  
  const testRecord = {
    type: "bonusGrid",
    settings: {
      minAmount: 15000,
      maxAmount: null,
      bonusPercentage: 6.0,
      description: "VIP —É—Ä–æ–≤–µ–Ω—å $15000+ ‚Üí 6%"
    }
  };

  const createResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Cookie': `auth-token=${authToken}`
    },
    body: JSON.stringify(testRecord)
  });

  const createData = await createResponse.json();
  
  if (createResponse.ok) {
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å:`);
    console.log(`   ID: ${createData.id}`);
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: $${createData.minAmount}-${createData.maxAmount || '‚àû'}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç: ${createData.bonusPercentage}%`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${createData.description}`);
    
    console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò:');
    console.log(`   üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/admin/management`);
    console.log(`   üìç –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏"`);
    console.log(`   üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    
    console.log('\n‚è±Ô∏è –û–∂–∏–¥–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    console.log('\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–ü–ò–°–ò:');
    
    const deleteResponse = await fetch(`http://localhost:3000/api/admin/bonus-settings?type=bonusGrid&id=${createData.id}`, {
      method: 'DELETE',
      headers: { 'Cookie': `auth-token=${authToken}` }
    });
    
    if (deleteResponse.ok) {
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏`);
    }
    
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createData.error}`);
  }

  console.log('\nüìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
  
  const finalResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
    method: 'GET',
    headers: { 'Cookie': `auth-token=${authToken}` }
  });
  
  const finalData = await finalResponse.json();
  
  if (finalData.bonusGrids) {
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${finalData.bonusGrids.length}`);
    if (finalData.bonusGrids.length === 6) {
      console.log(`   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)`);
    }
  }

  console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
  console.log('\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin/management');
  console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏"');
  console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
  console.log('      ‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å');
  console.log('      ‚Ä¢ ‚úèÔ∏è  –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é');
  console.log('      ‚Ä¢ üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å');
  console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:');
  console.log('      ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è');
  console.log('      ‚Ä¢ –ú–∏–Ω–∏–º—É–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞');
  console.log('      ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100%');
}

finalCRUDTest();
