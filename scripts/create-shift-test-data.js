#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω...');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const processors = await prisma.users.findMany({
      where: {
        role: 'PROCESSOR'
      }
    });

    const admins = await prisma.users.findMany({
      where: {
        role: 'ADMIN'
      }
    });

    if (processors.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
      
      const testProcessor = await prisma.users.create({
        data: {
          email: 'test-processor@example.com',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
          password: '$2b$10$GRLDkbKb5F1fCaR3mF1FKO.SdvHJyF3jrKGUIU1vGJBOEGOBmfKS2', // password123
          telegram: '@test_processor',
          role: 'PROCESSOR',
          status: 'APPROVED'
        }
      });
      
      processors.push(testProcessor);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω:', testProcessor.email);
    }

    if (admins.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      
      const testAdmin = await prisma.users.create({
        data: {
          email: 'test-admin@example.com',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          password: '$2b$10$GRLDkbKb5F1fCaR3mF1FKO.SdvHJyF3jrKGUIU1vGJBOEGOBmfKS2', // password123
          telegram: '@test_admin',
          role: 'ADMIN',
          status: 'APPROVED'
        }
      });
      
      admins.push(testAdmin);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', testAdmin.email);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const existingShiftSettings = await prisma.shift_settings.findMany();
    
    if (existingShiftSettings.length === 0) {
      console.log('üïê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω...');
      
      const shiftSettings = await prisma.shift_settings.createMany({
        data: [
          {
            shiftType: 'MORNING',
            startHour: 6,
            startMinute: 0,
            endHour: 14,
            endMinute: 0,
            timezone: '+3',
            isActive: true,
            name: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞',
            description: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ —Å 06:00 –¥–æ 14:00'
          },
          {
            shiftType: 'DAY',
            startHour: 14,
            startMinute: 0,
            endHour: 22,
            endMinute: 0,
            timezone: '+3',
            isActive: true,
            name: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞',
            description: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å 14:00 –¥–æ 22:00'
          },
          {
            shiftType: 'NIGHT',
            startHour: 22,
            startMinute: 0,
            endHour: 6,
            endMinute: 0,
            timezone: '+3',
            isActive: true,
            name: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞',
            description: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ —Å 22:00 –¥–æ 06:00'
          }
        ]
      });
      
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω
    const allShiftSettings = await prisma.shift_settings.findMany();

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º
    console.log('üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º...');
    
    for (const processor of processors) {
      for (const shiftSetting of allShiftSettings) {
        const existingAssignment = await prisma.user_shift_assignments.findUnique({
          where: {
            userId_shiftSettingId: {
              userId: processor.id,
              shiftSettingId: shiftSetting.id
            }
          }
        });

        if (!existingAssignment) {
          await prisma.user_shift_assignments.create({
            data: {
              userId: processor.id,
              shiftSettingId: shiftSetting.id,
              assignedBy: admins[0]?.id || processor.id,
              isActive: true
            }
          });
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω...');
    
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const twoDaysAgo = new Date(today);
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

    const testShifts = [];

    for (const processor of processors.slice(0, 2)) { // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
      // –í—á–µ—Ä–∞—à–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞
      const completedShift = {
        processorId: processor.id,
        shiftType: 'MORNING',
        shiftDate: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 6, 0, 0),
        scheduledStart: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 6, 0, 0),
        scheduledEnd: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 14, 0, 0),
        actualStart: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 6, 5, 0),
        actualEnd: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 14, 2, 0),
        status: 'COMPLETED',
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞'
      };

      // –ü–æ–∑–∞–≤—á–µ—Ä–∞—à–Ω—è—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞
      const missedShift = {
        processorId: processor.id,
        shiftType: 'DAY',
        shiftDate: new Date(twoDaysAgo.getFullYear(), twoDaysAgo.getMonth(), twoDaysAgo.getDate(), 14, 0, 0),
        scheduledStart: new Date(twoDaysAgo.getFullYear(), twoDaysAgo.getMonth(), twoDaysAgo.getDate(), 14, 0, 0),
        scheduledEnd: new Date(twoDaysAgo.getFullYear(), twoDaysAgo.getMonth(), twoDaysAgo.getDate(), 22, 0, 0),
        status: 'MISSED',
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞'
      };

      testShifts.push(completedShift, missedShift);
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã
    await prisma.processor_shifts.deleteMany({
      where: {
        notes: {
          contains: '–¢–µ—Å—Ç–æ–≤–∞—è'
        }
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã
    await prisma.processor_shifts.createMany({
      data: testShifts
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ analytics
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π...');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    await prisma.analytics.deleteMany({
      where: {
        action: {
          startsWith: 'SHIFT_'
        },
        metadata: {
          contains: '–¢–µ—Å—Ç–æ–≤—ã–π'
        }
      }
    });

    const testLogs = [];

    for (const processor of processors.slice(0, 2)) {
      // –õ–æ–≥–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã –∑–∞ –≤—á–µ—Ä–∞
      testLogs.push({
        userId: processor.id,
        action: 'SHIFT_SHIFT_START',
        metadata: JSON.stringify({
          action: 'SHIFT_START',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π: –ù–∞—á–∞–ª —É—Ç—Ä–µ–Ω–Ω—é—é —Å–º–µ–Ω—É',
          shiftType: 'MORNING'
        }),
        ip: '127.0.0.1',
        userAgent: 'Test Agent',
        createdAt: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 6, 5, 0)
      });

      testLogs.push({
        userId: processor.id,
        action: 'SHIFT_SHIFT_END',
        metadata: JSON.stringify({
          action: 'SHIFT_END',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π: –ó–∞–≤–µ—Ä—à–∏–ª —É—Ç—Ä–µ–Ω–Ω—é—é —Å–º–µ–Ω—É (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 477 –º–∏–Ω)',
          shiftType: 'MORNING',
          duration: 477 * 60 * 1000,
          autoEnded: false
        }),
        ip: '127.0.0.1',
        userAgent: 'Test Agent',
        createdAt: new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 14, 2, 0)
      });

      // –õ–æ–≥ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –ø–æ–∑–∞–≤—á–µ—Ä–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞)
      testLogs.push({
        userId: processor.id,
        action: 'SHIFT_SHIFT_START',
        metadata: JSON.stringify({
          action: 'SHIFT_START',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π: –ù–∞—á–∞–ª –¥–Ω–µ–≤–Ω—É—é —Å–º–µ–Ω—É',
          shiftType: 'DAY'
        }),
        ip: '127.0.0.1',
        userAgent: 'Test Agent',
        createdAt: new Date(twoDaysAgo.getFullYear(), twoDaysAgo.getMonth(), twoDaysAgo.getDate(), 14, 15, 0)
      });
    }

    await prisma.analytics.createMany({
      data: testLogs
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–∑–¥–∞–Ω—ã');

    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`üë• –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ${processors.length}`);
    console.log(`üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω: ${testShifts.length}`);
    console.log(`üìù –°–æ–∑–¥–∞–Ω–æ –ª–æ–≥–æ–≤: ${testLogs.length}`);
    
    console.log('\nüéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (/processing) –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π" - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
    console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (/admin/processing) –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–∞–± "–°–º–µ–Ω—ã" -> "–õ–æ–≥–∏ —Å–º–µ–Ω" - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –ª–æ–≥–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
    
    console.log('\nüìß –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:');
    for (const processor of processors) {
      console.log(`   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${processor.email} (–ø–∞—Ä–æ–ª—å: password123)`);
    }
    for (const admin of admins) {
      console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.email} (–ø–∞—Ä–æ–ª—å: password123)`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  createTestData();
}

module.exports = { createTestData };
