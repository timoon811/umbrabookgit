#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

require('dotenv').config({ path: '.env.local' });

const prisma = new PrismaClient();

async function closeHangingShifts() {
  try {
    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ó–ê–í–ò–°–®–ò–• –°–ú–ï–ù');
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫: ${new Date().toISOString()}\n`);

    const now = new Date();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
    const hangingShifts = await prisma.processor_shifts.findMany({
      where: {
        status: 'ACTIVE',
        scheduledEnd: {
          lt: new Date(now.getTime() - 5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
        }
      },
      include: {
        processor: {
          select: {
            name: true,
            email: true,
            telegram: true
          }
        }
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${hangingShifts.length} –∑–∞–≤–∏—Å—à–∏—Ö —Å–º–µ–Ω`);

    if (hangingShifts.length === 0) {
      console.log('‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    let successCount = 0;
    let errorCount = 0;

    for (const shift of hangingShifts) {
      try {
        const timeSinceEnd = now.getTime() - new Date(shift.scheduledEnd).getTime();
        const minutesSinceEnd = Math.floor(timeSinceEnd / (1000 * 60));
        
        // –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const autoEndTime = new Date(shift.scheduledEnd.getTime() + 30 * 60 * 1000);
        
        console.log(`üìã –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É ${shift.id}:`);
        console.log(`   üë§ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${shift.processor.name} (${shift.processor.email})`);
        console.log(`   ‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ${minutesSinceEnd} –º–∏–Ω—É—Ç`);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
        const closedShift = await prisma.processor_shifts.update({
          where: { id: shift.id },
          data: {
            actualEnd: autoEndTime,
            status: 'COMPLETED',
            notes: (shift.notes || '') + ` [–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ —Å–∫—Ä–∏–ø—Ç–æ–º ${new Date().toISOString()}]`,
            adminNotes: `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ —Å–∫—Ä–∏–ø—Ç–æ–º - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ${minutesSinceEnd} –º–∏–Ω—É—Ç`
          }
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞ —Å–º–µ–Ω–∞
        if (shift.actualStart) {
          const durationMs = autoEndTime.getTime() - new Date(shift.actualStart).getTime();
          const durationHours = durationMs / (1000 * 60 * 60);
          
          if (durationHours > 0 && durationHours <= 24) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
            const salarySettings = await prisma.salary_settings.findFirst({
              where: { isActive: true },
              orderBy: { createdAt: 'desc' }
            });

            const hourlyRate = salarySettings?.hourlyRate || 2.0;
            const hourlyPayment = durationHours * hourlyRate;

            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
            await prisma.salary_earnings_log.create({
              data: {
                processorId: shift.processorId,
                shiftId: shift.id,
                type: 'BASE_SALARY',
                description: `–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã ${shift.shiftType} (${durationHours.toFixed(2)}—á √ó $${hourlyRate})`,
                amount: hourlyPayment,
                baseAmount: hourlyPayment,
                calculationDetails: JSON.stringify({
                  hours: durationHours,
                  hourlyRate: hourlyRate,
                  shiftType: shift.shiftType,
                  forceClosed: true,
                  closedBy: 'script'
                })
              }
            });

            console.log(`   üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ $${hourlyPayment.toFixed(2)} –∑–∞ ${durationHours.toFixed(2)} —á–∞—Å–æ–≤`);
          }
        }

        successCount++;
        console.log(`   ‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞\n`);

      } catch (error) {
        errorCount++;
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã ${shift.id}:`, error.message);
      }
    }

    console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: ${successCount} —Å–º–µ–Ω`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Å–º–µ–Ω`);
    console.log(`   ‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toISOString()}`);

    if (successCount > 0) {
      console.log(`\nüéâ –ó–∞–≤–∏—Å—à–∏–µ —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã!`);
      console.log(`üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤—å—Ç–µ –≤ cron:`);
      console.log(`   */10 * * * * curl -X POST http://localhost:3000/api/cron/auto-close-shifts`);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

closeHangingShifts();
