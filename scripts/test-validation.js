#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const { validateSchema, registerSchema } = require('../src/lib/zod-schemas.ts');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n');

const testCases = [
  {
    name: "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    data: {
      name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
      email: "ivan@example.com",
      telegram: "@ivan123",
      password: "password123",
      confirmPassword: "password123"
    },
    shouldPass: true
  },
  {
    name: "–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å (—Ä–∞–Ω—å—à–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª)",
    data: {
      name: "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
      email: "test@example.com", 
      telegram: "@test",
      password: "simple",
      confirmPassword: "simple"
    },
    shouldPass: true
  },
  {
    name: "Telegram –±–µ–∑ @",
    data: {
      name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      email: "user@example.com",
      telegram: "username",
      password: "password",
      confirmPassword: "password"
    },
    shouldPass: true
  },
  {
    name: "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å",
    data: {
      name: "–¢–µ—Å—Ç",
      email: "test@example.com",
      telegram: "@test",
      password: "123",
      confirmPassword: "123"
    },
    shouldPass: false
  },
  {
    name: "–ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –ø–∞—Ä–æ–ª–∏",
    data: {
      name: "–¢–µ—Å—Ç",
      email: "test@example.com",
      telegram: "@test", 
      password: "password1",
      confirmPassword: "password2"
    },
    shouldPass: false
  }
];

testCases.forEach((testCase, index) => {
  console.log(`${index + 1}. ${testCase.name}:`);
  
  try {
    const result = validateSchema(registerSchema, testCase.data);
    
    if (result.success && testCase.shouldPass) {
      console.log('   ‚úÖ –ü–†–û–®–Å–õ (–æ–∂–∏–¥–∞–ª–æ—Å—å)');
    } else if (!result.success && !testCase.shouldPass) {
      console.log('   ‚úÖ –ù–ï –ü–†–û–®–Å–õ (–æ–∂–∏–¥–∞–ª–æ—Å—å)');
      console.log('   –û—à–∏–±–∫–∏:', Object.values(result.errors).join(', '));
    } else if (result.success && !testCase.shouldPass) {
      console.log('   ‚ùå –ü–†–û–®–Å–õ (–ù–ï –æ–∂–∏–¥–∞–ª–æ—Å—å)');
    } else {
      console.log('   ‚ùå –ù–ï –ü–†–û–®–Å–õ (–ù–ï –æ–∂–∏–¥–∞–ª–æ—Å—å)');
      console.log('   –û—à–∏–±–∫–∏:', Object.values(result.errors).join(', '));
    }
    
  } catch (error) {
    console.log('   ‚ùå –û–®–ò–ë–ö–ê:', error.message);
  }
  
  console.log('');
});

console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
