const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addMoreTestData() {
  try {
    console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    const processor = await prisma.users.findFirst({
      where: { role: 'PROCESSOR' }
    });

    if (!processor) {
      console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ create-test-processing-data.js');
      return;
    }

    // 1. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
    console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');
    
    const today = new Date();
    const todayDeposits = [
      { amount: 245, currency: 'USDT_TRC20', email: 'today1@test.com' },
      { amount: 567, currency: 'BTC', email: 'today2@test.com' },
      { amount: 890, currency: 'ETH', email: 'today3@test.com' },
      { amount: 1250, currency: 'USDT_ERC20', email: 'today4@test.com' },
      { amount: 1750, currency: 'USDC', email: 'today5@test.com' },
      { amount: 2200, currency: 'XRP', email: 'today6@test.com' },
    ];

    for (let i = 0; i < todayDeposits.length; i++) {
      const deposit = todayDeposits[i];
      const depositTime = new Date();
      depositTime.setHours(depositTime.getHours() - (i + 1)); // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
      let bonusRate = 0.5;
      if (deposit.amount >= 3000) bonusRate = 3.0;
      else if (deposit.amount >= 2000) bonusRate = 2.5;
      else if (deposit.amount >= 1500) bonusRate = 2.0;
      else if (deposit.amount >= 1000) bonusRate = 1.5;
      else if (deposit.amount >= 500) bonusRate = 1.0;

      const bonusAmount = (deposit.amount * bonusRate) / 100;

      await prisma.processor_deposits.create({
        data: {
          processorId: processor.id,
          playerId: `today_player_${i + 1}`,
          playerNick: `TodayPlayer${i + 1}`,
          playerEmail: deposit.email,
          amount: deposit.amount,
          currency: deposit.currency,
          currencyType: deposit.currency.includes('USD') ? 'FIAT' : 'CRYPTO',
          paymentMethod: deposit.currency,
          leadSource: 'mobile_app',
          proofs: `Today proof for $${deposit.amount}`,
          notes: `–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç #${i + 1}`,
          status: 'APPROVED',
          commissionRate: 30.0,
          bonusRate: bonusRate,
          bonusAmount: bonusAmount,
          createdAt: depositTime,
          updatedAt: depositTime,
        }
      });
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${todayDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`);

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    console.log('üí∏ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É...');
    
    const thisMonth = new Date();
    const monthStart = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
    const monthEnd = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

    await prisma.salary_requests.create({
      data: {
        processorId: processor.id,
        periodStart: monthStart,
        periodEnd: monthEnd,
        requestedAmount: 1200,
        calculatedAmount: 1320, // +10%
        paymentDetails: 'USDT TRC20: TXkF7P9QqG2N8VsB1mH3E...',
        comment: '–ó–∞—è–≤–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
        status: 'PENDING',
      }
    });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É');

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    console.log('üéÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    
    const existingBonusSettings = await prisma.bonus_settings.findFirst();
    if (!existingBonusSettings) {
      await prisma.bonus_settings.create({
        data: {
          name: '–û—Å–Ω–æ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã',
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤',
          baseCommissionRate: 30.0,
          baseBonusRate: 5.0,
          tiers: JSON.stringify([
            { min: 0, max: 1000, rate: 1.0 },
            { min: 1000, max: 5000, rate: 2.0 },
            { min: 5000, max: null, rate: 3.0 }
          ]),
          isActive: true,
        }
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ bonus_grid
    console.log('üìä –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É...');
    
    const existingBonusGrid = await prisma.bonus_grid.findFirst();
    if (!existingBonusGrid) {
      const bonusGridData = [
        { minAmount: 0, maxAmount: 500, bonusPercentage: 1.0, description: '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' },
        { minAmount: 500, maxAmount: 1500, bonusPercentage: 2.0, description: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å' },
        { minAmount: 1500, maxAmount: 3000, bonusPercentage: 3.0, description: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å' },
        { minAmount: 3000, maxAmount: null, bonusPercentage: 5.0, description: '–≠–ª–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' },
      ];

      for (const grid of bonusGridData) {
        await prisma.bonus_grid.create({
          data: {
            shiftType: 'MORNING',
            minAmount: grid.minAmount,
            maxAmount: grid.maxAmount,
            bonusPercentage: grid.bonusPercentage,
            fixedBonus: null,
            fixedBonusMin: null,
            description: grid.description,
            isActive: true,
          }
        });
      }
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞');
    }

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏...');
    
    const existingMotivations = await prisma.bonus_motivations.findFirst();
    if (!existingMotivations) {
      const motivations = [
        {
          type: 'PERCENTAGE',
          name: '–ë–æ–Ω—É—Å –∑–∞ –æ–±—ä–µ–º',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          value: 1.5,
          conditions: JSON.stringify({ minDeposits: 10, minAmount: 5000 }),
        },
        {
          type: 'FIXED_AMOUNT',
          name: '–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          description: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          value: 50,
          conditions: JSON.stringify({ minDeposits: 15 }),
        },
      ];

      for (const motivation of motivations) {
        await prisma.bonus_motivations.create({
          data: {
            type: motivation.type,
            name: motivation.name,
            description: motivation.description,
            value: motivation.value,
            conditions: motivation.conditions,
            isActive: true,
          }
        });
      }
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏');
    }

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏...');
    
    const statusDeposits = [
      { amount: 150, status: 'PENDING', email: 'pending1@test.com' },
      { amount: 280, status: 'PENDING', email: 'pending2@test.com' },
      { amount: 420, status: 'REJECTED', email: 'rejected1@test.com' },
      { amount: 680, status: 'PROCESSING', email: 'processing1@test.com' },
    ];

    for (let i = 0; i < statusDeposits.length; i++) {
      const deposit = statusDeposits[i];
      const depositTime = new Date();
      depositTime.setMinutes(depositTime.getMinutes() - (i * 15)); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

      await prisma.processor_deposits.create({
        data: {
          processorId: processor.id,
          playerId: `status_player_${i + 1}`,
          playerNick: `StatusPlayer${i + 1}`,
          playerEmail: deposit.email,
          amount: deposit.amount,
          currency: 'USDT_TRC20',
          currencyType: 'FIAT',
          paymentMethod: 'USDT_TRC20',
          leadSource: 'website',
          proofs: `Proof for ${deposit.status} deposit`,
          notes: `–î–µ–ø–æ–∑–∏—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${deposit.status}`,
          status: deposit.status,
          commissionRate: 30.0,
          bonusRate: 1.0,
          bonusAmount: deposit.amount * 0.01,
          createdAt: depositTime,
          updatedAt: depositTime,
        }
      });
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${statusDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏`);

    console.log('\nüéâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('\nüìà –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:');
    console.log(`üí∞ –î–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayDeposits.length}`);
    console.log(`üí∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ó–ü: 1`);
    console.log(`üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã`);
    console.log(`üìä –ë–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞`);
    console.log(`üöÄ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã`);
    console.log(`üîÑ –î–µ–ø–æ–∑–∏—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: ${statusDeposits.length}`);
    console.log('\n‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addMoreTestData();
