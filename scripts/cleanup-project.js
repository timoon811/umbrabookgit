#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ UmbraPL –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ–¥–∞
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê UMBRAPL');
console.log('=====================================\n');

// –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const temporaryFiles = [
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∞—É–¥–∏—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  'scripts/audit-automation.js',
  'scripts/fix-nextjs15-routes.js', 
  'scripts/fix-api-auth.js',
  'scripts/fix-auth-syntax.js',
  'scripts/fix-all-syntax.js',
  'scripts/final-fix-all.js',
  'scripts/fix-critical-syntax.js',
  'scripts/cleanup-project.js', // –£–¥–∞–ª–∏—Ç —Å–µ–±—è –≤ –∫–æ–Ω—Ü–µ
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  'prisma.config.ts', // –£–∂–µ —É–¥–∞–ª–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ summary)
  'audit/business-logic-issues.md',
  
  // Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  'jest.config.js',
  'jest.setup.js',
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Sentry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ)
  // –ù–ï —É–¥–∞–ª—è–µ–º: sentry.client.config.ts, sentry.server.config.ts, sentry.edge.config.ts
];

// –ü–∞–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–Ω–æ –Ω–µ —É–¥–∞–ª–µ–Ω–∏—è)
const foldersToClean = [
  'node_modules/.cache',
  '.next',
  'dist',
  'build',
  'coverage',
  '.turbo',
];

// –§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞
const filesToCleanCode = [
  // API —Ñ–∞–π–ª—ã —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  'src/app/api/manager/deposits/route.ts',
  'src/app/api/manager/shifts/route.ts',
  'src/app/api/admin/process-bonuses/route.ts',
];

function deleteFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${filePath}: ${error.message}`);
    return false;
  }
}

function deleteFolder(folderPath) {
  try {
    if (fs.existsSync(folderPath)) {
      fs.rmSync(folderPath, { recursive: true, force: true });
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${folderPath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${folderPath}: ${error.message}`);
    return false;
  }
}

function cleanCodeFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    content = content.replace(/console\.log\('\[DEPOSITS_GET\][^']*'\);?\s*/g, '');
    content = content.replace(/console\.log\('\[DEPOSIT\][^']*'\);?\s*/g, '');
    content = content.replace(/console\.log\('\[SHIFT_[^']*'\);?\s*/g, '');
    content = content.replace(/console\.log\(\`\[SHIFT_[^`]*\`\);?\s*/g, '');
    
    // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    content = content.replace(/\/\/ DEBUG:[^\n]*\n/g, '');
    content = content.replace(/\/\* DEBUG[^*]*\*\//g, '');
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    content = content.replace(/\/\/ TODO: Remove this[^\n]*\n/g, '');
    content = content.replace(/\/\/ TEMP:[^\n]*\n/g, '');
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
    content = content.replace(/\n\n\n+/g, '\n\n');
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      console.log(`üßπ –û—á–∏—â–µ–Ω –∫–æ–¥: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞ ${filePath}: ${error.message}`);
    return false;
  }
}

function optimizePackageJson() {
  try {
    const packagePath = 'package.json';
    const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∞—É–¥–∏—Ç–∞
    const scriptsToRemove = [
      'audit:full',
      'audit:quick', 
      'audit:security',
      'audit:performance',
      'fix:nextjs15',
      'fix:api-auth',
      'deps:analyze',
      'bundle:analyze'
    ];
    
    let removedCount = 0;
    scriptsToRemove.forEach(script => {
      if (packageContent.scripts && packageContent.scripts[script]) {
        delete packageContent.scripts[script];
        removedCount++;
      }
    });
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    const essentialScripts = {
      "dev": "next dev",
      "dev:turbo": "next dev --turbopack", 
      "build": "next build",
      "start": "next start",
      "lint": "next lint",
      "db:generate": "prisma generate",
      "db:studio": "prisma studio",
      "postinstall": "prisma generate",
      "migrate:deploy": "prisma migrate deploy",
      "migrate:prod": "prisma migrate deploy",
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ production —Å–∫—Ä–∏–ø—Ç—ã
      "init:secure": "node scripts/secure-init.js",
      "init:admin": "node scripts/secure-init.js --admin-only",
      "jwt:generate": "node scripts/generate-jwt-secret.js --show-only",
      "jwt:update": "node scripts/generate-jwt-secret.js --update",
      "jwt:validate": "node scripts/generate-jwt-secret.js --validate",
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      "test": "jest",
      "test:watch": "jest --watch",
      "test:coverage": "jest --coverage",
      "test:ci": "jest --ci --coverage --watchAll=false"
    };
    
    packageContent.scripts = essentialScripts;
    
    fs.writeFileSync(packagePath, JSON.stringify(packageContent, null, 2));
    console.log(`üì¶ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω package.json (—É–¥–∞–ª–µ–Ω–æ ${removedCount} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ package.json: ${error.message}`);
    return false;
  }
}

function createCleanupSummary() {
  const summaryPath = 'CLEANUP_SUMMARY.md';
  const summary = `# –ò—Ç–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ UmbraPL

## üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

### –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- –°–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã  
- –ò–∑–±—ã—Ç–æ—á–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã

### –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
- package.json (—É–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã)
- API —Ñ–∞–π–ª—ã (—É–¥–∞–ª–µ–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
- –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

### –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
- –í—Å–µ —Ä–∞–±–æ—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ CLI —Å–∫—Ä–∏–ø—Ç—ã (init:secure, jwt:*)
- –û—Å–Ω–æ–≤–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –†–∞–±–æ—á–∏–π –∫–æ–¥ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞

## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç

–ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –≥–æ—Ç–æ–≤ –∫ production deployment.
–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.

**–î–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏:** ${new Date().toISOString()}
**–°—Ç–∞—Ç—É—Å:** –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É üöÄ
`;

  fs.writeFileSync(summaryPath, summary);
  console.log(`üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ: ${summaryPath}`);
}

// –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò
console.log('1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
let deletedFiles = 0;
for (const file of temporaryFiles) {
  if (deleteFile(file)) {
    deletedFiles++;
  }
}

console.log(`\n2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫...`);
let deletedFolders = 0;
for (const folder of foldersToClean) {
  if (deleteFolder(folder)) {
    deletedFolders++;
  }
}

console.log(`\n3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞ –æ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...`);
let cleanedFiles = 0;
for (const file of filesToCleanCode) {
  if (cleanCodeFile(file)) {
    cleanedFiles++;
  }
}

console.log(`\n4Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è package.json...`);
optimizePackageJson();

console.log(`\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`);
createCleanupSummary();

console.log('\n' + '='.repeat(50));
console.log('üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
console.log(`üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedFiles}`);
console.log(`üìä –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: ${deletedFolders}`);
console.log(`üìä –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${cleanedFiles}`);
console.log('\n‚úÖ –ü—Ä–æ–µ–∫—Ç UmbraPL –≥–æ—Ç–æ–≤ –∫ production deployment!');
console.log('üîí –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω—ã');
console.log('üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞');
console.log('\n' + '='.repeat(50));

// –°–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
setTimeout(() => {
  try {
    fs.unlinkSync(__filename);
    console.log('üóëÔ∏è –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
  }
}, 1000);
