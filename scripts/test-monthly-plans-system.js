console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ú–ï–°–Ø–ß–ù–´–• –ü–õ–ê–ù–û–í\n');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

const http = require('http');
const url = require('url');

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function runFullTest() {
  try {
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –ú–ï–°–Ø–ß–ù–´–• –ü–õ–ê–ù–û–í –í –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò...');
    
    const adminSettingsResponse = await makeRequest('/api/admin/salary-settings');
    if (adminSettingsResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', adminSettingsResponse.data);
      return;
    }

    const adminPlans = adminSettingsResponse.data.monthlyBonuses || [];
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${adminPlans.length} –ø–ª–∞–Ω–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏`);
    
    adminPlans.forEach((plan, index) => {
      console.log(`      ${index + 1}. ${plan.name}: $${plan.minAmount.toLocaleString()} ‚Üí +${plan.bonusPercent}%`);
    });

    console.log('\nüìä 2. –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –°–¢–†–ê–ù–ò–¶–ï...');
    
    const userStatsResponse = await makeRequest('/api/manager/stats-detailed');
    if (userStatsResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userStatsResponse.data);
      return;
    }

    const userPlans = userStatsResponse.data.settings.monthlyBonuses || [];
    const currentVolume = userStatsResponse.data.performance.month.volume;
    
    console.log(`   ‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ–±—ä–µ–º: $${currentVolume.toLocaleString()}`);
    console.log(`   ‚úÖ –ü–ª–∞–Ω—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º API: ${userPlans.length}`);
    
    userPlans.forEach((plan, index) => {
      const achieved = currentVolume >= plan.minAmount;
      console.log(`      ${index + 1}. ${plan.name}: $${plan.minAmount.toLocaleString()} ‚Üí +${plan.bonusPercent}% ${achieved ? 'üéØ –î–û–°–¢–ò–ì–ù–£–¢' : '‚ùå'}`);
    });

    console.log('\nüí∞ 3. –†–ê–°–ß–ï–¢ –ú–ï–°–Ø–ß–ù–´–• –ë–û–ù–£–°–û–í...');
    
    const bonusCalcResponse = await makeRequest('/api/admin/monthly-bonuses/calculate', 'POST', { dryRun: true });
    if (bonusCalcResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤:', bonusCalcResponse.data);
      return;
    }

    const { statistics, results } = bonusCalcResponse.data;
    console.log(`   ‚úÖ –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${statistics.totalManagers}`);
    console.log(`   ‚úÖ –ü–æ–ª—É—á–∞—Ç –±–æ–Ω—É—Å—ã: ${statistics.eligibleManagers}`);
    console.log(`   ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: $${statistics.totalBonusAmount.toFixed(2)}`);

    const eligibleManagers = results.filter(r => r.monthlyBonusAmount > 0);
    eligibleManagers.forEach(manager => {
      console.log(`      üíé ${manager.managerName}:`);
      console.log(`         –û–±—ä–µ–º: $${manager.totalMonthlyVolume.toLocaleString()}`);
      console.log(`         –ü–ª–∞–Ω: ${manager.applicablePlan.name} (+${manager.applicablePlan.bonusPercent}%)`);
      console.log(`         –ë–æ–Ω—É—Å: $${manager.monthlyBonusAmount.toFixed(2)}`);
    });

    console.log('\nüß™ 4. –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô API...');
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    const testPlan = {
      name: '–¢–µ—Å—Ç –ü–ª–∞–Ω 50K',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
      minAmount: 50000,
      bonusPercent: 2.0
    };

    const createResponse = await makeRequest('/api/admin/salary-monthly-bonus', 'POST', testPlan);
    if (createResponse.status === 201) {
      console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
      
      const createdPlan = createResponse.data;
      
      // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateResponse = await makeRequest(`/api/admin/salary-monthly-bonus?id=${createdPlan.id}`, 'PUT', {
        bonusPercent: 2.5
      });
      
      if (updateResponse.status === 200) {
        console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
      } else {
        console.log('   ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
      }
      
      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
      const deleteResponse = await makeRequest(`/api/admin/salary-monthly-bonus?id=${createdPlan.id}`, 'DELETE');
      
      if (deleteResponse.status === 200) {
        console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
      } else {
        console.log('   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
      }
    } else {
      console.log('   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
    }

    console.log('\nüéØ 5. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°-–ë–ê–†–ê –° –í–ï–•–ê–ú–ò...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ö–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
    const progressBarMilestones = userStatsResponse.data.settings.monthlyBonuses.map(plan => ({
      value: plan.minAmount,
      label: `${plan.name}: $${plan.minAmount.toLocaleString()}`
    }));
    
    console.log('   ‚úÖ –í–µ—Ö–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞:');
    progressBarMilestones.forEach(milestone => {
      console.log(`      ‚Ä¢ ${milestone.label}`);
    });

    console.log('\nüìã –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚ïê'.repeat(60));
    console.log('‚úÖ –ú–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω—ã');
    console.log('‚úÖ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞–Ω—ã');
    console.log('‚úÖ –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–ù–ï –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è)');
    console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ "–°–∏—Å—Ç–µ–º–µ –±–æ–Ω—É—Å–æ–≤"');
    console.log('‚úÖ –í–µ—Ö–∏ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');

    console.log('\nüåü –ü–†–ò–ú–ï–†–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í –ë–†–ê–£–ó–ï–†–ï:');
    console.log('   1. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ó–ü ‚Üí –ú–µ—Å—è—á–Ω—ã–µ –±–æ–Ω—É—Å—ã');
    console.log('   2. http://localhost:3000/management ‚Üí –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤');
    console.log('   3. –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä "–û–±—ä–µ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω)"');
    
    console.log('\nüéØ –¢–ï–ö–£–©–ê–Ø –õ–û–ì–ò–ö–ê:');
    console.log(`   üìà –û–±—ä–µ–º: $${currentVolume.toLocaleString()}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
    const sortedPlans = [...userPlans].sort((a, b) => b.minAmount - a.minAmount);
    let activeBonus = 0;
    let activePlan = null;
    
    for (const plan of sortedPlans) {
      if (currentVolume >= plan.minAmount) {
        activeBonus = currentVolume * plan.bonusPercent / 100;
        activePlan = plan;
        break;
      }
    }
    
    if (activePlan) {
      console.log(`   üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ${activePlan.name} (+${activePlan.bonusPercent}%)`);
      console.log(`   üí∞ –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å: $${activeBonus.toFixed(2)}`);
    } else {
      console.log('   ‚ùå –ü–ª–∞–Ω—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã');
      const nextPlan = [...userPlans].sort((a, b) => a.minAmount - b.minAmount)[0];
      if (nextPlan) {
        const remaining = nextPlan.minAmount - currentVolume;
        console.log(`   üéØ –î–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–ª–∞–Ω–∞: $${remaining.toLocaleString()}`);
      }
    }

    console.log('\nüéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –ú–ï–°–Ø–ß–ù–´–• –ü–õ–ê–ù–û–í –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

runFullTest();
