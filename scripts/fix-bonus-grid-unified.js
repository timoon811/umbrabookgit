const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixBonusGridUnified() {
  try {
    console.log('üßπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
    const allGrids = await prisma.bonus_grid.findMany({
      orderBy: [{ minAmount: 'asc' }, { shiftType: 'asc' }]
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏: ${allGrids.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    const gridsByRange = {};
    allGrids.forEach(grid => {
      const key = `${grid.minAmount}-${grid.maxAmount || 'null'}`;
      if (!gridsByRange[key]) {
        gridsByRange[key] = [];
      }
      gridsByRange[key].push(grid);
    });

    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:');
    for (const range in gridsByRange) {
      const grids = gridsByRange[range];
      console.log(`   ${range}: ${grids.length} –∑–∞–ø–∏—Å–µ–π (${grids.map(g => g.shiftType).join(', ')})`);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π...');
    await prisma.bonus_grid.deleteMany({});
    console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–∏–ø—É —Å–º–µ–Ω—ã)
    console.log('\n‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏...');
    
    const unifiedBonusRules = [
      { minAmount: 0, maxAmount: 499, percentage: 0 },
      { minAmount: 500, maxAmount: 999, percentage: 0.5 },
      { minAmount: 1000, maxAmount: 1499, percentage: 1.5 },
      { minAmount: 1500, maxAmount: 1999, percentage: 2.0 },
      { minAmount: 2000, maxAmount: 2999, percentage: 2.5 },
      { minAmount: 3000, maxAmount: null, percentage: 3.0 }
    ];

    for (const rule of unifiedBonusRules) {
      await prisma.bonus_grid.create({
        data: {
          shiftType: 'MORNING', // –ò—Å–ø–æ–ª—å–∑—É–µ–º MORNING –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø, –Ω–æ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —Å–º–µ–Ω—ã
          minAmount: rule.minAmount,
          maxAmount: rule.maxAmount,
          bonusPercentage: rule.percentage,
          description: `$${rule.minAmount}${rule.maxAmount ? `-$${rule.maxAmount}` : '+'} ‚Üí ${rule.percentage}%`,
          isActive: true
        }
      });
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–∞—è –±–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞:');
    unifiedBonusRules.forEach(rule => {
      console.log(`   üí∞ $${rule.minAmount}${rule.maxAmount ? `-$${rule.maxAmount}` : '+'} ‚Üí ${rule.percentage}%`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const newGrids = await prisma.bonus_grid.findMany({
      orderBy: { minAmount: 'asc' }
    });

    console.log(`\nüìä –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤–æ–π —Å–µ—Ç–∫–µ: ${newGrids.length}`);
    
    if (newGrids.length === 6) {
      console.log('\nüéâ –°–ï–¢–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê! –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.');
    } else {
      console.log('\n‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–∂–∏–¥–∞–ª–æ—Å—å 6 –∑–∞–ø–∏—Å–µ–π.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixBonusGridUnified();
