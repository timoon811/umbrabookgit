const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function test24HourReset() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞...\n');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const now = new Date();
    const utcNow = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è –ø–æ UTC (00:00:00)
    const todayStart = new Date(utcNow);
    todayStart.setUTCHours(0, 0, 0, 0);
    
    // –ö–æ–Ω–µ—Ü –¥–Ω—è –ø–æ UTC (23:59:59.999)
    const todayEnd = new Date(utcNow);
    todayEnd.setUTCHours(23, 59, 59, 999);
    
    console.log('üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
    console.log(`   - –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${now.toLocaleString()}`);
    console.log(`   - UTC –≤—Ä–µ–º—è: ${utcNow.toISOString()}`);
    console.log(`   - –ù–∞—á–∞–ª–æ –¥–Ω—è UTC: ${todayStart.toISOString()}`);
    console.log(`   - –ö–æ–Ω–µ—Ü –¥–Ω—è UTC: ${todayEnd.toISOString()}`);
    console.log(`   - –†–∞–∑–Ω–∏—Ü–∞ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è: ${Math.floor((utcNow - todayStart) / (1000 * 60 * 60))} —á–∞—Å–æ–≤ ${Math.floor(((utcNow - todayStart) % (1000 * 60 * 60)) / (1000 * 60))} –º–∏–Ω—É—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞
    const resetHour = todayStart.getUTCHours();
    const resetMinute = todayStart.getUTCMinutes();
    const resetSecond = todayStart.getUTCSeconds();
    
    const isValidReset = resetHour === 0 && resetMinute === 0 && resetSecond === 0;
    console.log(`\nüïê –ü—Ä–æ–≤–µ—Ä–∫–∞ 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞:`);
    console.log(`   - –°–±—Ä–æ—Å –≤ ${resetHour}:${resetMinute}:${resetSecond} UTC - ${isValidReset ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
    console.log('\nüåç –¢–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω:');
    const timeZones = [
      { name: 'UTC', offset: 0 },
      { name: '–ú–æ—Å–∫–≤–∞ (UTC+3)', offset: 3 },
      { name: '–ù—å—é-–ô–æ—Ä–∫ (UTC-5)', offset: -5 },
      { name: '–¢–æ–∫–∏–æ (UTC+9)', offset: 9 }
    ];
    
    timeZones.forEach(tz => {
      const tzTime = new Date(utcNow.getTime() + (tz.offset * 60 * 60 * 1000));
      const tzDayStart = new Date(tzTime);
      tzDayStart.setHours(0, 0, 0, 0);
      
      console.log(`   - ${tz.name}: ${tzTime.toLocaleString()} (–Ω–∞—á–∞–ª–æ –¥–Ω—è: ${tzDayStart.toLocaleString()})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏:');
    const bonusGrids = await prisma.bonus_grid.findMany({
      where: { isActive: true },
      orderBy: { minAmount: 'asc' }
    });
    
    if (bonusGrids.length > 0) {
      console.log('   - –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫:', bonusGrids.length);
      bonusGrids.forEach((grid, index) => {
        console.log(`     ${index + 1}. $${grid.minAmount} - ${grid.maxAmount ? `$${grid.maxAmount}` : '‚àû'} = ${grid.bonusPercentage}%`);
      });
    } else {
      console.log('   - –ë–æ–Ω—É—Å–Ω—ã–µ —Å–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º
    console.log('\nüßÆ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤:');
    const testAmounts = [100, 500, 1000, 2000, 5000];
    
    testAmounts.forEach(amount => {
      let bonusRate = 5.0; // –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Ç–∫—É
      const applicableGrid = bonusGrids.find(grid => 
        amount >= grid.minAmount && (!grid.maxAmount || amount <= grid.maxAmount)
      );
      
      if (applicableGrid) {
        bonusRate = applicableGrid.bonusPercentage;
      }
      
      const bonusAmount = (amount * bonusRate) / 100;
      console.log(`   - –î–µ–ø–æ–∑–∏—Ç $${amount}: ${bonusRate}% = $${bonusAmount.toFixed(2)}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤
    console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:');
    const bonusSettings = await prisma.bonus_settings.findFirst({
      where: { isActive: true },
      orderBy: { createdAt: 'desc' }
    });
    
    if (bonusSettings) {
      console.log(`   - –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${bonusSettings.baseCommissionRate}%`);
      console.log(`   - –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å: ${bonusSettings.baseBonusRate}%`);
      console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${bonusSettings.name}`);
      if (bonusSettings.description) {
        console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${bonusSettings.description}`);
      }
    } else {
      console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    console.log('\nüéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:');
    const motivations = await prisma.bonus_motivations.findMany({
      where: { isActive: true }
    });
    
    if (motivations.length > 0) {
      console.log('   - –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–π:', motivations.length);
      motivations.forEach((motivation, index) => {
        console.log(`     ${index + 1}. ${motivation.name}: ${motivation.type === 'PERCENTAGE' ? `${motivation.value}%` : `$${motivation.value}`}`);
        if (motivation.description) {
          console.log(`        ${motivation.description}`);
        }
        if (motivation.conditions) {
          console.log(`        –£—Å–ª–æ–≤–∏—è: ${motivation.conditions}`);
        }
      });
    } else {
      console.log('   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
test24HourReset();
