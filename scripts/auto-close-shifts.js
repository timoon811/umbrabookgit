const { PrismaClient } = require('@prisma/client');

require('dotenv').config({ path: '../.env.local' });

const prisma = new PrismaClient();

async function autoCloseShifts() {
  try {
    console.log('üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –°–ú–ï–ù');
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫: ${new Date().toISOString()}\n`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω
    const fetch = (await import('node-fetch')).default;
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    const adminUser = await prisma.users.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!adminUser) {
      console.error('‚ùå –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω: ${adminUser.name} (${adminUser.email})`);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–∏—Å—à–∏–µ —Å–º–µ–Ω—ã
    const now = new Date();
    const activeShifts = await prisma.processor_shifts.findMany({
      where: {
        status: 'ACTIVE',
        scheduledEnd: {
          lt: new Date(now.getTime() - 30 * 60 * 1000) // –ë–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        }
      },
      include: {
        processor: {
          select: {
            name: true,
            email: true
          }
        }
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${activeShifts.length} —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è`);

    if (activeShifts.length === 0) {
      console.log('‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    for (const shift of activeShifts) {
      const timeSinceEnd = now.getTime() - new Date(shift.scheduledEnd).getTime();
      const hoursSinceEnd = timeSinceEnd / (1000 * 60 * 60);
      
      console.log(`üìã –°–º–µ–Ω–∞ ${shift.id}:`);
      console.log(`   üë§ ${shift.processor.name} (${shift.processor.email})`);
      console.log(`   ‚è±Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ${hoursSinceEnd.toFixed(1)} —á–∞—Å–æ–≤`);
    }

    console.log('\nüîß –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω...');

    // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î (–±–µ–∑ API)
    const results = [];

    for (const shift of activeShifts) {
      try {
        const thirtyMinutesAfterEnd = new Date(shift.scheduledEnd.getTime() + 30 * 60 * 1000);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É
        const closedShift = await prisma.processor_shifts.update({
          where: { id: shift.id },
          data: {
            actualEnd: thirtyMinutesAfterEnd,
            status: 'COMPLETED',
            notes: (shift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ cron-—Å–∫—Ä–∏–ø—Ç–æ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]'
          }
        });

        console.log(`‚úÖ –°–º–µ–Ω–∞ ${shift.id} –∑–∞–∫—Ä—ã—Ç–∞ (${shift.processor.name})`);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–º–µ–Ω—É
        if (shift.actualStart) {
          const durationMs = thirtyMinutesAfterEnd.getTime() - new Date(shift.actualStart).getTime();
          const durationHours = durationMs / (1000 * 60 * 60);
          
          if (durationHours > 0 && durationHours <= 24) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
            const salarySettings = await prisma.salary_settings.findFirst({
              where: { isActive: true },
              orderBy: { createdAt: 'desc' }
            });

            const hourlyRate = salarySettings?.hourlyRate || 2.0;
            const hourlyPayment = durationHours * hourlyRate;

            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
            await prisma.salary_earnings_log.create({
              data: {
                processorId: shift.processorId,
                shiftId: shift.id,
                earningType: 'HOURLY_PAY',
                amount: hourlyPayment,
                currency: 'USD',
                details: {
                  hours: durationHours,
                  hourlyRate: hourlyRate,
                  shiftType: shift.shiftType,
                  autoCompleted: true
                }
              }
            });

            console.log(`   üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ $${hourlyPayment.toFixed(2)} –∑–∞ ${durationHours.toFixed(2)} —á–∞—Å–æ–≤`);
          }
        }

        results.push({
          shiftId: shift.id,
          processorName: shift.processor.name,
          success: true
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã ${shift.id}:`, error.message);
        results.push({
          shiftId: shift.id,
          processorName: shift.processor.name,
          success: false,
          error: error.message
        });
      }
    }

    const successCount = results.filter(r => r.success).length;
    const errorCount = results.filter(r => !r.success).length;

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: ${successCount} —Å–º–µ–Ω`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Å–º–µ–Ω`);
    console.log(`   ‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toISOString()}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  autoCloseShifts();
}

module.exports = { autoCloseShifts };
