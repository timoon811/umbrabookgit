#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');
const prisma = new PrismaClient();

async function runShiftLoggingTests() {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω...\n');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const processor = await prisma.users.findFirst({
      where: { role: 'PROCESSOR' }
    });

    const admin = await prisma.users.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!processor || !admin) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ create-shift-test-data.js');
      return;
    }

    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${processor.email}`);
    console.log(`üîß –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.email}\n`);

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    console.log('üìù –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
    
    const processorLogs = await prisma.analytics.findMany({
      where: {
        userId: processor.id,
        action: {
          startsWith: 'SHIFT_'
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processor.name}: ${processorLogs.length}`);
    
    if (processorLogs.length > 0) {
      console.log('   ‚úÖ –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤:');
      processorLogs.slice(0, 3).forEach((log, index) => {
        try {
          const metadata = JSON.parse(log.metadata || '{}');
          console.log(`      ${index + 1}. ${metadata.description || log.action} (${log.createdAt.toISOString()})`);
        } catch (e) {
          console.log(`      ${index + 1}. ${log.action} (${log.createdAt.toISOString()})`);
        }
      });
    } else {
      console.log('   ‚ùå –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    
    const allShiftLogs = await prisma.analytics.findMany({
      where: {
        action: {
          startsWith: 'SHIFT_'
        }
      }
    });

    const otherUserLogs = allShiftLogs.filter(log => log.userId !== processor.id);
    
    console.log(`   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤ —Å–º–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: ${allShiftLogs.length}`);
    console.log(`   –õ–æ–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processor.name}: ${processorLogs.length}`);
    console.log(`   –õ–æ–≥–æ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${otherUserLogs.length}`);
    
    if (processorLogs.length > 0 && otherUserLogs.length >= 0) {
      console.log('   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    console.log('\nüìÖ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
    
    const processorShifts = await prisma.processor_shifts.findMany({
      where: {
        processorId: processor.id
      },
      include: {
        processor: {
          select: {
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        shiftDate: 'desc'
      }
    });

    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${processor.name}: ${processorShifts.length}`);
    
    if (processorShifts.length > 0) {
      console.log('   ‚úÖ –°–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã —Å–º–µ–Ω:');
      processorShifts.slice(0, 3).forEach((shift, index) => {
        console.log(`      ${index + 1}. ${shift.shiftType} —Å–º–µ–Ω–∞ ${shift.shiftDate.toISOString().split('T')[0]} - ${shift.status}`);
      });
    } else {
      console.log('   ‚ùå –°–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø)
    console.log('\nüîß –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ –≤—Å–µ–º —Å–º–µ–Ω–∞–º');
    
    const allShifts = await prisma.processor_shifts.findMany({
      include: {
        processor: {
          select: {
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        shiftDate: 'desc'
      }
    });

    const uniqueProcessors = new Set(allShifts.map(shift => shift.processorId));
    
    console.log(`   –í—Å–µ–≥–æ —Å–º–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: ${allShifts.length}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ${uniqueProcessors.size}`);
    
    if (allShifts.length > 0) {
      console.log('   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–º–µ–Ω—ã –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º
      const shiftsByProcessor = {};
      allShifts.forEach(shift => {
        if (!shiftsByProcessor[shift.processorId]) {
          shiftsByProcessor[shift.processorId] = [];
        }
        shiftsByProcessor[shift.processorId].push(shift);
      });
      
      console.log('   üìã –°–º–µ–Ω—ã –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º:');
      Object.entries(shiftsByProcessor).forEach(([processorId, shifts]) => {
        const processorName = shifts[0].processor.name;
        console.log(`      ${processorName}: ${shifts.length} —Å–º–µ–Ω`);
      });
    } else {
      console.log('   ‚ùå –°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîí –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const processorOnlyLogs = await prisma.analytics.findMany({
      where: {
        userId: processor.id,
        action: {
          startsWith: 'SHIFT_'
        }
      }
    });

    const adminCanSeeAllLogs = await prisma.analytics.findMany({
      where: {
        action: {
          startsWith: 'SHIFT_'
        }
      }
    });

    console.log(`   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–∏—Ç: ${processorOnlyLogs.length} —Å–≤–æ–∏—Ö –ª–æ–≥–æ–≤`);
    console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç: ${adminCanSeeAllLogs.length} –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (processorOnlyLogs.length <= adminCanSeeAllLogs.length) {
      console.log('   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('   ‚ùå –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö');
    }

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n‚öôÔ∏è –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    const completedShifts = await prisma.processor_shifts.findMany({
      where: {
        status: 'COMPLETED',
        actualStart: {
          not: null
        },
        actualEnd: {
          not: null
        }
      }
    });

    console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω: ${completedShifts.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
    let logsMatchShifts = 0;
    for (const shift of completedShifts) {
      const startLog = await prisma.analytics.findFirst({
        where: {
          userId: shift.processorId,
          action: 'SHIFT_SHIFT_START',
          createdAt: {
            gte: new Date(shift.actualStart.getTime() - 10 * 60 * 1000), // –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –º–∏–Ω—É—Ç
            lte: new Date(shift.actualStart.getTime() + 10 * 60 * 1000)
          }
        }
      });

      const endLog = await prisma.analytics.findFirst({
        where: {
          userId: shift.processorId,
          action: 'SHIFT_SHIFT_END',
          createdAt: {
            gte: new Date(shift.actualEnd.getTime() - 10 * 60 * 1000),
            lte: new Date(shift.actualEnd.getTime() + 10 * 60 * 1000)
          }
        }
      });

      if (startLog && endLog) {
        logsMatchShifts++;
      }
    }

    console.log(`   –°–º–µ–Ω —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ª–æ–≥–∞–º–∏: ${logsMatchShifts}/${completedShifts.length}`);
    
    if (logsMatchShifts === completedShifts.length) {
      console.log('   ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω–∞');
    } else if (logsMatchShifts > 0) {
      console.log('   ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    // –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    console.log('\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('===============================');
    
    const testResults = [
      { name: '–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', status: processorLogs.length > 0 },
      { name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', status: true },
      { name: '–°–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', status: processorShifts.length > 0 },
      { name: '–î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', status: allShifts.length > 0 },
      { name: '–ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', status: processorOnlyLogs.length <= adminCanSeeAllLogs.length },
      { name: '–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', status: logsMatchShifts === completedShifts.length }
    ];

    const passedTests = testResults.filter(test => test.status).length;
    const totalTests = testResults.length;

    testResults.forEach(test => {
      console.log(`${test.status ? '‚úÖ' : '‚ùå'} ${test.name}`);
    });

    console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã`);
    
    if (passedTests === totalTests) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else if (passedTests >= totalTests * 0.8) {
      console.log('‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.');
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }

    console.log('\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('================');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –ª–æ–≥–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥–æ–µ –Ω–∞—á–∞–ª–æ/–æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  runShiftLoggingTests();
}

module.exports = { runShiftLoggingTests };
