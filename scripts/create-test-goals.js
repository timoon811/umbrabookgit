console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–õ–ê–ù–û–í\n');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

const http = require('http');
const url = require('url');

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function createTestGoals() {
  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞–Ω–æ–≤...');
    
    const typesResponse = await makeRequest('/api/admin/goals');
    if (typesResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤:', typesResponse.data);
      return;
    }

    const { goalTypes } = typesResponse.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${goalTypes.length} —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤:`);
    goalTypes.forEach(type => {
      console.log(`   ‚Ä¢ ${type.name} (${type.unit}) - ${type.type}`);
    });

    // –ù–∞—Ö–æ–¥–∏–º ID —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤
    const earningsTypeId = goalTypes.find(t => t.type === 'EARNINGS')?.id;
    const depositsTypeId = goalTypes.find(t => t.type === 'DEPOSITS_COUNT')?.id;
    const hoursTypeId = goalTypes.find(t => t.type === 'HOURS')?.id;

    console.log('\nüèÜ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã...');

    // 1. –ü–ª–∞–Ω –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π)
    const earningsGoal = {
      name: '–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–∞',
      description: '–ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏',
      goalTypeId: earningsTypeId,
      periodType: 'WEEKLY',
      stages: [
        {
          targetValue: 100,
          rewardAmount: 10,
          title: '–°—Ç–∞—Ä—Ç',
          description: '–ü–µ—Ä–≤—ã–µ $100 –∑–∞—Ä–∞–±–æ—Ç–∫–∞'
        },
        {
          targetValue: 250,
          rewardAmount: 25,
          title: '–†–∞–∑–≥–æ–Ω',
          description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $250 –∑–∞—Ä–∞–±–æ—Ç–∫–∞'
        },
        {
          targetValue: 500,
          rewardAmount: 50,
          title: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
          description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $500 –∑–∞—Ä–∞–±–æ—Ç–∫–∞'
        },
        {
          targetValue: 1000,
          rewardAmount: 100,
          title: '–ú–∞—Å—Ç–µ—Ä',
          description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $1000 –∑–∞—Ä–∞–±–æ—Ç–∫–∞'
        }
      ]
    };

    const earningsResponse = await makeRequest('/api/admin/goals', 'POST', earningsGoal);
    if (earningsResponse.status === 201) {
      console.log('   ‚úÖ –ü–ª–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω');
      console.log('      ‚Ä¢ 4 —ç—Ç–∞–ø–∞: $100 ‚Üí $10, $250 ‚Üí $25, $500 ‚Üí $50, $1000 ‚Üí $100');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:', earningsResponse.data);
    }

    // 2. –ü–ª–∞–Ω –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const depositsGoal = {
      name: '–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      description: '–õ–µ—Å–µ–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      goalTypeId: depositsTypeId,
      periodType: 'DAILY',
      stages: [
        {
          targetValue: 10,
          rewardAmount: 5,
          title: '–ü–µ—Ä–≤—ã–µ 10',
          description: '10 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å'
        },
        {
          targetValue: 25,
          rewardAmount: 15,
          title: '–ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏',
          description: '25 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å'
        },
        {
          targetValue: 50,
          rewardAmount: 35,
          title: '–ü–æ–ª—Ç–∏–Ω–Ω–∏–∫',
          description: '50 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å'
        },
        {
          targetValue: 100,
          rewardAmount: 75,
          title: '–¶–µ–Ω—Ç—É—Ä–∏–æ–Ω',
          description: '100 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å'
        },
        {
          targetValue: 150,
          rewardAmount: 125,
          title: '–ú–µ–≥–∞-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫',
          description: '150 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å'
        }
      ]
    };

    const depositsResponse = await makeRequest('/api/admin/goals', 'POST', depositsGoal);
    if (depositsResponse.status === 201) {
      console.log('   ‚úÖ –ü–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω');
      console.log('      ‚Ä¢ 5 —ç—Ç–∞–ø–æ–≤: 10 ‚Üí $5, 25 ‚Üí $15, 50 ‚Üí $35, 100 ‚Üí $75, 150 ‚Üí $125');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsResponse.data);
    }

    // 3. –ü–ª–∞–Ω –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã
    const hoursGoal = {
      name: '–ú–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω —á–∞—Å–æ–≤',
      description: '–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–µ—Å—è—Ü',
      goalTypeId: hoursTypeId,
      periodType: 'MONTHLY',
      stages: [
        {
          targetValue: 40,
          rewardAmount: 20,
          title: '–†–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è',
          description: '40 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü'
        },
        {
          targetValue: 80,
          rewardAmount: 50,
          title: '–î–≤–µ –Ω–µ–¥–µ–ª–∏',
          description: '80 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü'
        },
        {
          targetValue: 120,
          rewardAmount: 90,
          title: '–¢—Ä–∏ –Ω–µ–¥–µ–ª–∏',
          description: '120 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü'
        },
        {
          targetValue: 160,
          rewardAmount: 150,
          title: '–ü–æ–ª–Ω—ã–π –º–µ—Å—è—Ü',
          description: '160 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü'
        }
      ]
    };

    const hoursResponse = await makeRequest('/api/admin/goals', 'POST', hoursGoal);
    if (hoursResponse.status === 201) {
      console.log('   ‚úÖ –ü–ª–∞–Ω —á–∞—Å–æ–≤ —Å–æ–∑–¥–∞–Ω');
      console.log('      ‚Ä¢ 4 —ç—Ç–∞–ø–∞: 40—á ‚Üí $20, 80—á ‚Üí $50, 120—á ‚Üí $90, 160—á ‚Üí $150');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —á–∞—Å–æ–≤:', hoursResponse.data);
    }

    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã...');
    
    const allGoalsResponse = await makeRequest('/api/admin/goals');
    if (allGoalsResponse.status === 200) {
      const { goals } = allGoalsResponse.data;
      console.log(`‚úÖ –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤: ${goals.length}`);
      
      goals.forEach(goal => {
        console.log(`\nüìã ${goal.name} (${goal.goalTypeName})`);
        console.log(`   –ü–µ—Ä–∏–æ–¥: ${goal.periodType}`);
        console.log(`   –≠—Ç–∞–ø—ã: ${goal.stages.length}`);
        
        goal.stages.forEach(stage => {
          console.log(`      ${stage.stage}. ${stage.title}: ${stage.targetValue}${goal.goalTypeUnit} ‚Üí $${stage.rewardAmount}`);
        });
      });
    }

    console.log('\nüéØ –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´ –ú–ù–û–ì–û–≠–¢–ê–ü–ù–´–• –ü–õ–ê–ù–û–í:');
    console.log('   üìà –õ–µ—Å–µ–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥: –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–∞–µ—Ç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –Ω–∞–≥—Ä–∞–¥—É');
    console.log('   üèÜ –ü—Ä–∏–º–µ—Ä: 100 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ = $5 + $15 + $35 + $75 = $130 –û–ë–©–ò–ô –ë–û–ù–£–°');
    console.log('   ‚ö†Ô∏è  –í–ê–ñ–ù–û: –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–∞–µ—Ç —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏');
    console.log('   üîÑ –ü–µ—Ä–∏–æ–¥—ã: DAILY (—Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å), WEEKLY (–Ω–µ–¥–µ–ª—è), MONTHLY (–º–µ—Å—è—Ü)');

    console.log('\n‚úÖ –¢–ï–°–¢–û–í–´–ï –ü–õ–ê–ù–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ó–ü ‚Üí —Ä–∞–∑–¥–µ–ª "–ü–ª–∞–Ω—ã/–¶–µ–ª–∏"');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ 3 –ø–ª–∞–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∞–ø—ã –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤:', error);
  }
}

createTestGoals();
