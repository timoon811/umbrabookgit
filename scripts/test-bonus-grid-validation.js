const fetch = require('node-fetch');

async function testBonusGridValidation() {
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –ò –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í\n');
  
  const authToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI";
  
  const testCases = [
    {
      name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π",
      data: {
        type: "bonusGrid",
        settings: {
          minAmount: -100,
          maxAmount: 100,
          bonusPercentage: 1.0,
          description: "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞"
        }
      },
      shouldFail: true
    },
    {
      name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º",
      data: {
        type: "bonusGrid", 
        settings: {
          minAmount: 100,
          maxAmount: 200,
          bonusPercentage: -1.0,
          description: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"
        }
      },
      shouldFail: true
    },
    {
      name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã (–æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)",
      data: {
        type: "bonusGrid",
        settings: {
          minAmount: 10000,
          maxAmount: null,
          bonusPercentage: 5.0,
          description: "–û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω $10000+"
        }
      },
      shouldFail: false,
      cleanup: true
    },
    {
      name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –º–∏–Ω–∏–º—É–º –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞",
      data: {
        type: "bonusGrid",
        settings: {
          minAmount: 2000,
          maxAmount: 1000,
          bonusPercentage: 2.0,
          description: "–ú–∏–Ω–∏–º—É–º > –ú–∞–∫—Å–∏–º—É–º"
        }
      },
      shouldFail: true
    },
    {
      name: "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º",
      data: {
        type: "bonusGrid",
        settings: {
          minAmount: 50000,
          maxAmount: 100000,
          bonusPercentage: 99.9,
          description: "–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç"
        }
      },
      shouldFail: false,
      cleanup: true
    }
  ];

  const createdIds = [];

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\nüß™ –¢–ï–°–¢ ${i + 1}: ${testCase.name}`);
    
    try {
      const response = await fetch('http://localhost:3000/api/admin/bonus-settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `auth-token=${authToken}`
        },
        body: JSON.stringify(testCase.data)
      });

      const result = await response.json();

      if (testCase.shouldFail) {
        if (!response.ok) {
          console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${result.error || '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞'}`);
        } else {
          console.log(`‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è`);
          console.log(`   –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: ${result.id}`);
          createdIds.push(result.id); // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        }
      } else {
        if (response.ok) {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –∑–∞–ø–∏—Å—å`);
          console.log(`   ID: ${result.id}`);
          console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω: $${result.minAmount}-${result.maxAmount || '‚àû'}`);
          console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç: ${result.bonusPercentage}%`);
          
          if (testCase.cleanup) {
            createdIds.push(result.id);
          }
        } else {
          console.log(`‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è`);
          console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
  if (createdIds.length > 0) {
    console.log(`\nüßπ –û—á–∏—Å—Ç–∫–∞ ${createdIds.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...`);
    
    for (const id of createdIds) {
      try {
        const deleteResponse = await fetch(`http://localhost:3000/api/admin/bonus-settings?type=bonusGrid&id=${id}`, {
          method: 'DELETE',
          headers: { 'Cookie': `auth-token=${authToken}` }
        });
        
        if (deleteResponse.ok) {
          console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ${id}`);
        } else {
          console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ${id}`);
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${id}: ${error.message}`);
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
  console.log('\nüìù –¢–ï–°–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ó–ê–ü–ò–°–ò:');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const getResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
      method: 'GET',
      headers: { 'Cookie': `auth-token=${authToken}` }
    });
    
    const getData = await getResponse.json();
    
    if (getData.bonusGrids && getData.bonusGrids.length > 0) {
      const firstRecord = getData.bonusGrids[0];
      const originalPercentage = firstRecord.bonusPercentage;
      
      console.log(`   –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å: $${firstRecord.minAmount}-${firstRecord.maxAmount || '‚àû'}`);
      console.log(`   –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${originalPercentage}%`);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
      const tempPercentage = originalPercentage + 0.1;
      
      const updateResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `auth-token=${authToken}`
        },
        body: JSON.stringify({
          type: "bonusGrid",
          id: firstRecord.id,
          updates: {
            bonusPercentage: tempPercentage
          }
        })
      });
      
      if (updateResponse.ok) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ ${tempPercentage}%`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        const restoreResponse = await fetch('http://localhost:3000/api/admin/bonus-settings', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': `auth-token=${authToken}`
          },
          body: JSON.stringify({
            type: "bonusGrid",
            id: firstRecord.id,
            updates: {
              bonusPercentage: originalPercentage
            }
          })
        });
        
        if (restoreResponse.ok) {
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ${originalPercentage}%`);
        } else {
          console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç`);
        }
      } else {
        const updateError = await updateResponse.json();
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${updateError.error}`);
      }
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }

  console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:');
  console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('   ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ë–û–ù–£–°–ù–û–ô –°–ï–¢–ö–ò –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!');
}

testBonusGridValidation();
