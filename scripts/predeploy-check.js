#!/usr/bin/env node

/**
 * –ü—Ä–µ–¥–¥–µ–ø–ª–æ–π–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è Umbra Platform
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç: node scripts/predeploy-check.js
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–†–ï–î–î–ï–ü–õ–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê UMBRA PLATFORM\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∏
const checks = {
  'üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤': () => {
    const requiredFiles = [
      'package.json',
      'next.config.js',
      'tailwind.config.js',
      'tsconfig.json',
      'prisma/schema.prisma',
      '.env.example',
      'README_DEPLOY.md'
    ];

    let allExist = true;
    requiredFiles.forEach(file => {
      if (!fs.existsSync(path.join(__dirname, '..', file))) {
        console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
        allExist = false;
      }
    });

    if (allExist) {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    return allExist;
  },

  'üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏': () => {
    const packageJson = require('../package.json');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const conflicts = [];
    if (packageJson.dependencies.bcrypt && packageJson.dependencies.bcryptjs) {
      conflicts.push('bcrypt –∏ bcryptjs –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    }

    if (conflicts.length > 0) {
      console.log(`‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${conflicts.join(', ')}`);
      return false;
    }

    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    return true;
  },

  'üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è': () => {
    const nextConfig = require('../next.config.js');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ production –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const hasCompiler = nextConfig.compiler?.removeConsole !== undefined;
    const hasImagesConfig = nextConfig.images?.remotePatterns !== undefined;

    if (!hasCompiler) {
      console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞');
    }

    if (!hasImagesConfig) {
      console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    }

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    return true;
  },

  'üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': () => {
    const schemaPath = path.join(__dirname, '..', 'prisma', 'schema.prisma');

    if (!fs.existsSync(schemaPath)) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      return false;
    }

    const schema = fs.readFileSync(schemaPath, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ enum TransactionType
    if (!schema.includes('enum TransactionType')) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç enum TransactionType');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    const hasIndexes = schema.includes('@@index');
    if (!hasIndexes) {
      console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    return true;
  },

  'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': () => {
    const authLib = path.join(__dirname, '..', 'src', 'lib', 'auth.ts');

    if (!fs.existsSync(authLib)) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return false;
    }

    const authCode = fs.readFileSync(authLib, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ JWT_SECRET
    if (!authCode.includes('export const JWT_SECRET')) {
      console.log('‚ùå JWT_SECRET –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è');
      return false;
    }

    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    return true;
  },

  'üé® –¢–µ–º—ã –∏ —Å—Ç–∏–ª–∏': () => {
    const components = [
      'AdminHeader.tsx',
      'AdminSidebar.tsx',
      'AuthenticatedHome.tsx',
      'ThemeToggle.tsx'
    ];

    let allHaveThemes = true;
    components.forEach(component => {
      const componentPath = path.join(__dirname, '..', 'src', 'components', component);
      if (fs.existsSync(componentPath)) {
        const content = fs.readFileSync(componentPath, 'utf8');
        if (!content.includes('dark:')) {
          console.log(`‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component} –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É`);
        }
      }
    });

    console.log('‚úÖ –°—Ç–∏–ª–∏ –∏ —Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    return true;
  }
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
let allPassed = true;

Object.entries(checks).forEach(([name, check]) => {
  console.log(`\nüîç ${name}:`);
  const passed = check();
  if (!passed) {
    allPassed = false;
  }
});

console.log('\n' + '='.repeat(50));

if (allPassed) {
  console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
  console.log('üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é');
  process.exit(0);
} else {
  console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–®–õ–ò');
  console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º');
  process.exit(1);
}
