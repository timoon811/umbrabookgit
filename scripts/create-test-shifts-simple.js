// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestShifts() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω...');

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const processor = await prisma.users.findFirst({
      where: { 
        role: 'PROCESSOR',
        status: 'APPROVED'
      }
    });

    if (!processor) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${processor.name} (${processor.email})`);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω
    const today = new Date();
    today.setUTCHours(6, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC+3

    const testShifts = [
      {
        processorId: processor.id,
        shiftType: 'MORNING',
        shiftDate: new Date(today),
        scheduledStart: new Date(today.getTime()),
        scheduledEnd: new Date(today.getTime() + 8 * 60 * 60 * 1000), // +8 —á–∞—Å–æ–≤
        status: 'COMPLETED',
        actualStart: new Date(today.getTime() + 5 * 60 * 1000), // +5 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏–µ
        actualEnd: new Date(today.getTime() + 8 * 60 * 60 * 1000 - 10 * 60 * 1000), // -10 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ–Ω–∞ - —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞'
      },
      {
        processorId: processor.id,
        shiftType: 'DAY',
        shiftDate: new Date(today.getTime() - 24 * 60 * 60 * 1000), // –í—á–µ—Ä–∞
        scheduledStart: new Date(today.getTime() - 24 * 60 * 60 * 1000 + 14 * 60 * 60 * 1000), // 14:00
        scheduledEnd: new Date(today.getTime() - 24 * 60 * 60 * 1000 + 22 * 60 * 60 * 1000), // 22:00
        status: 'COMPLETED',
        actualStart: new Date(today.getTime() - 24 * 60 * 60 * 1000 + 14 * 60 * 60 * 1000),
        actualEnd: new Date(today.getTime() - 24 * 60 * 60 * 1000 + 22 * 60 * 60 * 1000),
        notes: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–º–µ–Ω–∞'
      },
      {
        processorId: processor.id,
        shiftType: 'NIGHT',
        shiftDate: new Date(today.getTime() - 48 * 60 * 60 * 1000), // –ü–æ–∑–∞–≤—á–µ—Ä–∞
        scheduledStart: new Date(today.getTime() - 48 * 60 * 60 * 1000 + 22 * 60 * 60 * 1000), // 22:00
        scheduledEnd: new Date(today.getTime() - 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000), // 06:00 —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        status: 'MISSED',
        notes: null
      }
    ];

    let created = 0;
    for (const shift of testShifts) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–º–µ–Ω–∞
      const existing = await prisma.processor_shifts.findFirst({
        where: {
          processorId: shift.processorId,
          shiftType: shift.shiftType,
          shiftDate: shift.shiftDate
        }
      });

      if (!existing) {
        await prisma.processor_shifts.create({
          data: shift
        });
        created++;
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${created} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const total = await prisma.processor_shifts.count();
    console.log(`üìä –í—Å–µ–≥–æ —Å–º–µ–Ω –≤ –±–∞–∑–µ: ${total}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestShifts();
