const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createGoalsTables() {
  try {
    console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –°–ò–°–¢–ï–ú–´ –ü–õ–ê–ù–û–í\n');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ raw SQL
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');

    // –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ —Ü–µ–ª–µ–π
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "goal_types" (
        "id" TEXT NOT NULL,
        "name" TEXT NOT NULL,
        "description" TEXT,
        "unit" TEXT NOT NULL,
        "type" TEXT NOT NULL,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "goal_types_pkey" PRIMARY KEY ("id")
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–æ–≤/—Ü–µ–ª–µ–π
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "user_goals" (
        "id" TEXT NOT NULL,
        "name" TEXT NOT NULL,
        "description" TEXT,
        "goalTypeId" TEXT NOT NULL,
        "periodType" TEXT NOT NULL DEFAULT 'DAILY',
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "user_goals_pkey" PRIMARY KEY ("id")
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ —ç—Ç–∞–ø–æ–≤ –ø–ª–∞–Ω–æ–≤
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "goal_stages" (
        "id" TEXT NOT NULL,
        "goalId" TEXT NOT NULL,
        "stage" INTEGER NOT NULL,
        "targetValue" DECIMAL(10,2) NOT NULL,
        "rewardAmount" DECIMAL(10,2) NOT NULL,
        "title" TEXT NOT NULL,
        "description" TEXT,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "goal_stages_pkey" PRIMARY KEY ("id")
      );
    `;

    // –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "user_goal_achievements" (
        "id" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "goalId" TEXT NOT NULL,
        "stageId" TEXT NOT NULL,
        "achievedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "achievedValue" DECIMAL(10,2) NOT NULL,
        "rewardAmount" DECIMAL(10,2) NOT NULL,
        "period" TEXT NOT NULL,
        "isRewarded" BOOLEAN NOT NULL DEFAULT false,
        "rewardedAt" TIMESTAMP(3),
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "user_goal_achievements_pkey" PRIMARY KEY ("id")
      );
    `;

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    console.log('üîó –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏...');

    try {
      await prisma.$executeRaw`
        ALTER TABLE "user_goals" 
        ADD CONSTRAINT "user_goals_goalTypeId_fkey" 
        FOREIGN KEY ("goalTypeId") REFERENCES "goal_types"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "goal_stages" 
        ADD CONSTRAINT "goal_stages_goalId_fkey" 
        FOREIGN KEY ("goalId") REFERENCES "user_goals"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "user_goal_achievements" 
        ADD CONSTRAINT "user_goal_achievements_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "user_goal_achievements" 
        ADD CONSTRAINT "user_goal_achievements_goalId_fkey" 
        FOREIGN KEY ("goalId") REFERENCES "user_goals"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    try {
      await prisma.$executeRaw`
        ALTER TABLE "user_goal_achievements" 
        ADD CONSTRAINT "user_goal_achievements_stageId_fkey" 
        FOREIGN KEY ("stageId") REFERENCES "goal_stages"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìá –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');

    try {
      await prisma.$executeRaw`
        CREATE INDEX IF NOT EXISTS "goal_stages_goalId_stage_idx" ON "goal_stages"("goalId", "stage");
      `;
      await prisma.$executeRaw`
        CREATE INDEX IF NOT EXISTS "user_goal_achievements_userId_period_idx" ON "user_goal_achievements"("userId", "period");
      `;
      await prisma.$executeRaw`
        CREATE UNIQUE INDEX IF NOT EXISTS "goal_stages_goalId_stage_key" ON "goal_stages"("goalId", "stage");
      `;
      await prisma.$executeRaw`
        CREATE UNIQUE INDEX IF NOT EXISTS "user_goal_achievements_userId_stageId_period_key" ON "user_goal_achievements"("userId", "stageId", "period");
      `;
    } catch (e) {
      // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    }

    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

    console.log('\nüéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞–Ω–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞–Ω–æ–≤
    const goalTypes = [
      {
        id: 'earnings-goal',
        name: '–ü–ª–∞–Ω –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
        description: '–¶–µ–ª–∏ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—É–º–º–µ',
        unit: '$',
        type: 'EARNINGS'
      },
      {
        id: 'deposits-goal',
        name: '–ü–ª–∞–Ω –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
        description: '–¶–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
        unit: '—à—Ç',
        type: 'DEPOSITS_COUNT'
      },
      {
        id: 'hours-goal',
        name: '–ü–ª–∞–Ω –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã',
        description: '–¶–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤',
        unit: '—á',
        type: 'HOURS'
      }
    ];

    for (const goalType of goalTypes) {
      await prisma.$executeRaw`
        INSERT INTO "goal_types" ("id", "name", "description", "unit", "type", "isActive", "createdAt", "updatedAt")
        VALUES (${goalType.id}, ${goalType.name}, ${goalType.description}, ${goalType.unit}, ${goalType.type}, true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        ON CONFLICT ("id") DO NOTHING;
      `;
      console.log(`   ‚úÖ ${goalType.name} (${goalType.unit})`);
    }

    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–õ–ê–ù–û–í –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createGoalsTables();
