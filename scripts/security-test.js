#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–∞
 */

const https = require('https');
const http = require('http');

const BASE_URL = process.env.TEST_URL || 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {},
    };

    if (options.cookies) {
      requestOptions.headers.Cookie = options.cookies;
    }

    const req = client.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
          url: url
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(options.body);
    }

    req.end();
  });
}

// –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async function runSecurityTests() {
  console.log('üîí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...\n');

  const tests = [
    {
      name: '–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/admin`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/admin`, {
          headers: {
            Cookie: 'auth-token=invalid_token_here'
          }
        });
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/api/admin/users`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/api/admin/users`, {
          headers: {
            Cookie: 'auth-token=invalid_token_here'
          }
        });
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É–±–ª–∏—á–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/login`);
        return response.statusCode === 200;
      }
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/profile`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/docs`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å–∞–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      test: async () => {
        const response = await makeRequest(`${BASE_URL}/courses`);
        return response.statusCode === 307 && response.headers.location?.includes('/login');
      }
    }
  ];

  let passedTests = 0;
  let totalTests = tests.length;

  for (const test of tests) {
    try {
      console.log(`üß™ ${test.name}...`);
      const result = await test.test();
      
      if (result) {
        console.log(`‚úÖ –ü–†–û–ô–î–ï–ù: ${test.name}`);
        passedTests++;
      } else {
        console.log(`‚ùå –ü–†–û–í–ê–õ–ï–ù: ${test.name}`);
      }
    } catch (error) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: ${test.name} - ${error.message}`);
    }
    console.log('');
  }

  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests} –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:');
    console.log('   ‚úÖ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ /login');
    console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ /admin');
    console.log('   ‚úÖ –í—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('   ‚úÖ API –º–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∑–∞—â–∏—â–µ–Ω—ã');
    process.exit(0);
  } else {
    console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runSecurityTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = { runSecurityTests, makeRequest };
