const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function calculateMonthlyBonuses() {
  try {
    console.log('üí∞ –†–ê–°–ß–ï–¢ –ú–ï–°–Ø–ß–ù–´–• –ë–û–ù–£–°–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã
    const monthlyPlans = await prisma.salary_monthly_bonus.findMany({
      where: { isActive: true },
      orderBy: { minAmount: 'desc' } // –û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    });

    if (monthlyPlans.length === 0) {
      console.log('‚ùå –ú–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log('üìã –ê–ö–¢–ò–í–ù–´–ï –ü–õ–ê–ù–´:');
    monthlyPlans.forEach((plan, index) => {
      console.log(`   ${index + 1}. ${plan.name}: $${plan.minAmount.toLocaleString()} ‚Üí +${plan.bonusPercent}%`);
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const managers = await prisma.users.findMany({
      where: { 
        role: 'PROCESSOR',
        status: 'APPROVED'
      }
    });

    console.log(`\nüë• –ù–∞–π–¥–µ–Ω–æ ${managers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤`);

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);

    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${startOfMonth.toISOString().split('T')[0]} - ${endOfMonth.toISOString().split('T')[0]}`);

    const results = [];

    for (const manager of managers) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞ –º–µ—Å—è—Ü
      const deposits = await prisma.processor_deposits.findMany({
        where: {
          processorId: manager.id,
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth
          }
        }
      });

      const totalMonthlyVolume = deposits.reduce((sum, deposit) => sum + deposit.amount, 0);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω (–Ω–∞–∏–±–æ–ª—å—à–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π)
      let applicablePlan = null;
      for (const plan of monthlyPlans) {
        if (totalMonthlyVolume >= plan.minAmount) {
          applicablePlan = plan;
          break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
        }
      }

      const monthlyBonusAmount = applicablePlan 
        ? (totalMonthlyVolume * applicablePlan.bonusPercent / 100)
        : 0;

      results.push({
        manager,
        totalMonthlyVolume,
        applicablePlan,
        monthlyBonusAmount,
        depositsCount: deposits.length
      });
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê:');
    console.log('‚ïê'.repeat(80));

    results.forEach((result, index) => {
      const { manager, totalMonthlyVolume, applicablePlan, monthlyBonusAmount, depositsCount } = result;
      
      console.log(`${index + 1}. ${manager.name} (${manager.email})`);
      console.log(`   üìà –û–±—ä–µ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤: $${totalMonthlyVolume.toLocaleString()} (${depositsCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤)`);
      
      if (applicablePlan) {
        console.log(`   ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–ª–∞–Ω: ${applicablePlan.name}`);
        console.log(`   üí∞ –ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å: $${monthlyBonusAmount.toFixed(2)} (+${applicablePlan.bonusPercent}%)`);
      } else {
        console.log(`   ‚ùå –ü–ª–∞–Ω—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã`);
        console.log(`   üí∞ –ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å: $0.00`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–ª–∞–Ω
        const nextPlan = monthlyPlans[monthlyPlans.length - 1]; // –°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø–ª–∞–Ω
        if (nextPlan) {
          const remaining = nextPlan.minAmount - totalMonthlyVolume;
          console.log(`   üéØ –î–æ –ø–ª–∞–Ω–∞ "${nextPlan.name}": $${remaining.toLocaleString()}`);
        }
      }
      console.log('');
    });

    // –°–≤–æ–¥–∫–∞
    const totalBonusesAmount = results.reduce((sum, r) => sum + r.monthlyBonusAmount, 0);
    const managersWithBonuses = results.filter(r => r.monthlyBonusAmount > 0).length;

    console.log('üìã –°–í–û–î–ö–ê:');
    console.log(`   üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏: ${managersWithBonuses} –∏–∑ ${results.length}`);
    console.log(`   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –º–µ—Å—è—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: $${totalBonusesAmount.toFixed(2)}`);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏
    console.log('\nüßÆ –ü–†–ò–ú–ï–†–´ –õ–û–ì–ò–ö–ò:');
    console.log('   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ù–ï –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è):');
    console.log('   ‚Ä¢ $25,000 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ‚Üí –ü–ª–∞–Ω 20K (0.5%) = $125');
    console.log('   ‚Ä¢ $35,000 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ‚Üí –ü–ª–∞–Ω 30K (1.0%) = $350 (–ù–ï $125 + $175)');
    console.log('   ‚Ä¢ $15,000 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ‚Üí –ù–µ—Ç –ø–ª–∞–Ω–æ–≤ = $0');

    return results;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Å—è—á–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (require.main === module) {
  calculateMonthlyBonuses();
}

module.exports = { calculateMonthlyBonuses };
