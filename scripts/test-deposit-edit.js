console.log('üß™ –¢–ï–°–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í\n');

const https = require('https');
const http = require('http');
const url = require('url');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function runTest() {
  try {
    console.log('üîç 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const depositsResponse = await makeRequest('/api/admin/deposits?limit=5');
    
    if (depositsResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsResponse.data);
      return;
    }

    const deposits = depositsResponse.data.deposits;
    if (!deposits || deposits.length === 0) {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      const newDeposit = await makeRequest('/api/manager/deposits', 'POST', {
        amount: 999,
        currency: 'USDT_TRC20',
        playerEmail: 'test-edit@example.com',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        walletAddress: 'test-wallet-address'
      });
      
      if (newDeposit.status !== 200) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:', newDeposit.data);
        return;
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω');
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const updatedResponse = await makeRequest('/api/admin/deposits?limit=5');
      if (updatedResponse.status === 200) {
        deposits.push(...updatedResponse.data.deposits);
      }
    }

    if (deposits.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testDeposit = deposits.find(d => d.playerEmail === 'test-edit@example.com') || deposits[0];
    console.log(`üìä –í—ã–±—Ä–∞–Ω –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`   ID: ${testDeposit.id}`);
    console.log(`   –°—É–º–º–∞: $${testDeposit.amount}`);
    console.log(`   –í–∞–ª—é—Ç–∞: ${testDeposit.currency}`);
    console.log(`   Email: ${testDeposit.playerEmail}`);

    console.log('\n‚úèÔ∏è  2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞...');
    
    const updateData = {
      amount: 1500,
      currency: 'BTC',
      playerEmail: 'updated-test@example.com',
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞',
      notes: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      walletAddress: 'updated-wallet-address',
      paymentMethod: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
    };

    const updateResponse = await makeRequest(
      `/api/admin/deposits/manage?depositId=${testDeposit.id}`, 
      'PUT', 
      updateData
    );

    if (updateResponse.status === 200) {
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      const updated = updateResponse.data.deposit;
      console.log(`   –°—É–º–º–∞: $${updated.amount} (–±—ã–ª–æ: $${testDeposit.amount})`);
      console.log(`   –í–∞–ª—é—Ç–∞: ${updated.currency} (–±—ã–ª–æ: ${testDeposit.currency})`);
      console.log(`   Email: ${updated.playerEmail} (–±—ã–ª–æ: ${testDeposit.playerEmail})`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${updated.description || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`   –ó–∞–º–µ—Ç–∫–∏: ${updated.notes || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
      console.log(`   –ö–æ—à–µ–ª–µ–∫: ${updated.walletAddress || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`   –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${updated.paymentMethod || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', updateResponse.data);
    }

    console.log('\nüóëÔ∏è  3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)...');
    
    const invalidData = {
      amount: -100, // –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
      currency: '', // –ü—É—Å—Ç–∞—è –≤–∞–ª—é—Ç–∞
      playerEmail: 'invalid-email' // –ù–µ–≤–µ—Ä–Ω—ã–π email
    };

    const validationResponse = await makeRequest(
      `/api/admin/deposits/manage?depositId=${testDeposit.id}`, 
      'PUT', 
      invalidData
    );

    if (validationResponse.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   –û—à–∏–±–∫–∞: ${validationResponse.data.error}`);
    } else {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
    }

    console.log('\nüéØ 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ —Å–ø–∏—Å–∫–µ...');
    
    const finalCheck = await makeRequest('/api/admin/deposits?limit=10');
    if (finalCheck.status === 200) {
      const updatedDeposit = finalCheck.data.deposits.find(d => d.id === testDeposit.id);
      if (updatedDeposit && updatedDeposit.playerEmail === 'updated-test@example.com') {
        console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      } else {
        console.log('‚ö†Ô∏è  –î–µ–ø–æ–∑–∏—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)');
      }
    }

    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('\nüìã –ß–¢–û –ë–´–õ–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û:');
    console.log('   ‚úÖ –≠–º–æ–¥–∑–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ SVG –∏–∫–æ–Ω–∫–∏');
    console.log('   ‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–æ–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    console.log('   ‚úÖ API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ');
    
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('   http://localhost:3000/admin/management ‚Üí –≤–∫–ª–∞–¥–∫–∞ "–î–µ–ø–æ–∑–∏—Ç—ã"');
    console.log('   –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

runTest();
