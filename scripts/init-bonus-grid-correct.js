const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function initializeBonusGrid() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏...');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏
    await prisma.bonus_grid.deleteMany({});
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã
    const shiftTypes = ['MORNING', 'DAY', 'NIGHT'];
    
    const bonusRules = [
      { minAmount: 0, maxAmount: 499, percentage: 0 },      // –î–æ $500 - 0%
      { minAmount: 500, maxAmount: 999, percentage: 0.5 },   // $500-999 - 0.5%
      { minAmount: 1000, maxAmount: 1499, percentage: 1.5 }, // $1000-1499 - 1.5%
      { minAmount: 1500, maxAmount: 1999, percentage: 2.0 }, // $1500-1999 - 2%
      { minAmount: 2000, maxAmount: 2999, percentage: 2.5 }, // $2000-2999 - 2.5%
      { minAmount: 3000, maxAmount: null, percentage: 3.0 }  // $3000+ - 3%
    ];

    for (const shiftType of shiftTypes) {
      for (const rule of bonusRules) {
        await prisma.bonus_grid.create({
          data: {
            shiftType: shiftType,
            minAmount: rule.minAmount,
            maxAmount: rule.maxAmount,
            bonusPercentage: rule.percentage,
            description: `${rule.minAmount}${rule.maxAmount ? `-${rule.maxAmount}` : '+'} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ‚Üí ${rule.percentage}%`,
            isActive: true
          }
        });
      }
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å–º–µ–Ω:');
    bonusRules.forEach(rule => {
      console.log(`   üí∞ $${rule.minAmount}${rule.maxAmount ? `-$${rule.maxAmount}` : '+'} ‚Üí ${rule.percentage}%`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalGrids = await prisma.bonus_grid.count();
    console.log(`\nüìä –°–æ–∑–¥–∞–Ω–æ ${totalGrids} –∑–∞–ø–∏—Å–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏`);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ (–±–µ–∑ baseBonusRate)
    await prisma.bonus_settings.deleteMany({});
    await prisma.bonus_settings.create({
      data: {
        name: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤',
        baseCommissionRate: 30.0,
        tiers: JSON.stringify(bonusRules),
        isActive: true
      }
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ (–±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

initializeBonusGrid();
