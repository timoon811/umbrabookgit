console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ú–ï–¢–†–ò–ö –ú–ï–ù–ï–î–ñ–ï–†–ê\n');

const https = require('https');
const http = require('http');
const url = require('url');

async function fetchAPI(endpoint) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'auth-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          reject(e);
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function runTest() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const stats = await fetchAPI('/api/manager/stats-detailed');

    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ï–¢–†–ò–ö:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ   –ü–µ—Ä–∏–æ–¥       ‚îÇ  –ó–∞—Ä–∞–±–æ—Ç–æ–∫  ‚îÇ    –ß–∞—Å—ã     ‚îÇ –î–µ–ø–æ–∑–∏—Ç—ã   ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log(`‚îÇ –°–µ–≥–æ–¥–Ω—è        ‚îÇ  $${stats.performance.today.earnings.toFixed(2).padStart(8)} ‚îÇ   ${stats.performance.today.hours.toFixed(1).padStart(7)} ‚îÇ    ${stats.performance.today.deposits.toString().padStart(6)} ‚îÇ`);
    console.log(`‚îÇ –ù–µ–¥–µ–ª—è         ‚îÇ  $${stats.performance.week.earnings.toFixed(2).padStart(8)} ‚îÇ   ${stats.performance.week.hours.toFixed(1).padStart(7)} ‚îÇ    ${stats.performance.week.deposits.toString().padStart(6)} ‚îÇ`);
    console.log(`‚îÇ –ú–µ—Å—è—Ü          ‚îÇ  $${stats.performance.month.earnings.toFixed(2).padStart(8)} ‚îÇ   ${stats.performance.month.hours.toFixed(1).padStart(7)} ‚îÇ    ${stats.performance.month.deposits.toString().padStart(6)} ‚îÇ`);
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    console.log('\nüéØ –ü–†–û–ì–ù–û–ó–´:');
    console.log(`   ‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: $${stats.projections.monthlyEarnings.toFixed(2)}`);
    console.log(`   ‚Ä¢ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: ${stats.projections.remainingDays}`);
    console.log(`   ‚Ä¢ –î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: $${stats.projections.dailyTarget.toFixed(2)}`);
    console.log(`   ‚Ä¢ –ù–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏: ${stats.projections.onTrack ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    console.log('\nüìà –¶–ï–õ–ò –ù–ê –ú–ï–°–Ø–¶:');
    console.log(`   ‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: $${stats.goals.monthly.earnings} (${stats.goals.progress.earnings.toFixed(1)}%)`);
    console.log(`   ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${stats.goals.monthly.deposits} (${stats.goals.progress.deposits.toFixed(1)}%)`);
    console.log(`   ‚Ä¢ –ß–∞—Å—ã: ${stats.goals.monthly.hours} (${stats.goals.progress.hours.toFixed(1)}%)`);

    console.log('\nüèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:');
    console.log(`   ‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: ${stats.goals.achievements.earningsAchieved ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${stats.goals.achievements.depositsAchieved ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –ß–∞—Å—ã: ${stats.goals.achievements.hoursAchieved ? '‚úÖ' : '‚ùå'}`);

    console.log('\nü•á –†–ï–ô–¢–ò–ù–ì:');
    console.log(`   ‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: #${stats.currentUserRank}`);
    if (stats.leaderboard.length > 0) {
      stats.leaderboard.forEach((manager, index) => {
        const indicator = manager.isCurrentUser ? 'üëë' : '  ';
        console.log(`   ${indicator} ${index + 1}. ${manager.name} - $${manager.earnings.toFixed(2)} (${manager.deposits} –¥–µ–ø.)`);
      });
    }

    console.log('\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò:');
    console.log(`   ‚Ä¢ –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: $${stats.settings.hourlyRate}/—á–∞—Å`);
    console.log(`   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${stats.settings.baseCommission}%`);
    console.log(`   ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã—Ö —Å–µ—Ç–æ–∫: ${stats.settings.bonusGrids.length}`);

    if (stats.settings.bonusGrids.length > 0) {
      console.log('\nüí∞ –ë–û–ù–£–°–ù–ê–Ø –°–ï–¢–ö–ê:');
      stats.settings.bonusGrids.forEach(grid => {
        const range = grid.maxAmount ? `$${grid.minAmount}-$${grid.maxAmount}` : `$${grid.minAmount}+`;
        console.log(`   ‚Ä¢ ${range.padEnd(15)} ‚Üí ${grid.bonusPercentage}%`);
      });
    }

    console.log('\nüéâ –í–°–ï –ú–ï–¢–†–ò–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3000/management');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

runTest();
