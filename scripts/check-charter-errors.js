#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ charAt –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ charAt...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π charAt
try {
  const result = execSync('grep -r "\\.charAt(" src/ --include="*.tsx" --include="*.ts" || true', { encoding: 'utf8' });
  
  if (result.trim()) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è charAt:');
    console.log(result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–∏ –æ–Ω–∏ getUserInitial
    const lines = result.split('\n').filter(line => line.trim());
    let hasUnsafeUsage = false;
    
    lines.forEach(line => {
      if (line.includes('.charAt(') && !line.includes('getUserInitial') && !line.includes('trimmedName.charAt')) {
        console.log(`‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${line}`);
        hasUnsafeUsage = true;
      }
    });
    
    if (!hasUnsafeUsage) {
      console.log('‚úÖ –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è charAt –≤—ã–≥–ª—è–¥—è—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏');
    }
  } else {
    console.log('‚úÖ –ü—Ä—è–º—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π charAt –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
} catch (error) {
  console.log('‚ÑπÔ∏è  Grep –Ω–µ –Ω–∞—à–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π charAt');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ getUserInitial
try {
  const result = execSync('grep -r "getUserInitial" src/ --include="*.tsx" --include="*.ts" || true', { encoding: 'utf8' });
  
  if (result.trim()) {
    const lines = result.split('\n').filter(line => line.trim());
    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lines.length} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π getUserInitial`);
  }
} catch (error) {
  console.log('‚ö†Ô∏è  getUserInitial –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
try {
  const result = execSync('grep -r "import.*getUserInitial" src/ --include="*.tsx" --include="*.ts" || true', { encoding: 'utf8' });
  
  if (result.trim()) {
    const lines = result.split('\n').filter(line => line.trim());
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ getUserInitial`);
  }
} catch (error) {
  console.log('‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç—ã getUserInitial –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
console.log('\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç...');
try {
  execSync('npm test src/utils/__tests__/userUtils.test.ts src/__tests__/integration/user-avatar.test.tsx', { stdio: 'inherit' });
  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
} catch (error) {
  console.log('‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
  process.exit(1);
}

console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–µ–∫—Ç –∑–∞—â–∏—â–µ–Ω –æ—Ç –æ—à–∏–±–æ–∫ charAt.');
