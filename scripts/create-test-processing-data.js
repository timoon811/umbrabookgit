const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createTestProcessingData() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏...');

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
    
    let processor = await prisma.users.findFirst({
      where: { role: 'PROCESSOR' }
    });

    if (!processor) {
      const hashedPassword = await bcrypt.hash('processor123', 10);
      processor = await prisma.users.create({
        data: {
          email: 'processor@test.com',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
          password: hashedPassword,
          telegram: '@test_processor',
          role: 'PROCESSOR',
          status: 'APPROVED',
          isBlocked: false,
        }
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:', processor.email);
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:', processor.email);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    console.log('üí∞ –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã...');
    
    let salarySettings = await prisma.salary_settings.findFirst({
      where: { isActive: true }
    });

    if (!salarySettings) {
      salarySettings = await prisma.salary_settings.create({
        data: {
          name: '–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ó–ü',
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤',
          hourlyRate: 2.5,
          isActive: true,
        }
      });
    }

    // 3. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç–Ω—É—é —Å–µ—Ç–∫—É
    console.log('üìä –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç–Ω—É—é —Å–µ—Ç–∫—É...');
    
    const existingGrid = await prisma.salary_deposit_grid.findFirst();
    if (!existingGrid) {
      const depositGridData = [
        { minAmount: 0, maxAmount: 500, percentage: 0.5, description: '$0-500: 0.5%' },
        { minAmount: 500, maxAmount: 1000, percentage: 1.0, description: '$500-1000: 1.0%' },
        { minAmount: 1000, maxAmount: 1500, percentage: 1.5, description: '$1000-1500: 1.5%' },
        { minAmount: 1500, maxAmount: 2000, percentage: 2.0, description: '$1500-2000: 2.0%' },
        { minAmount: 2000, maxAmount: 3000, percentage: 2.5, description: '$2000-3000: 2.5%' },
        { minAmount: 3000, maxAmount: null, percentage: 3.0, description: '$3000+: 3.0%' },
      ];

      for (const grid of depositGridData) {
        await prisma.salary_deposit_grid.create({
          data: {
            salarySettingsId: salarySettings.id,
            minAmount: grid.minAmount,
            maxAmount: grid.maxAmount,
            percentage: grid.percentage,
            description: grid.description,
            isActive: true,
          }
        });
      }
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞');
    }

    // 4. –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –±–æ–Ω—É—Å—ã
    console.log('üéØ –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã...');
    
    const existingMonthly = await prisma.salary_monthly_bonus.findFirst();
    if (!existingMonthly) {
      const monthlyBonuses = [
        { name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞–Ω', minAmount: 20000, bonusPercent: 2.0, description: '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å' },
        { name: '–°—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω', minAmount: 30000, bonusPercent: 3.0, description: '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç' },
        { name: '–í—ã—Å–æ–∫–∏–π –ø–ª–∞–Ω', minAmount: 50000, bonusPercent: 5.0, description: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞' },
        { name: '–≠–ª–∏—Ç–Ω—ã–π –ø–ª–∞–Ω', minAmount: 100000, bonusPercent: 10.0, description: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç' },
      ];

      for (const bonus of monthlyBonuses) {
        await prisma.salary_monthly_bonus.create({
          data: {
            name: bonus.name,
            description: bonus.description,
            minAmount: bonus.minAmount,
            bonusPercent: bonus.bonusPercent,
            isActive: true,
          }
        });
      }
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã');
    }

    // 5. –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
    console.log('‚è∞ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã...');
    
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã
    await prisma.processor_shifts.deleteMany({
      where: { processorId: processor.id }
    });

    const shiftTypes = ['MORNING', 'DAY', 'NIGHT'];
    const shifts = [];

    for (let i = 0; i < 25; i++) {
      const shiftDate = new Date(thirtyDaysAgo.getTime() + i * 24 * 60 * 60 * 1000);
      const shiftType = shiftTypes[i % shiftTypes.length];
      
      let startHour, endHour;
      switch (shiftType) {
        case 'MORNING': startHour = 6; endHour = 14; break;
        case 'DAY': startHour = 14; endHour = 22; break;
        case 'NIGHT': startHour = 22; endHour = 6; break;
      }

      const actualStart = new Date(shiftDate);
      actualStart.setHours(startHour, 0, 0, 0);
      
      const actualEnd = new Date(shiftDate);
      if (shiftType === 'NIGHT') {
        actualEnd.setDate(actualEnd.getDate() + 1);
      }
      actualEnd.setHours(endHour, 0, 0, 0);

      const shift = await prisma.processor_shifts.create({
        data: {
          processorId: processor.id,
          shiftType: shiftType,
          shiftDate: shiftDate,
          scheduledStart: actualStart,
          scheduledEnd: actualEnd,
          actualStart: actualStart,
          actualEnd: actualEnd,
          status: 'COMPLETED',
          notes: `–¢–µ—Å—Ç–æ–≤–∞—è ${shiftType.toLowerCase()} —Å–º–µ–Ω–∞`,
        }
      });
      shifts.push(shift);
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${shifts.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω`);

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('üíé –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    await prisma.processor_deposits.deleteMany({
      where: { processorId: processor.id }
    });

    const currencies = ['USDT_TRC20', 'BTC', 'ETH', 'USDT_ERC20', 'USDC', 'XRP'];
    const amounts = [150, 250, 500, 750, 1200, 1800, 2500, 3200, 4500, 6000];
    const emails = [
      'player1@example.com', 'player2@example.com', 'player3@example.com',
      'user1@test.com', 'user2@test.com', 'gamer1@email.com',
      'client1@domain.com', 'deposit@user.com'
    ];

    let totalDeposits = 0;
    for (let i = 0; i < shifts.length; i++) {
      const shift = shifts[i];
      const depositsInShift = Math.floor(Math.random() * 8) + 2; // 2-9 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–º–µ–Ω—É
      
      for (let j = 0; j < depositsInShift; j++) {
        const amount = amounts[Math.floor(Math.random() * amounts.length)];
        const currency = currencies[Math.floor(Math.random() * currencies.length)];
        const email = emails[Math.floor(Math.random() * emails.length)];
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
        const depositTime = new Date(shift.actualStart.getTime() + 
          Math.random() * (shift.actualEnd.getTime() - shift.actualStart.getTime()));

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–∏
        const shiftSum = amount; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç
        let bonusRate = 0.5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (shiftSum >= 3000) bonusRate = 3.0;
        else if (shiftSum >= 2000) bonusRate = 2.5;
        else if (shiftSum >= 1500) bonusRate = 2.0;
        else if (shiftSum >= 1000) bonusRate = 1.5;
        else if (shiftSum >= 500) bonusRate = 1.0;

        const bonusAmount = (amount * bonusRate) / 100;

        await prisma.processor_deposits.create({
          data: {
            processorId: processor.id,
            playerId: `player_${Date.now()}_${j}`,
            playerNick: `Player${Math.floor(Math.random() * 1000)}`,
            playerEmail: email,
            amount: amount,
            currency: currency,
            currencyType: currency.includes('USD') ? 'FIAT' : 'CRYPTO',
            paymentMethod: currency,
            leadSource: 'website',
            proofs: `Proof for $${amount} ${currency}`,
            notes: `–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç #${totalDeposits + 1}`,
            status: Math.random() > 0.1 ? 'APPROVED' : 'PENDING', // 90% –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            commissionRate: 30.0,
            bonusRate: bonusRate,
            bonusAmount: bonusAmount,
            createdAt: depositTime,
            updatedAt: depositTime,
          }
        });
        totalDeposits++;
      }
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${totalDeposits} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

    // 7. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É
    console.log('üí∏ –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏
    await prisma.salary_requests.deleteMany({
      where: { processorId: processor.id }
    });

    const salaryStatuses = ['PENDING', 'APPROVED', 'PAID'];
    const salaryAmounts = [150, 250, 350, 500, 750, 1000];

    for (let i = 0; i < 8; i++) {
      const requestDate = new Date(thirtyDaysAgo.getTime() + i * 3 * 24 * 60 * 60 * 1000);
      const amount = salaryAmounts[Math.floor(Math.random() * salaryAmounts.length)];
      const status = salaryStatuses[Math.floor(Math.random() * salaryStatuses.length)];
      
      const periodStart = new Date(requestDate);
      periodStart.setDate(1); // –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
      const periodEnd = new Date(requestDate.getFullYear(), requestDate.getMonth() + 1, 0); // –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞

      await prisma.salary_requests.create({
        data: {
          processorId: processor.id,
          periodStart: periodStart,
          periodEnd: periodEnd,
          requestedAmount: amount,
          calculatedAmount: amount * 1.1, // +10% –∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞
          paymentDetails: '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
          comment: `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #${i + 1}`,
          status: status,
          createdAt: requestDate,
          updatedAt: requestDate,
        }
      });
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ 8 –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É');

    // 8. –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
    console.log('üìù –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    await prisma.processor_action_logs.deleteMany({
      where: { processorId: processor.id }
    });

    const actions = [
      { action: 'SHIFT_START', description: '–ù–∞—á–∞–ª —Å–º–µ–Ω—É' },
      { action: 'SHIFT_END', description: '–ó–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É' },
    ];

    for (let i = 0; i < 50; i++) {
      const logDate = new Date(thirtyDaysAgo.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000);
      const randomAction = actions[Math.floor(Math.random() * actions.length)];

      await prisma.processor_action_logs.create({
        data: {
          processorId: processor.id,
          action: randomAction.action,
          description: randomAction.description,
          metadata: JSON.stringify({ test: true, timestamp: logDate.toISOString() }),
          ipAddress: `192.168.1.${Math.floor(Math.random() * 255)}`,
          userAgent: 'Mozilla/5.0 (Test Browser)',
          createdAt: logDate,
        }
      });
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ 50 –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö –¥–µ–π—Å—Ç–≤–∏–π');

    // 9. –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
    console.log('üïê –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É...');
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const existingTodayShift = await prisma.processor_shifts.findFirst({
      where: {
        processorId: processor.id,
        shiftDate: today,
      }
    });

    if (!existingTodayShift) {
      const currentHour = new Date().getHours();
      let shiftType = 'MORNING';
      let startHour = 6;
      
      if (currentHour >= 14 && currentHour < 22) {
        shiftType = 'DAY';
        startHour = 14;
      } else if (currentHour >= 22 || currentHour < 6) {
        shiftType = 'NIGHT';
        startHour = 22;
      }

      const shiftStart = new Date();
      shiftStart.setHours(startHour, 0, 0, 0);
      
      await prisma.processor_shifts.create({
        data: {
          processorId: processor.id,
          shiftType: shiftType,
          shiftDate: today,
          scheduledStart: shiftStart,
          scheduledEnd: new Date(shiftStart.getTime() + 8 * 60 * 60 * 1000), // +8 —á–∞—Å–æ–≤
          actualStart: shiftStart,
          actualEnd: null,
          status: 'ACTIVE',
          notes: '–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞',
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è ${shiftType.toLowerCase()} —Å–º–µ–Ω–∞`);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìä –°–≤–æ–¥–∫–∞:');
    console.log(`üë§ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${processor.email}`);
    console.log(`‚è∞ –°–º–µ–Ω: ${shifts.length + 1} (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)`);
    console.log(`üíé –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits}`);
    console.log(`üí∏ –ó–∞—è–≤–æ–∫ –Ω–∞ –ó–ü: 8`);
    console.log(`üìù –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: 50`);
    console.log('\nüîó –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:');
    console.log(`Email: ${processor.email}`);
    console.log(`–ü–∞—Ä–æ–ª—å: processor123`);
    console.log('\n‚ú® –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createTestProcessingData();
