console.log('üí∞ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ï–ü–û–ó–ò–¢–û–í –î–õ–Ø –ú–ï–°–Ø–ß–ù–´–• –ü–õ–ê–ù–û–í\n');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

const http = require('http');
const url = require('url');

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function createTestDeposits() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const statsResponse = await makeRequest('/api/manager/stats-detailed');
    
    if (statsResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.data);
      return;
    }

    const currentVolume = statsResponse.data.performance.month.volume;
    console.log(`   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: $${currentVolume.toLocaleString()}`);

    // –ü–ª–∞–Ω—ã: $20,000 (0.5%) –∏ $30,000 (1%)
    const targetVolume = 32000; // –î–æ—Å—Ç–∏–≥–Ω–µ–º –ø–ª–∞–Ω 30K
    const neededVolume = Math.max(0, targetVolume - currentVolume);

    console.log(`   –¶–µ–ª—å: $${targetVolume.toLocaleString()}`);
    console.log(`   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: $${neededVolume.toLocaleString()}`);

    if (neededVolume <= 0) {
      console.log('‚úÖ –ü–ª–∞–Ω—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —á–∞—Å—Ç—è–º–∏
    const deposits = [
      { amount: 8000, currency: 'USDT_TRC20', email: 'plan-test-1@example.com' },
      { amount: 7000, currency: 'BTC', email: 'plan-test-2@example.com' },
      { amount: 6000, currency: 'ETH', email: 'plan-test-3@example.com' },
      { amount: 5000, currency: 'USDT_ERC20', email: 'plan-test-4@example.com' },
      { amount: 3000, currency: 'LTC', email: 'plan-test-5@example.com' }
    ];

    let totalAdded = 0;
    console.log('\nüí∏ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:');

    for (const [index, deposit] of deposits.entries()) {
      if (totalAdded >= neededVolume) break;

      const remainingNeeded = neededVolume - totalAdded;
      const actualAmount = Math.min(deposit.amount, remainingNeeded);

      const response = await makeRequest('/api/manager/deposits', 'POST', {
        amount: actualAmount,
        currency: deposit.currency,
        playerEmail: deposit.email,
        description: `–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (${actualAmount})`,
        walletAddress: `test-wallet-${index + 1}`
      });

      if (response.status === 200) {
        console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç ${index + 1}: $${actualAmount.toLocaleString()} (${deposit.currency})`);
        totalAdded += actualAmount;
      } else {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ ${index + 1}:`, response.data);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`\nüìà –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: $${totalAdded.toLocaleString()}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const finalStatsResponse = await makeRequest('/api/manager/stats-detailed');
    
    if (finalStatsResponse.status === 200) {
      const finalVolume = finalStatsResponse.data.performance.month.volume;
      console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: $${finalVolume.toLocaleString()}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –ø–ª–∞–Ω—ã
      if (finalVolume >= 30000) {
        console.log('   üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ü–ª–∞–Ω 30K (+1% –æ—Ç –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤)');
        console.log(`   üí∞ –ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å: $${(finalVolume * 0.01).toFixed(2)}`);
      } else if (finalVolume >= 20000) {
        console.log('   üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ü–ª–∞–Ω 20K (+0.5% –æ—Ç –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤)');
        console.log(`   üí∞ –ú–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å: $${(finalVolume * 0.005).toFixed(2)}`);
      } else {
        console.log('   ‚ùå –ü–ª–∞–Ω—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã');
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('   1. http://localhost:3000/management ‚Üí –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

createTestDeposits();
