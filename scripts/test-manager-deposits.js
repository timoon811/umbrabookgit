console.log('üß™ –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í –ú–ï–ù–ï–î–ñ–ï–†–ê\n');

const https = require('https');
const http = require('http');
const url = require('url');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function runTest() {
  try {
    console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const depositsResponse = await makeRequest('/api/manager/deposits?page=1&limit=20');
    
    if (depositsResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsResponse.data);
      return;
    }

    const { deposits, pagination } = depositsResponse.data;
    console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log(`üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.page} –∏–∑ ${pagination.pages}, –≤—Å–µ–≥–æ ${pagination.total}`);

    if (deposits.length > 0) {
      console.log('\nüìä –ü–†–ò–ú–ï–†–´ –î–ï–ü–û–ó–ò–¢–û–í:');
      deposits.slice(0, 3).forEach((deposit, index) => {
        console.log(`   ${index + 1}. ID: ${deposit.id.substring(0, 8)}...`);
        console.log(`      –°—É–º–º–∞: $${deposit.amount}`);
        console.log(`      –í–∞–ª—é—Ç–∞: ${deposit.currency}`);
        console.log(`      Email: ${deposit.playerEmail || deposit.playerId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${deposit.status}`);
        console.log(`      –î–∞—Ç–∞: ${new Date(deposit.createdAt).toLocaleString('ru-RU')}`);
        console.log('');
      });
    }

    console.log('üéØ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã...');
    const shiftResponse = await makeRequest('/api/manager/shifts');
    
    if (shiftResponse.status === 200) {
      const { shift, isActive } = shiftResponse.data;
      console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã: ${isActive ? '–ê–ö–¢–ò–í–ù–ê' : '–ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
      if (shift) {
        console.log(`   –¢–∏–ø —Å–º–µ–Ω—ã: ${shift.shiftType}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${shift.status}`);
      }
    } else {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ');
    }

    console.log('\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è deposits (–¥–æ–±–∞–≤–ª–µ–Ω setDeposits)');
    console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è loadDeposits()');
    console.log('   ‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    console.log('   ‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ');
    console.log('   ‚úÖ –£–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
    console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ JSX');

    console.log('\nüéØ –ß–¢–û –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨:');
    console.log(`   ‚Ä¢ –¢–∞–± "–î–µ–ø–æ–∑–∏—Ç—ã" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log('   ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–º–µ–Ω—ã');
    console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç" –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ');
    console.log('   ‚Ä¢ –ù–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫');
    console.log('   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è: –¥–∞—Ç–∞, email, —Å—É–º–º–∞, –≤–∞–ª—é—Ç–∞, —Å—Ç–∞—Ç—É—Å');

    console.log('\nüì± –ü–†–û–í–ï–†–ö–ê –í –ë–†–ê–£–ó–ï–†–ï:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/management');
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–î–µ–ø–æ–∑–∏—Ç—ã"');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    console.log('   4. –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç');
    console.log('   5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ');

    if (deposits.length === 0) {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      console.log('   –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   ‚Ä¢ –ï—Å—Ç—å –ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ processorId');
      console.log('   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
    } else {
      console.log('\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log('   –î–µ–ø–æ–∑–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

runTest();
