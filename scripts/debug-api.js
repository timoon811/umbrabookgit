const fetch = require('node-fetch');

async function debugAPI() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ API –¥–µ–ø–æ–∑–∏—Ç–æ–≤...\n');
    
    const authToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI";
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    const requests = [
      {
        name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        data: {
          amount: 100,
          currency: 'USDT_TRC20',
          playerEmail: 'test@example.com'
        }
      },
      {
        name: '–ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        data: {
          amount: 100,
          currency: 'USDT_TRC20',
          playerEmail: 'test@example.com',
          description: 'Test deposit',
          walletAddress: 'test-wallet'
        }
      }
    ];

    for (const req of requests) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${req.name}`);
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', JSON.stringify(req.data, null, 2));
      
      try {
        const response = await fetch('http://localhost:3000/api/manager/deposits', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': `auth-token=${authToken}`
          },
          body: JSON.stringify(req.data)
        });

        const text = await response.text();
        console.log(`üì• –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üì• –û—Ç–≤–µ—Ç: ${text}`);
        
        if (response.ok) {
          try {
            const json = JSON.parse(text);
            console.log(`‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            if (json.deposit) {
              console.log(`üí∞ –ë–æ–Ω—É—Å: $${json.deposit.bonusAmount || 0}`);
            }
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${e.message}`);
          }
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

debugAPI();
