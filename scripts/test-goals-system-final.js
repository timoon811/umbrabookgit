console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–õ–ê–ù–û–í\n');

const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI';

const http = require('http');
const url = require('url');

async function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const parsedUrl = url.parse(`http://localhost:3000${endpoint}`);
    const options = {
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      path: parsedUrl.path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function runFullSystemTest() {
  try {
    console.log('üîç 1. –¢–ï–°–¢ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò...');
    
    const adminResponse = await makeRequest('/api/admin/goals');
    if (adminResponse.status === 200) {
      const { goalTypes, goals } = adminResponse.data;
      console.log(`   ‚úÖ –¢–∏–ø—ã –ø–ª–∞–Ω–æ–≤: ${goalTypes.length}`);
      goalTypes.forEach(type => {
        console.log(`      ‚Ä¢ ${type.name} (${type.unit}) - ${type.type}`);
      });
      
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: ${goals.length}`);
      goals.forEach(goal => {
        console.log(`      ‚Ä¢ ${goal.name}: ${goal.stages.length} —ç—Ç–∞–ø–æ–≤`);
      });
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', adminResponse.data);
    }

    console.log('\nüìä 2. –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û API...');
    
    const userResponse = await makeRequest('/api/manager/goals');
    if (userResponse.status === 200) {
      const { goals, progress } = userResponse.data;
      console.log(`   ‚úÖ –ü–ª–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${goals.length}`);
      
      goals.forEach(goal => {
        console.log(`   üìã ${goal.name}:`);
        console.log(`      –¢–∏–ø: ${goal.goalTypeName} (${goal.periodType})`);
        console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${goal.currentValue}${goal.goalTypeUnit}`);
        console.log(`      –≠—Ç–∞–ø—ã: ${goal.completedStages}/${goal.totalStages} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        console.log(`      –ù–∞–≥—Ä–∞–¥–∞: $${goal.totalReward} –ø–æ–ª—É—á–µ–Ω–æ`);
        
        if (goal.nextStage) {
          console.log(`      –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: ${goal.nextStage.title} (${goal.nextStage.targetValue}${goal.goalTypeUnit} ‚Üí $${goal.nextStage.rewardAmount})`);
        }
        
        console.log('      –í—Å–µ —ç—Ç–∞–ø—ã:');
        goal.stages.forEach(stage => {
          const status = goal.currentValue >= stage.targetValue ? '‚úÖ' : '‚è≥';
          console.log(`         ${status} ${stage.title}: ${stage.targetValue}${goal.goalTypeUnit} ‚Üí $${stage.rewardAmount}`);
        });
        console.log('');
      });

      console.log('   üìà –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:');
      console.log(`      –°–µ–≥–æ–¥–Ω—è: $${progress.today.earnings}, ${progress.today.deposits} –¥–µ–ø–æ–∑–∏—Ç–æ–≤, ${progress.today.hours}—á`);
      console.log(`      –ù–µ–¥–µ–ª—è: $${progress.week.earnings}, ${progress.week.deposits} –¥–µ–ø–æ–∑–∏—Ç–æ–≤, ${progress.week.hours}—á`);
      console.log(`      –ú–µ—Å—è—Ü: $${progress.month.earnings}, ${progress.month.deposits} –¥–µ–ø–æ–∑–∏—Ç–æ–≤, ${progress.month.hours}—á`);
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ API:', userResponse.data);
    }

    console.log('\nüß™ 3. –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    const testGoal = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω API',
      description: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ API',
      goalTypeId: 'deposits-goal',
      periodType: 'DAILY',
      stages: [
        {
          targetValue: 5,
          rewardAmount: 3,
          title: '–¢–µ—Å—Ç 1',
          description: '5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤'
        },
        {
          targetValue: 15,
          rewardAmount: 8,
          title: '–¢–µ—Å—Ç 2',
          description: '15 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤'
        }
      ]
    };

    const createResponse = await makeRequest('/api/admin/goals', 'POST', testGoal);
    if (createResponse.status === 201) {
      console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
      
      const createdGoal = createResponse.data;
      console.log(`      ID: ${createdGoal.id}`);
      console.log(`      –≠—Ç–∞–ø—ã: ${createdGoal.stages.length}`);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
      const updateData = {
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω',
        stages: [
          ...testGoal.stages,
          {
            targetValue: 25,
            rewardAmount: 15,
            title: '–¢–µ—Å—Ç 3',
            description: '25 —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤'
          }
        ]
      };
      
      const updateResponse = await makeRequest(`/api/admin/goals/${createdGoal.id}`, 'PUT', updateData);
      if (updateResponse.status === 200) {
        console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
        console.log(`      –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${updateResponse.data.name}`);
        console.log(`      –≠—Ç–∞–ø—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateResponse.data.stages.length}`);
      } else {
        console.log('   ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
      const deleteResponse = await makeRequest(`/api/admin/goals/${createdGoal.id}`, 'DELETE');
      if (deleteResponse.status === 200) {
        console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –£–°–ü–ï–•');
      } else {
        console.log('   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
      }
    } else {
      console.log('   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: –û–®–ò–ë–ö–ê');
      console.log('       ', createResponse.data);
    }

    console.log('\nüìã –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚ïê'.repeat(60));
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ –¢–∏–ø—ã –ø–ª–∞–Ω–æ–≤: 3 —Ç–∏–ø–∞ (–∑–∞—Ä–∞–±–æ—Ç–æ–∫, –¥–µ–ø–æ–∑–∏—Ç—ã, —á–∞—Å—ã)');
    console.log('‚úÖ API –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: GET, POST, PUT, DELETE');
    console.log('‚úÖ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: GET —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º');
    console.log('‚úÖ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: –ª–µ—Å–µ–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥');
    console.log('‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã: –∑–∞ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø');
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');

    console.log('\nüéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:');
    console.log('   üìà –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–æ 10+ —ç—Ç–∞–ø–æ–≤');
    console.log('   üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø');
    console.log('   üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: –¥–Ω–µ–≤–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, –º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞–Ω—ã');
    console.log('   üé® –¢–∏–ø—ã –ø–ª–∞–Ω–æ–≤: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ ($), –¥–µ–ø–æ–∑–∏—Ç—ã (—à—Ç), —á–∞—Å—ã (—á)');
    console.log('   ‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: –Ω–∞–≥—Ä–∞–¥—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏');
    console.log('   üõ°Ô∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ä—è–¥–∫–∞ —ç—Ç–∞–ø–æ–≤');

    console.log('\nüåü –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:');
    console.log('   –ü–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–æ–≤: 10 ‚Üí $5, 25 ‚Üí $15, 50 ‚Üí $35, 100 ‚Üí $75');
    console.log('   –ü—Ä–∏ 50 –¥–µ–ø–æ–∑–∏—Ç–∞—Ö: $5 + $15 + $35 = $55 –æ–±—â–∏–π –±–æ–Ω—É—Å');
    console.log('   –ü–ª–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–∞: $100 ‚Üí $10, $250 ‚Üí $25, $500 ‚Üí $50');
    console.log('   –ü—Ä–∏ $250: $10 + $25 = $35 –æ–±—â–∏–π –±–æ–Ω—É—Å');

    console.log('\nüì± –ü–†–û–í–ï–†–ö–ê –í –ë–†–ê–£–ó–ï–†–ï:');
    console.log('   1. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ó–ü ‚Üí "–ü–ª–∞–Ω—ã –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"');
    console.log('   2. http://localhost:3000/management ‚Üí "–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤" ‚Üí "–ü–ª–∞–Ω—ã –∏ —Ü–µ–ª–∏"');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–ª–∞–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∞–ø—ã, –Ω–∞–≥—Ä–∞–¥—ã –∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å');

    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–õ–ê–ù–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

runFullSystemTest();
