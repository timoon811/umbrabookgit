const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testBonusCalculation() {
  try {
    console.log('üß™ –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤...\n');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ API
    const todaySum = 600; // –ü—Ä–∏–º–µ—Ä: –æ–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
    
    console.log(`üìä –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: $${todaySum}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É
    const bonusGrid = await prisma.bonus_grid.findFirst({
      where: {
        isActive: true,
        shiftType: 'MORNING',
        minAmount: { lte: todaySum },
        OR: [
          { maxAmount: { gte: todaySum } },
          { maxAmount: null }
        ]
      },
      orderBy: { bonusPercentage: "desc" }
    });

    console.log('\nüîç –ü–æ–∏—Å–∫ –≤ –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–µ:');
    if (bonusGrid) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç–∫–∞: $${bonusGrid.minAmount}-${bonusGrid.maxAmount || '‚àû'} ‚Üí ${bonusGrid.bonusPercentage}%`);
      
      const depositAmount = 100;
      const bonusAmount = (depositAmount * bonusGrid.bonusPercentage) / 100;
      
      console.log(`\nüí∞ –†–∞—Å—á–µ—Ç –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ $${depositAmount}:`);
      console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç: ${bonusGrid.bonusPercentage}%`);
      console.log(`   –ë–æ–Ω—É—Å: $${bonusAmount.toFixed(2)}`);
    } else {
      console.log('‚ùå –°–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∫–∏
    console.log('\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ —Å–µ—Ç–∫–∏:');
    const allGrids = await prisma.bonus_grid.findMany({
      where: { 
        isActive: true,
        shiftType: 'MORNING'
      },
      orderBy: { minAmount: 'asc' }
    });

    allGrids.forEach(grid => {
      console.log(`   $${grid.minAmount}-${grid.maxAmount || '‚àû'} ‚Üí ${grid.bonusPercentage}%`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã
    const testSums = [100, 500, 1000, 1500, 2000, 3000];
    
    console.log('\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º:');
    for (const sum of testSums) {
      const grid = await prisma.bonus_grid.findFirst({
        where: {
          isActive: true,
          shiftType: 'MORNING',
          minAmount: { lte: sum },
          OR: [
            { maxAmount: { gte: sum } },
            { maxAmount: null }
          ]
        },
        orderBy: { bonusPercentage: "desc" }
      });

      if (grid) {
        const bonus = (100 * grid.bonusPercentage) / 100; // –î–µ–ø–æ–∑–∏—Ç $100
        console.log(`   $${sum} –æ–±—â–∞—è —Å—É–º–º–∞ ‚Üí ${grid.bonusPercentage}% ‚Üí $${bonus.toFixed(2)} –±–æ–Ω—É—Å –∑–∞ –¥–µ–ø–æ–∑–∏—Ç $100`);
      } else {
        console.log(`   $${sum} –æ–±—â–∞—è —Å—É–º–º–∞ ‚Üí 0% ‚Üí $0.00 –±–æ–Ω—É—Å –∑–∞ –¥–µ–ø–æ–∑–∏—Ç $100`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testBonusCalculation();
