const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function initShiftSettings() {
  try {
    console.log('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const existingSettings = await prisma.shift_settings.findMany();
    
    if (existingSettings.length > 0) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      console.log('\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω:');
      existingSettings.forEach(setting => {
        const status = setting.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞';
        const timeRange = `${setting.startHour.toString().padStart(2, '0')}:${setting.startMinute.toString().padStart(2, '0')} - ${(setting.endHour >= 24 ? setting.endHour - 24 : setting.endHour).toString().padStart(2, '0')}:${setting.endMinute.toString().padStart(2, '0')}${setting.endHour >= 24 ? ' (+1 –¥–µ–Ω—å)' : ''}`;
        console.log(`  ${setting.shiftType}: ${timeRange} - ${status}`);
        console.log(`    –ù–∞–∑–≤–∞–Ω–∏–µ: ${setting.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${setting.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      });
      
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω
    const defaultShifts = [
      {
        shiftType: 'MORNING',
        startHour: 6,
        startMinute: 0,
        endHour: 14,
        endMinute: 0,
        timezone: '+3',
        isActive: true,
        name: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞',
        description: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ —Å 06:00 –¥–æ 14:00 –ø–æ UTC+3'
      },
      {
        shiftType: 'DAY',
        startHour: 14,
        startMinute: 0,
        endHour: 22,
        endMinute: 0,
        timezone: '+3',
        isActive: true,
        name: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞',
        description: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å 14:00 –¥–æ 22:00 –ø–æ UTC+3'
      },
      {
        shiftType: 'NIGHT',
        startHour: 22,
        startMinute: 0,
        endHour: 30, // 6:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        endMinute: 0,
        timezone: '+3',
        isActive: true,
        name: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞',
        description: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ —Å 22:00 –¥–æ 06:00 (+1 –¥–µ–Ω—å) –ø–æ UTC+3'
      }
    ];

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω...');
    
    for (const shift of defaultShifts) {
      await prisma.shift_settings.create({
        data: shift
      });
      
      const timeRange = `${shift.startHour.toString().padStart(2, '0')}:${shift.startMinute.toString().padStart(2, '0')} - ${(shift.endHour >= 24 ? shift.endHour - 24 : shift.endHour).toString().padStart(2, '0')}:${shift.endMinute.toString().padStart(2, '0')}${shift.endHour >= 24 ? ' (+1 –¥–µ–Ω—å)' : ''}`;
      console.log(`  ‚úÖ ${shift.shiftType}: ${timeRange}`);
    }

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã:');
    console.log('  üåÖ –£—Ç—Ä–µ–Ω–Ω—è—è: 06:00 - 14:00');
    console.log('  ‚òÄÔ∏è –î–Ω–µ–≤–Ω–∞—è:  14:00 - 22:00');
    console.log('  üåô –ù–æ—á–Ω–∞—è:   22:00 - 06:00 (+1 –¥–µ–Ω—å)');
    console.log('\nüí° –í—Å–µ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
    console.log('\nüîß –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
initShiftSettings();