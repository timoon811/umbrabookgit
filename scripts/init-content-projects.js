const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let documentationProject = await prisma.content_projects.findFirst({
      where: { name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' }
    });
    
    if (!documentationProject) {
      documentationProject = await prisma.content_projects.create({
        data: {
          name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
          description: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
          type: 'documentation',
          isActive: true
        }
      });
    }

    let coursesProject = await prisma.content_projects.findFirst({
      where: { name: '–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã' }
    });
    
    if (!coursesProject) {
      coursesProject = await prisma.content_projects.create({
        data: {
          name: '–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã',
          description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          type: 'courses',
          isActive: true
        }
      });
    }

    let materialsProject = await prisma.content_projects.findFirst({
      where: { name: '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' }
    });
    
    if (!materialsProject) {
      materialsProject = await prisma.content_projects.create({
        data: {
          name: '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã',
          type: 'materials',
          isActive: true
        }
      });
    }

    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω:', documentationProject.name);
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω:', coursesProject.name);
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω:', materialsProject.name);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∏—Ö –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    const existingSections = await prisma.documentation_sections.findMany({
      where: {
        projectId: null
      }
    });

    if (existingSections.length > 0) {
      await prisma.documentation_sections.updateMany({
        where: {
          projectId: null
        },
        data: {
          projectId: documentationProject.id
        }
      });

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${existingSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏`);
    }

    console.log('üéâ –ü—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();
