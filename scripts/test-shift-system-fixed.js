const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testShiftSystem() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω...\n');

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    const processor = await prisma.users.findFirst({
      where: { role: 'PROCESSOR' }
    });

    if (!processor) {
      console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ create-test-processing-data.js');
      return;
    }

    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${processor.email}\n`);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω
    console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω:');
    const shiftSettings = await prisma.shift_settings.findMany({
      where: { isActive: true },
      orderBy: { startHour: 'asc' }
    });

    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${shiftSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω:`);
    shiftSettings.forEach(setting => {
      const timeRange = `${setting.startHour.toString().padStart(2, '0')}:${setting.startMinute.toString().padStart(2, '0')} - ${(setting.endHour >= 24 ? setting.endHour - 24 : setting.endHour).toString().padStart(2, '0')}:${setting.endMinute.toString().padStart(2, '0')}${setting.endHour >= 24 ? ' (+1 –¥–µ–Ω—å)' : ''}`;
      console.log(`      ${setting.shiftType}: ${timeRange} - ${setting.name}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    console.log('\nüìÖ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ–Ω:');
    const existingShifts = await prisma.processor_shifts.findMany({
      where: { processorId: processor.id },
      orderBy: { shiftDate: 'desc' },
      take: 5
    });

    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingShifts.length} —Å–º–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏:`);
    existingShifts.forEach(shift => {
      const status = shift.status === 'COMPLETED' ? '‚úÖ' : 
                    shift.status === 'ACTIVE' ? 'üîÑ' : 
                    shift.status === 'MISSED' ? '‚ùå' : '‚è∏Ô∏è';
      
      const dateStr = new Date(shift.shiftDate).toLocaleDateString('ru-RU');
      const startTime = shift.actualStart ? 
        new Date(shift.actualStart).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : 
        '–ù–µ –Ω–∞—á–∞—Ç–∞';
      const endTime = shift.actualEnd ? 
        ` - ${new Date(shift.actualEnd).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}` : 
        shift.status === 'ACTIVE' ? ' - –í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '';
      
      console.log(`      ${status} ${dateStr} ${shift.shiftType}: ${startTime}${endTime}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
    console.log('\nüìù 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π:');
    const actionLogs = await prisma.processor_action_logs.findMany({
      where: { processorId: processor.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${actionLogs.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:`);
    actionLogs.forEach(log => {
      const dateStr = new Date(log.createdAt).toLocaleDateString('ru-RU');
      const timeStr = new Date(log.createdAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      console.log(`      üìã ${dateStr} ${timeStr}: ${log.description}`);
    });

    // 4. –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã
    console.log('\n‚è∞ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω:');
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞
    const now = new Date();
    const thirtyMinutesAgo = new Date(now.getTime() - 35 * 60 * 1000); // 35 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    
    const oldActiveShift = await prisma.processor_shifts.findFirst({
      where: {
        processorId: processor.id,
        status: 'ACTIVE',
        scheduledEnd: {
          lt: thirtyMinutesAgo // –°–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        }
      }
    });

    if (oldActiveShift) {
      console.log('   üîÑ –ù–∞–π–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      
      const thirtyMinutesAfterEnd = new Date(oldActiveShift.scheduledEnd.getTime() + 30 * 60 * 1000);
      
      await prisma.processor_shifts.update({
        where: { id: oldActiveShift.id },
        data: {
          actualEnd: thirtyMinutesAfterEnd,
          status: 'COMPLETED',
          notes: (oldActiveShift.notes || '') + ' [–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ 30 –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è]'
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await prisma.processor_action_logs.create({
        data: {
          processorId: processor.id,
          action: 'SHIFT_END',
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ${oldActiveShift.shiftType.toLowerCase()} —Å–º–µ–Ω–∞ - –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π`,
          metadata: JSON.stringify({ 
            shiftType: oldActiveShift.shiftType, 
            autoEnded: true,
            originalEndTime: oldActiveShift.scheduledEnd,
            actualEndTime: thirtyMinutesAfterEnd
          }),
          ipAddress: '127.0.0.1',
          userAgent: 'System Auto-End Script'
        }
      });

      console.log('   ‚úÖ –°–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π');
    } else {
      console.log('   ‚ÑπÔ∏è –ù–µ—Ç —Å–º–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–º–µ–Ω —á–µ—Ä–µ–∑ API
    console.log('\nüîó 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω:');
    
    const availableShiftsCount = await prisma.shift_settings.count({
      where: { isActive: true }
    });

    console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ ${availableShiftsCount} —Ç–∏–ø–æ–≤ —Å–º–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è`);
    console.log('   üìå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–º–µ–Ω—ã');

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('\nüîí 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã:');
    
    const todayStart = new Date();
    todayStart.setUTCHours(6, 0, 0, 0);
    
    const todayShift = await prisma.processor_shifts.findFirst({
      where: {
        processorId: processor.id,
        shiftDate: todayStart
      }
    });

    if (todayShift) {
      console.log('   ‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å —Å–º–µ–Ω–∞ - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ');
      console.log(`      –°–º–µ–Ω–∞: ${todayShift.shiftType} (${todayShift.status})`);
    } else {
      console.log('   ‚ÑπÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω –Ω–µ—Ç - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:');
    console.log('   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚úÖ –°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ');
    console.log('   ‚úÖ –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç');
    console.log('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testShiftSystem();
