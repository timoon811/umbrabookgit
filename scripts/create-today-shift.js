const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTodayShift() {
  try {
    // –ù–∞–π–¥–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.users.findUnique({
      where: { email: 'admin@umbra-platform.dev' }
    });

    if (!admin) {
      console.error('–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      process.exit(1);
    }

    console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω:', admin.name, admin.email);

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞)
    const now = new Date();
    const start = new Date(now.getTime() - 4 * 60 * 60 * 1000); // 4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    const end = new Date(now.getTime() - 30 * 60 * 1000);       // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

    console.log('\n‚è∞ –°–æ–∑–¥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–º–µ–Ω—É:');
    console.log('  –ù–∞—á–∞–ª–æ:', start.toISOString());
    console.log('  –ö–æ–Ω–µ—Ü:', end.toISOString());
    console.log('  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3.5 —á–∞—Å–∞');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayShift = await prisma.processor_shifts.create({
      data: {
        processorId: admin.id,
        shiftType: 'DAY',
        shiftDate: now,
        scheduledStart: start,
        scheduledEnd: end,
        actualStart: start,
        actualEnd: end,
        status: 'COMPLETED',
        notes: '–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫'
      }
    });

    console.log('\n‚úÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞:', todayShift.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    const durationMs = end - start;
    const durationHours = durationMs / (1000 * 60 * 60);
    const earnings = durationHours * 2; // $2/—á–∞—Å

    console.log('\nüí∞ –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞:');
    console.log('  –ß–∞—Å—ã:', durationHours.toFixed(2));
    console.log('  –ó–∞—Ä–∞–±–æ—Ç–æ–∫ ($2/—á–∞—Å):', earnings.toFixed(2));

    console.log('\nüéØ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫!');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTodayShift();
