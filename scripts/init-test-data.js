const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const bonusSettings = await prisma.bonus_settings.findFirst({
      where: { isActive: true }
    });

    if (!bonusSettings) {
      await prisma.bonus_settings.create({
        data: {
          name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
          description: '–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤',
          baseCommissionRate: 30.0,
          baseBonusRate: 5.0,
          tiers: JSON.stringify([
            { minAmount: 0, maxAmount: 1000, rate: 5.0 },
            { minAmount: 1000, maxAmount: 5000, rate: 7.5 },
            { minAmount: 5000, maxAmount: null, rate: 10.0 }
          ]),
          isActive: true
        }
      });
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
    } else {
      console.log('‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestData();
