const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function testDepositBonus(amount, expectedBonus, description) {
  try {
    console.log(`\nüß™ –¢–ï–°–¢: ${description}`);
    console.log(`   –î–µ–ø–æ–∑–∏—Ç: $${amount}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–æ–Ω—É—Å: $${expectedBonus}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const authToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIwNTY5NDRhNy04MDVlLTQ2YzctYjM2YS1hMmNlZjg2NWZjYzUiLCJlbWFpbCI6ImFkbWluQHVtYnJhLXBsYXRmb3JtLmRldiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTc1NzkzNTA1NiwiZXhwIjoxNzU4NTM5ODU2fQ.HpTkverzCks7Bc7fybajzv0qTuWWaSDF4PfSgJhPpoI";
    
    const response = await fetch('http://localhost:3000/api/manager/deposits', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': `auth-token=${authToken}`
      },
      body: JSON.stringify({
        amount: amount,
        currency: 'USDT_TRC20',
        playerEmail: 'test@example.com',
        description: `–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç $${amount}`,
        walletAddress: 'test-wallet-address'
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      const actualBonus = result.deposit?.bonusAmount || 0;
      const status = Math.abs(actualBonus - expectedBonus) < 0.01 ? '‚úÖ PASSED' : '‚ùå FAILED';
      
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å: $${actualBonus.toFixed(2)}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${status}`);
      
      if (result.todayTotal) {
        console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: $${result.todayTotal}`);
      }
      
      return {
        passed: Math.abs(actualBonus - expectedBonus) < 0.01,
        expected: expectedBonus,
        actual: actualBonus,
        todayTotal: result.todayTotal
      };
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${result.error}`);
      return { passed: false, error: result.error };
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
    return { passed: false, error: error.message };
  }
}

async function runBonusTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤ –ø–æ —Å–µ—Ç–∫–µ\n');
  console.log('üìã –ë–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞:');
  console.log('   ‚Ä¢ $0-499 ‚Üí 0%');
  console.log('   ‚Ä¢ $500-999 ‚Üí 0.5%');
  console.log('   ‚Ä¢ $1000-1499 ‚Üí 1.5%');
  console.log('   ‚Ä¢ $1500-1999 ‚Üí 2%');
  console.log('   ‚Ä¢ $2000-2999 ‚Üí 2.5%');
  console.log('   ‚Ä¢ $3000+ ‚Üí 3%');
  
  const tests = [
    // –¢–µ—Å—Ç 1: –î–µ–ø–æ–∑–∏—Ç $100 (–¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å 0%)
    { amount: 100, expected: 0, description: '–î–µ–ø–æ–∑–∏—Ç $100 - –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ $500' },
    
    // –¢–µ—Å—Ç 2: –î–µ–ø–æ–∑–∏—Ç $500 (–¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å 0.5%)
    { amount: 500, expected: 2.5, description: '–î–µ–ø–æ–∑–∏—Ç $500 - 0.5% –±–æ–Ω—É—Å' },
    
    // –¢–µ—Å—Ç 3: –î–µ–ø–æ–∑–∏—Ç $1000 –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö (–æ–±—â–∞—è —Å—É–º–º–∞ $1600, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2%)
    { amount: 1000, expected: 20, description: '–î–µ–ø–æ–∑–∏—Ç $1000 –ø–æ—Å–ª–µ $600 (–æ–±—â–∞—è $1600) - 2% –±–æ–Ω—É—Å' },
    
    // –¢–µ—Å—Ç 4: –î–µ–ø–æ–∑–∏—Ç $500 –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö (–æ–±—â–∞—è —Å—É–º–º–∞ $2100, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2.5%)
    { amount: 500, expected: 12.5, description: '–î–µ–ø–æ–∑–∏—Ç $500 –ø–æ—Å–ª–µ $1600 (–æ–±—â–∞—è $2100) - 2.5% –±–æ–Ω—É—Å' },
    
    // –¢–µ—Å—Ç 5: –î–µ–ø–æ–∑–∏—Ç $1000 –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö (–æ–±—â–∞—è —Å—É–º–º–∞ $3100, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3%)
    { amount: 1000, expected: 30, description: '–î–µ–ø–æ–∑–∏—Ç $1000 –ø–æ—Å–ª–µ $2100 (–æ–±—â–∞—è $3100) - 3% –±–æ–Ω—É—Å' }
  ];
  
  const results = [];
  let totalPassed = 0;
  
  for (let i = 0; i < tests.length; i++) {
    const test = tests[i];
    const result = await testDepositBonus(test.amount, test.expected, test.description);
    results.push(result);
    
    if (result.passed) {
      totalPassed++;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}/${tests.length}`);
  console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${(totalPassed / tests.length * 100).toFixed(1)}%`);
  
  if (totalPassed === tests.length) {
    console.log(`\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
  } else {
    console.log(`\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã.`);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º fetch –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

runBonusTests();
