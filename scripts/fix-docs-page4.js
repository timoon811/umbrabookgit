const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createOrUpdatePage4() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã page-4...');

    let page4 = await prisma.documentation.findFirst({
      where: { slug: 'page-4' }
    });

    if (page4) {
      console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ page-4 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', page4.title);

      // –û–±–Ω–æ–≤–ª—è–µ–º –µ—ë, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∏ –ø–µ—Ä–≤–æ–π
      await prisma.documentation.update({
        where: { id: page4.id },
        data: {
          isPublished: true,
          order: -1, // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–π –ø–æ –ø–æ—Ä—è–¥–∫—É
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Umbra Platform'
        }
      });
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ page-4 –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–¥–µ–ª–∞–Ω–∞ –ø–µ—Ä–≤–æ–π');
    } else {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É page-4...');

      // –ü–æ–ª—É—á–∞–µ–º ID —Å–µ–∫—Ü–∏–∏ welcome
      const welcomeSection = await prisma.documentation_sections.findFirst({
        where: { key: 'welcome' }
      });

      if (!welcomeSection) {
        console.error('‚ùå –°–µ–∫—Ü–∏—è welcome –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      page4 = await prisma.documentation.create({
        data: {
          title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Umbra Platform',
          description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Umbra Platform',
          slug: 'page-4',
          content: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Umbra Platform

Umbra Platform - —ç—Ç–æ –º–æ—â–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.

## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
- **–ö—É—Ä—Å—ã**: –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- **API**: –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
2. –ü—Ä–æ–π–¥–∏—Ç–µ –∫—É—Ä—Å—ã
3. –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ`,
          sectionId: welcomeSection.id,
          order: -1, // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–π
          isPublished: true
        }
      });

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ page-4:', page4.title);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const allDocs = await prisma.documentation.findMany({
      where: { isPublished: true },
      select: { title: true, slug: true, order: true },
      orderBy: [
        { order: 'asc' },
        { createdAt: 'asc' }
      ]
    });

    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü:');
    allDocs.forEach((doc, index) => {
      console.log(`${index + 1}. ${doc.title} (slug: ${doc.slug}, order: ${doc.order})`);
    });

    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

createOrUpdatePage4();
