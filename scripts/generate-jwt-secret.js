#!/usr/bin/env node

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è UmbraPL
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

function generateSecureSecret(length = 64) {
  return crypto.randomBytes(length).toString('hex');
}

function validateSecret(secret) {
  const issues = [];
  
  if (secret.length < 32) {
    issues.push('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)');
  }
  
  if (secret.length < 64) {
    issues.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 64+ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  }
  
  const unsafePatterns = [
    'umbra_platform_super_secret_jwt_key_2024',
    'CHANGE_THIS_IN_PRODUCTION',
    'secret',
    'jwt_secret',
    'your-secret-key',
    'default'
  ];
  
  const foundUnsafe = unsafePatterns.find(pattern => 
    secret.toLowerCase().includes(pattern.toLowerCase())
  );
  
  if (foundUnsafe) {
    issues.push(`–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: "${foundUnsafe}"`);
  }
  
  return issues;
}

function updateEnvFile(newSecret) {
  const envPath = path.join(process.cwd(), '.env.local');
  
  try {
    let envContent = '';
    
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
    }
    
    if (envContent.includes('JWT_SECRET=')) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∫—Ä–µ—Ç
      envContent = envContent.replace(
        /JWT_SECRET=.*/,
        `JWT_SECRET="${newSecret}"`
      );
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç
      envContent += `\n# JWT Secret (auto-generated)\nJWT_SECRET="${newSecret}"\n`;
    }
    
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ JWT_SECRET –æ–±–Ω–æ–≤–ª–µ–Ω –≤ ${envPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env.local: ${error.message}`);
    console.log(`\nüìã –î–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ .env.local:\nJWT_SECRET="${newSecret}"`);
  }
}

function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JWT —Å–µ–∫—Ä–µ—Ç–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node scripts/generate-jwt-secret.js [options]

–û–ü–¶–ò–ò:
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  --length N      –î–ª–∏–Ω–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 64)
  --validate      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π JWT_SECRET
  --update        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å .env.local
  --show-only     –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç (–Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª)

–ü–†–ò–ú–ï–†–´:
  node scripts/generate-jwt-secret.js --show-only
  node scripts/generate-jwt-secret.js --update
  node scripts/generate-jwt-secret.js --validate
  node scripts/generate-jwt-secret.js --length 128
    `);
    return;
  }
  
  if (args.includes('--validate')) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ JWT_SECRET...\n');
    
    const currentSecret = process.env.JWT_SECRET;
    
    if (!currentSecret) {
      console.log('‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/generate-jwt-secret.js --update');
      return;
    }
    
    const issues = validateSecret(currentSecret);
    
    if (issues.length === 0) {
      console.log('‚úÖ JWT_SECRET —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      console.log(`   –î–ª–∏–Ω–∞: ${currentSecret.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    } else {
      console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å JWT_SECRET:');
      issues.forEach(issue => console.log(`   - ${issue}`));
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: --update');
    }
    
    return;
  }
  
  const lengthArg = args.find(arg => arg.startsWith('--length'));
  const length = lengthArg ? parseInt(lengthArg.split('=')[1] || args[args.indexOf(lengthArg) + 1]) : 64;
  
  if (isNaN(length) || length < 16) {
    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞. –ú–∏–Ω–∏–º—É–º: 16 –±–∞–π—Ç');
    return;
  }
  
  console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ JWT —Å–µ–∫—Ä–µ—Ç–∞...\n');
  
  const newSecret = generateSecureSecret(length);
  
  console.log('‚úÖ –ù–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JWT —Å–µ–∫—Ä–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
  console.log(`üìè –î–ª–∏–Ω–∞: ${length} –±–∞–π—Ç (${newSecret.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
  console.log(`üîë –°–µ–∫—Ä–µ—Ç: ${newSecret}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
  const issues = validateSecret(newSecret);
  if (issues.length === 0) {
    console.log('üõ°Ô∏è  –°–µ–∫—Ä–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  } else {
    console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
    issues.forEach(issue => console.log(`   - ${issue}`));
  }
  
  if (args.includes('--update')) {
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env.local...');
    updateEnvFile(newSecret);
  } else if (!args.includes('--show-only')) {
    console.log('\nüí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env.local –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --update');
    console.log('üí° –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤—Ä—É—á–Ω—É—é –≤ –≤–∞—à .env.local —Ñ–∞–π–ª');
  }
  
  console.log('\nüîí –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!');
  console.log('üö´ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if (!fs.existsSync('package.json')) {
  console.error('‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

main();
