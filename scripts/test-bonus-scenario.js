const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testBonusScenario() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–æ–Ω—É—Å–æ–≤: —Å–µ–≥–æ–¥–Ω—è $800, –∑–∞–≤—Ç—Ä–∞ $1200\n');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const now = new Date();
    const utcNow = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è –ø–æ UTC (00:00:00)
    const todayStart = new Date(utcNow);
    todayStart.setUTCHours(0, 0, 0, 0);
    
    // –í—á–µ—Ä–∞ (–Ω–∞—á–∞–ª–æ –¥–Ω—è)
    const yesterdayStart = new Date(todayStart);
    yesterdayStart.setUTCDate(yesterdayStart.getUTCDate() - 1);
    
    // –ó–∞–≤—Ç—Ä–∞ (–Ω–∞—á–∞–ª–æ –¥–Ω—è)
    const tomorrowStart = new Date(todayStart);
    tomorrowStart.setUTCDate(tomorrowStart.getUTCDate() + 1);
    
    console.log('üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:');
    console.log(`   - –í—á–µ—Ä–∞: ${yesterdayStart.toISOString()}`);
    console.log(`   - –°–µ–≥–æ–¥–Ω—è: ${todayStart.toISOString()}`);
    console.log(`   - –ó–∞–≤—Ç—Ä–∞: ${tomorrowStart.toISOString()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É
    const bonusGrids = await prisma.bonus_grid.findMany({
      where: { isActive: true },
      orderBy: { minAmount: 'asc' }
    });
    
    console.log('\nüí∞ –ë–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞:');
    bonusGrids.forEach((grid, index) => {
      console.log(`   ${index + 1}. $${grid.minAmount} - ${grid.maxAmount ? `$${grid.maxAmount}` : '‚àû'} = ${grid.bonusPercentage}%`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: —Å–µ–≥–æ–¥–Ω—è $800, –∑–∞–≤—Ç—Ä–∞ $1200
    console.log('\nüéØ –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:');
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–µ–≥–æ–¥–Ω—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã–ª $800
    console.log('\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–µ–≥–æ–¥–Ω—è $800');
    const today800 = 800;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Ç–∫—É –¥–ª—è $800
    const gridFor800 = bonusGrids.find(grid => 
      today800 >= grid.minAmount && (!grid.maxAmount || today800 <= grid.maxAmount)
    );
    
    if (gridFor800) {
      const bonusFor800 = (today800 * gridFor800.bonusPercentage) / 100;
      console.log(`   - –°—É–º–º–∞: $${today800}`);
      console.log(`   - –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–µ—Ç–∫–∞: $${gridFor800.minAmount} - ${gridFor800.maxAmount ? `$${gridFor800.maxAmount}` : '‚àû'} = ${gridFor800.bonusPercentage}%`);
      console.log(`   - –ë–æ–Ω—É—Å: $${bonusFor800.toFixed(2)}`);
      console.log(`   - –ò—Ç–æ–≥–æ: $${(today800 + bonusFor800).toFixed(2)}`);
    }
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–≤—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã–ª $1200
    console.log('\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–≤—Ç—Ä–∞ $1200');
    const tomorrow1200 = 1200;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Ç–∫—É –¥–ª—è $1200
    const gridFor1200 = bonusGrids.find(grid => 
      tomorrow1200 >= grid.minAmount && (!grid.maxAmount || tomorrow1200 <= grid.maxAmount)
    );
    
    if (gridFor1200) {
      const bonusFor1200 = (tomorrow1200 * gridFor1200.bonusPercentage) / 100;
      console.log(`   - –°—É–º–º–∞: $${tomorrow1200}`);
      console.log(`   - –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–µ—Ç–∫–∞: $${gridFor1200.minAmount} - ${gridFor1200.maxAmount ? `$${gridFor1200.maxAmount}` : '‚àû'} = ${gridFor1200.bonusPercentage}%`);
      console.log(`   - –ë–æ–Ω—É—Å: $${bonusFor1200.toFixed(2)}`);
      console.log(`   - –ò—Ç–æ–≥–æ: $${(tomorrow1200 + bonusFor1200).toFixed(2)}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ 24-—á–∞—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞:');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
    const testDeposits = [
      { amount: 300, day: '–≤—á–µ—Ä–∞', time: '14:00 UTC' },
      { amount: 500, day: '–≤—á–µ—Ä–∞', time: '18:00 UTC' },
      { amount: 800, day: '—Å–µ–≥–æ–¥–Ω—è', time: '09:00 UTC' },
      { amount: 400, day: '—Å–µ–≥–æ–¥–Ω—è', time: '15:00 UTC' },
      { amount: 1200, day: '–∑–∞–≤—Ç—Ä–∞', time: '10:00 UTC' }
    ];
    
    console.log('   - –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ –¥–Ω—è–º:');
    testDeposits.forEach(deposit => {
      console.log(`     ${deposit.day} ${deposit.time}: $${deposit.amount}`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    const depositsByDay = {
      '–≤—á–µ—Ä–∞': testDeposits.filter(d => d.day === '–≤—á–µ—Ä–∞').reduce((sum, d) => sum + d.amount, 0),
      '—Å–µ–≥–æ–¥–Ω—è': testDeposits.filter(d => d.day === '—Å–µ–≥–æ–¥–Ω—è').reduce((sum, d) => sum + d.amount, 0),
      '–∑–∞–≤—Ç—Ä–∞': testDeposits.filter(d => d.day === '–∑–∞–≤—Ç—Ä–∞').reduce((sum, d) => sum + d.amount, 0)
    };
    
    console.log('\n   - –°—É–º–º—ã –ø–æ –¥–Ω—è–º:');
    Object.entries(depositsByDay).forEach(([day, total]) => {
      console.log(`     ${day}: $${total}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('\n‚úÖ –í—ã–≤–æ–¥:');
    console.log('   - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å (00:00:00 UTC) —Å–∏—Å—Ç–µ–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫');
    console.log('   - –ë–æ–Ω—É—Å—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è');
    console.log('   - –°–µ–≥–æ–¥–Ω—è $800 = 5% –±–æ–Ω—É—Å (–±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞)');
    console.log('   - –ó–∞–≤—Ç—Ä–∞ $1200 = 7.5% –±–æ–Ω—É—Å (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞)');
    console.log('   - –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBonusScenario();
