const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

function getCurrentUTC3Time() {
  const now = new Date();
  return new Date(now.getTime() + 3 * 60 * 60 * 1000);
}

function getCurrentDayStartUTC3() {
  const utc3Now = getCurrentUTC3Time();
  utc3Now.setHours(0, 0, 0, 0);
  return new Date(utc3Now.getTime() - 3 * 60 * 60 * 1000);
}

async function checkDailyDeposits() {
  try {
    console.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...\n');
    
    const adminId = "056944a7-805e-46c7-b36a-a2cef865fcc5";
    const todayStart = getCurrentDayStartUTC3();
    
    console.log(`üïê –ù–∞—á–∞–ª–æ –¥–Ω—è UTC+3: ${todayStart.toISOString()}`);
    console.log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC+3: ${getCurrentUTC3Time().toISOString()}\n`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –¥–µ–Ω—å
    const todayDeposits = await prisma.processor_deposits.findMany({
      where: {
        processorId: adminId,
        createdAt: {
          gte: todayStart,
        },
      },
      orderBy: {
        createdAt: 'asc'
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: ${todayDeposits.length}\n`);
    
    let totalAmount = 0;
    let totalBonus = 0;
    
    todayDeposits.forEach((deposit, index) => {
      totalAmount += deposit.amount;
      totalBonus += deposit.bonusAmount;
      
      console.log(`${index + 1}. $${deposit.amount} ${deposit.currency} ‚Üí ${deposit.bonusRate}% ‚Üí $${deposit.bonusAmount} –±–æ–Ω—É—Å`);
      console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É: $${totalAmount}`);
      console.log(`   Email: ${deposit.playerEmail}`);
      console.log(`   –í—Ä–µ–º—è: ${deposit.createdAt.toISOString()}\n`);
    });
    
    console.log(`üí∞ –ò–¢–û–ì–û:`);
    console.log(`   –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: $${totalAmount}`);
    console.log(`   –û–±—â–∏–π –±–æ–Ω—É—Å: $${totalBonus}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫—É—é —Å–µ—Ç–∫—É –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–ø–æ–∑–∏—Ç
    console.log(`\nüîç –°–µ—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ (–æ–±—â–∞—è —Å—É–º–º–∞ $${totalAmount}):`);
    
    const nextBonusGrid = await prisma.bonus_grid.findFirst({
      where: {
        isActive: true,
        shiftType: 'MORNING',
        minAmount: { lte: totalAmount },
        OR: [
          { maxAmount: { gte: totalAmount } },
          { maxAmount: null }
        ]
      },
      orderBy: { bonusPercentage: "desc" }
    });

    if (nextBonusGrid) {
      console.log(`   ‚Üí –°–ª–µ–¥—É—é—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å ${nextBonusGrid.bonusPercentage}% –±–æ–Ω—É—Å`);
      console.log(`   ‚Üí –î–∏–∞–ø–∞–∑–æ–Ω: $${nextBonusGrid.minAmount}-${nextBonusGrid.maxAmount || '‚àû'}`);
    } else {
      console.log(`   ‚Üí –°–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª—É—á–∏—Ç 0% –±–æ–Ω—É—Å`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDailyDeposits();
