#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function resetAdminPassword() {
  try {
    console.log('üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    const email = 'admin@umbra-platform.dev';
    const newPassword = 'admin123!';
    const hashedPassword = await bcrypt.hash(newPassword, 12);
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.users.findUnique({
      where: { email }
    });
    
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/create-admin.js');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.users.update({
      where: { email },
      data: { password: hashedPassword }
    });
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!');
    console.log(`üìß Email: ${email}`);
    console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}`);
    console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetAdminPassword();

