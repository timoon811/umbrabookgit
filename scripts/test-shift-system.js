const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UTC+3 –≤—Ä–µ–º–µ–Ω–∏
function getCurrentUTC3Time() {
  const now = new Date();
  // –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –∫ UTC
  const utc3 = new Date(now.getTime() + (3 * 60 * 60 * 1000));
  return utc3;
}

async function createTestShiftData() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const processors = await prisma.users.findMany({
      where: { 
        role: 'PROCESSOR',
        status: 'APPROVED'
      }
    });

    if (processors.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${processors.length} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤`);

    const currentTime = getCurrentUTC3Time();
    const today = new Date(currentTime);
    today.setUTCHours(6, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC+3

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Å–º–µ–Ω –∏ –∏—Ö –≤—Ä–µ–º—è
    const shiftTypes = [
      { type: 'MORNING', startHour: 6, endHour: 14 },
      { type: 'DAY', startHour: 14, endHour: 22 },
      { type: 'NIGHT', startHour: 22, endHour: 6 } // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    ];

    let createdShifts = 0;

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for (let dayOffset = -7; dayOffset <= 0; dayOffset++) {
      const shiftDate = new Date(today);
      shiftDate.setUTCDate(today.getUTCDate() + dayOffset);

      for (const processor of processors) {
        // –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ 1-2 —Å–º–µ–Ω—ã –≤ –¥–µ–Ω—å
        const shiftsPerDay = Math.floor(Math.random() * 2) + 1;
        const selectedShifts = shiftTypes.slice(0, shiftsPerDay);

        for (const shiftInfo of selectedShifts) {
          const scheduledStart = new Date(shiftDate);
          scheduledStart.setUTCHours(shiftInfo.startHour, 0, 0, 0);

          const scheduledEnd = new Date(shiftDate);
          if (shiftInfo.type === 'NIGHT') {
            // –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            scheduledEnd.setUTCDate(shiftDate.getUTCDate() + 1);
            scheduledEnd.setUTCHours(shiftInfo.endHour, 0, 0, 0);
          } else {
            scheduledEnd.setUTCHours(shiftInfo.endHour, 0, 0, 0);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
          let status = 'SCHEDULED';
          let actualStart = null;
          let actualEnd = null;
          let notes = null;

          // –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (dayOffset < 0) {
            const random = Math.random();
            if (random < 0.1) {
              // 10% —Å–º–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω—ã
              status = 'MISSED';
            } else if (random < 0.8) {
              // 70% —Å–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω—ã
              status = 'COMPLETED';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
              actualStart = new Date(scheduledStart);
              actualStart.setMinutes(actualStart.getMinutes() + Math.floor(Math.random() * 10) - 5); // ¬±5 –º–∏–Ω—É—Ç
              
              actualEnd = new Date(scheduledEnd);
              actualEnd.setMinutes(actualEnd.getMinutes() + Math.floor(Math.random() * 20) - 10); // ¬±10 –º–∏–Ω—É—Ç
              
              const workQuality = ['–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–º–µ–Ω–∞', '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'];
              notes = workQuality[Math.floor(Math.random() * workQuality.length)];
            } else {
              // 10% —Å–º–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã (–¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–Ω–µ–π)
              status = 'ACTIVE';
              actualStart = new Date(scheduledStart);
              actualStart.setMinutes(actualStart.getMinutes() + Math.floor(Math.random() * 10) - 5);
            }
          }
          // –î–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–º–µ–Ω–∞
          const existingShift = await prisma.processor_shifts.findFirst({
            where: {
              processorId: processor.id,
              shiftType: shiftInfo.type,
              shiftDate: shiftDate
            }
          });

          if (!existingShift) {
            await prisma.processor_shifts.create({
              data: {
                processorId: processor.id,
                shiftType: shiftInfo.type,
                shiftDate: shiftDate,
                scheduledStart: scheduledStart,
                scheduledEnd: scheduledEnd,
                actualStart: actualStart,
                actualEnd: actualEnd,
                status: status,
                notes: notes
              }
            });

            createdShifts++;
          }
        }
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdShifts} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–º–µ–Ω`);

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.processor_shifts.groupBy({
      by: ['status'],
      _count: {
        id: true
      }
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω:');
    stats.forEach(stat => {
      const labels = {
        'SCHEDULED': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        'ACTIVE': '–ê–∫—Ç–∏–≤–Ω—ã—Ö',
        'COMPLETED': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'MISSED': '–ü—Ä–æ–ø—É—â–µ–Ω–æ'
      };
      console.log(`   ${labels[stat.status] || stat.status}: ${stat._count.id}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function checkShiftSettings() {
  try {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω...');
    
    const settings = await prisma.shift_settings.findMany();
    
    if (settings.length === 0) {
      console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      
      const defaultSettings = [
        {
          shiftType: 'MORNING',
          startHour: 6,
          startMinute: 0,
          endHour: 14,
          endMinute: 0,
          name: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞',
          description: '–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ —Å 06:00 –¥–æ 14:00 –ú–°–ö'
        },
        {
          shiftType: 'DAY',
          startHour: 14,
          startMinute: 0,
          endHour: 22,
          endMinute: 0,
          name: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞',
          description: '–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å 14:00 –¥–æ 22:00 –ú–°–ö'
        },
        {
          shiftType: 'NIGHT',
          startHour: 22,
          startMinute: 0,
          endHour: 6,
          endMinute: 0,
          name: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞',
          description: '–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ —Å 22:00 –¥–æ 06:00 –ú–°–ö'
        }
      ];

      for (const setting of defaultSettings) {
        await prisma.shift_settings.upsert({
          where: { shiftType: setting.shiftType },
          update: setting,
          create: setting
        });
      }
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω:`);
      settings.forEach(setting => {
        console.log(`   ${setting.name}: ${setting.startHour}:${setting.startMinute.toString().padStart(2, '0')} - ${setting.endHour}:${setting.endMinute.toString().padStart(2, '0')}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω:', error);
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω...\n');
  
  await checkShiftSettings();
  await createTestShiftData();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–º–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
  console.log('üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å -> –û–±—Ä–∞–±–æ—Ç–∫–∞ -> –°–º–µ–Ω—ã -> –õ–æ–≥–∏ —Å–º–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { createTestShiftData, checkShiftSettings };
