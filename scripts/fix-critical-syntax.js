#!/usr/bin/env node

/**
 * –¢–æ—á–µ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 */

const fs = require('fs');

const problemFiles = [
  'src/app/api/admin/goals/[id]/route.ts',
  'src/app/api/admin/goals/route.ts', 
  'src/app/api/admin/shift-logs/route.ts',
  'src/app/api/admin/shifts/auto-end-check/route.ts',
  'src/app/api/admin/upload/route.ts'
];

function fixCriticalFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å return –≤ catch –±–ª–æ–∫–∞—Ö
    content = content.replace(
      /(\s+}\s*catch\s*\(\s*error[^{]*\{[^}]*)(,)\s*->\s*return/g,
      '$1\n    return'
    );
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ catch –±–ª–æ–∫–∏
    content = content.replace(
      /(\s+)\} catch \(error\) \{\s*console\.error\([^)]+\);\s*,\s*->\s*return NextResponse\.json\(/g,
      '$1} catch (error: any) {\n$1  console.error(\'API Error:\', error);\n$1  return NextResponse.json('
    );
    
    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ catch –±–ª–æ–∫–∞—Ö
    content = content.replace(
      /console\.error\([^)]+\);\s*,\s*->\s*return/g,
      'console.error(\'API Error:\', error);\n    return'
    );
    
    // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É return –≤ error handlers
    content = content.replace(
      /(\s+return NextResponse\.json\(\s*\{ error: [^}]+\},\s*\{ status: \d+ \}\s*)\`->\s*\);/g,
      '$1);'
    );
    
    // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Expression expected –æ—à–∏–±–∫–∏
    content = content.replace(
      /(\s+\{ status: \d+ \}\s*)\`->\s*\);(\s+\}\s*\}\s*\^)/g,
      '$1);$2'
    );
    
    // 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º EOF –ø—Ä–æ–±–ª–µ–º—ã
    content = content.replace(/\`->/g, '');
    content = content.replace(/\|\s*$/gm, '');
    content = content.replace(/\^$/gm, '');
    
    // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    content = content.replace(
      /(\s+)\}\s*\}\s*\^?$/,
      '$1}\n}'
    );
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${filePath}: ${error.message}`);
    return false;
  }
}

console.log('üîß –¢–æ—á–µ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...');

let fixedCount = 0;

for (const file of problemFiles) {
  if (fs.existsSync(file)) {
    if (fixCriticalFile(file)) {
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
      fixedCount++;
    } else {
      console.log(`‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${file}`);
    }
  } else {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
  }
}

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
console.log('\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...');
const { execSync } = require('child_process');

try {
  execSync('npm run build', { stdio: 'pipe', timeout: 60000 });
  console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!');
  process.exit(0);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤');
  const output = error.stdout?.toString() || error.stderr?.toString() || '';
  console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
  console.log(output.split('\n').slice(-10).join('\n'));
  process.exit(1);
}
