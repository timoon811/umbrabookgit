const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testWallets() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = await prisma.users.findFirst();
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ—à–µ–ª—å–∫–∏
    const existingWallets = await prisma.user_wallets.findMany({
      where: { userId: user.id }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${existingWallets.length}`);
    
    if (existingWallets.length > 0) {
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ—à–µ–ª—å–∫–∏:');
      existingWallets.forEach(wallet => {
        console.log(`  - ${wallet.network}: ${wallet.address}${wallet.label ? ` (${wallet.label})` : ''}`);
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
    console.log('\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...');
    
    const testWallet = await prisma.user_wallets.create({
      data: {
        userId: user.id,
        network: 'BTC',
        address: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
        label: '–¢–µ—Å—Ç–æ–≤—ã–π BTC –∫–æ—à–µ–ª–µ–∫'
      }
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫: ${testWallet.network} - ${testWallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–ª—Å—è
    const createdWallet = await prisma.user_wallets.findUnique({
      where: { id: testWallet.id }
    });
    
    if (createdWallet) {
      console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log(`  ID: ${createdWallet.id}`);
      console.log(`  –°–µ—Ç—å: ${createdWallet.network}`);
      console.log(`  –ê–¥—Ä–µ—Å: ${createdWallet.address}`);
      console.log(`  –ú–µ—Ç–∫–∞: ${createdWallet.label || '–ù–µ—Ç'}`);
      console.log(`  –ê–∫—Ç–∏–≤–µ–Ω: ${createdWallet.isActive}`);
      console.log(`  –°–æ–∑–¥–∞–Ω: ${createdWallet.createdAt}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const userWithWallets = await prisma.users.findUnique({
      where: { id: user.id },
      include: { wallets: true }
    });
    
    console.log(`\nüîó –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userWithWallets.wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testWallets();
