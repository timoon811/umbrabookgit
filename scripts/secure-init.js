#!/usr/bin/env node

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UmbraPL
 * –ó–∞–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ /api/seed –∏ /api/admin/deploy —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const readline = require('readline');
const crypto = require('crypto');

const prisma = new PrismaClient();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

function generateSecurePassword() {
  return crypto.randomBytes(16).toString('hex');
}

async function validatePassword(password) {
  if (password.length < 8) {
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫–∂–µ —Ü–∏—Ñ—Ä—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
  const weakPasswords = ['password', '123456', 'admin', 'umbra2024', 'user123'];
  if (weakPasswords.some(weak => password.toLowerCase().includes(weak))) {
    throw new Error('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
  }
  
  return true;
}

async function createSecureAdmin() {
  try {
    log('\nüîê –°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', 'bold');
    log('‚ïê'.repeat(50), 'blue');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    const existingAdmin = await prisma.users.findFirst({
      where: { role: 'ADMIN' }
    });
    
    if (existingAdmin) {
      logWarning('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   ID: ${existingAdmin.id}`);
      
      const overwrite = await question('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞? (y/N): ');
      if (overwrite.toLowerCase() !== 'y') {
        return existingAdmin;
      }
    }
    
    // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞
    const email = await question('Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ') || 'admin@umbra-platform.dev';
    
    let password;
    const useGenerated = await question('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å? (Y/n): ');
    
    if (useGenerated.toLowerCase() !== 'n') {
      password = generateSecurePassword();
      logSuccess(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: ${password}`);
      logWarning('–°–û–•–†–ê–ù–ò–¢–ï –≠–¢–û–¢ –ü–ê–†–û–õ–¨ –í –ë–ï–ó–û–ü–ê–°–ù–û–ú –ú–ï–°–¢–ï!');
    } else {
      while (true) {
        password = await question('–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
        try {
          await validatePassword(password);
          break;
        } catch (error) {
          logError(error.message);
        }
      }
    }
    
    const name = await question('–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ') || 'Umbra Platform Admin';
    const telegram = await question('Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ') || '';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    logInfo('–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const hashedPassword = await bcrypt.hash(password, 12);
    
    const admin = await prisma.users.upsert({
      where: { email },
      update: {
        password: hashedPassword,
        name,
        telegram: telegram || null,
        role: 'ADMIN',
        status: 'APPROVED'
      },
      create: {
        email,
        password: hashedPassword,
        name,
        telegram: telegram || null,
        role: 'ADMIN',
        status: 'APPROVED'
      }
    });
    
    logSuccess('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`   ID: ${admin.id}`);
    console.log(`   Email: ${admin.email}`);
    console.log(`   Name: ${admin.name}`);
    
    return admin;
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error.message}`);
    throw error;
  }
}

async function initializeDocumentation() {
  try {
    log('\nüìö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò', 'bold');
    log('‚ïê'.repeat(50), 'blue');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    const existingDocs = await prisma.documentation.count();
    if (existingDocs > 0) {
      logInfo(`–ù–∞–π–¥–µ–Ω–æ ${existingDocs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      const reinit = await question('–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é? (y/N): ');
      if (reinit.toLowerCase() !== 'y') {
        return;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const documentationSections = [
      {
        name: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã",
        key: "getting-started",
        description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
        order: 1,
        isVisible: true,
      },
      {
        name: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞",
        key: "installation",
        description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        order: 2,
        isVisible: true,
      },
      {
        name: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
        key: "api-reference",
        description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        order: 3,
        isVisible: true,
      },
    ];

    const createdSections = new Map();
    
    for (const section of documentationSections) {
      const createdSection = await prisma.documentation_sections.upsert({
        where: { key: section.key },
        update: section,
        create: section,
      });
      createdSections.set(section.key, createdSection.id);
      logInfo(`–°–æ–∑–¥–∞–Ω —Ä–∞–∑–¥–µ–ª: ${section.name}`);
    }

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const documentationPages = [
      {
        title: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å Umbra Platform",
        description: "–ë–∞–∑–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
        slug: "getting-started",
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Umbra Platform"
          },
          {
            type: "paragraph",
            content: "Umbra Platform - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π, –∫—É—Ä—Å–∞–º–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."
          },
          {
            type: "heading",
            level: 2,
            content: "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"
          },
          {
            type: "paragraph",
            content: "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∏–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã."
          }
        ]),
        sectionId: createdSections.get("getting-started"),
        order: 1,
        isPublished: true,
      },
      {
        title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
        description: "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        slug: "installation", 
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Umbra Platform"
          },
          {
            type: "paragraph",
            content: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."
          }
        ]),
        sectionId: createdSections.get("installation"),
        order: 2,
        isPublished: true,
      },
      {
        title: "API —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫",
        description: "–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ API –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        slug: "api-reference",
        content: JSON.stringify([
          {
            type: "heading",
            level: 1,
            content: "API –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
          },
          {
            type: "paragraph",
            content: "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API endpoints –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /api-docs"
          }
        ]),
        sectionId: createdSections.get("api-reference"),
        order: 3,
        isPublished: true,
      },
    ];

    for (const page of documentationPages) {
      await prisma.documentation.upsert({
        where: { slug: page.slug },
        update: page,
        create: page,
      });
      logInfo(`–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page.title}`);
    }
    
    logSuccess('–ë–∞–∑–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${error.message}`);
    throw error;
  }
}

async function checkDatabaseConnection() {
  try {
    await prisma.$connect();
    logSuccess('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
    return false;
  }
}

async function main() {
  try {
    log('\nüöÄ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UMBRA PLATFORM', 'bold');
    log('‚ïê'.repeat(60), 'blue');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const dbConnected = await checkDatabaseConnection();
    if (!dbConnected) {
      process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await createSecureAdmin();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    await initializeDocumentation();
    
    log('\nüéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!', 'bold');
    log('‚ïê'.repeat(50), 'green');
    logSuccess('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    
    if (admin) {
      log('\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –í–•–û–î–ê:', 'bold');
      console.log(`   URL: http://localhost:3000/login`);
      console.log(`   Email: ${admin.email}`);
      logWarning('   –ü–∞—Ä–æ–ª—å: –°–û–•–†–ê–ù–ï–ù –í–´–®–ï –í –õ–û–ì–ê–•');
    }
    
    log('\nüìñ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:', 'bold');
    console.log('   1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
    console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('   3. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    
  } catch (error) {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umbra Platform

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node scripts/secure-init.js [options]

–û–ü–¶–ò–ò:
  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --admin-only   –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  --docs-only    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
  ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π
  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
  ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ hardcoded —Å–µ–∫—Ä–µ—Ç–æ–≤
  ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  
–ü–†–ò–ú–ï–†–´:
  node scripts/secure-init.js
  node scripts/secure-init.js --admin-only
  `);
  process.exit(0);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const fs = require('fs');
if (!fs.existsSync('package.json')) {
  logError('–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

main();
