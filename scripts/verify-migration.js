const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyMigration() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersCount = await prisma.users.count();
    const adminUsers = await prisma.users.count({ where: { role: 'ADMIN' } });
    const processorUsers = await prisma.users.count({ where: { role: 'PROCESSOR' } });
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount} –≤—Å–µ–≥–æ`);
    console.log(`   - –ê–¥–º–∏–Ω—ã: ${adminUsers}`);
    console.log(`   - –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: ${processorUsers}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentProjects = await prisma.content_projects.findMany({
      include: {
        documentationSections: {
          include: {
            pages: true
          }
        }
      }
    });
    
    console.log(`üìÇ –ü—Ä–æ–µ–∫—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentProjects.length}`);
    contentProjects.forEach(project => {
      console.log(`   - ${project.name}: ${project.documentationSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤`);
      const totalPages = project.documentationSections.reduce((sum, section) => sum + section.pages.length, 0);
      console.log(`     –°—Ç—Ä–∞–Ω–∏—Ü –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${totalPages}`);
    });
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const sectionsCount = await prisma.documentation_sections.count();
    const sectionsWithProject = await prisma.documentation_sections.count({
      where: { projectId: { not: null } }
    });
    
    console.log(`üìö –†–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${sectionsCount} –≤—Å–µ–≥–æ`);
    console.log(`   - –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º: ${sectionsWithProject}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const pagesCount = await prisma.documentation.count();
    const publishedPages = await prisma.documentation.count({ where: { isPublished: true } });
    
    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${pagesCount} –≤—Å–µ–≥–æ`);
    console.log(`   - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${publishedPages}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const accountsCount = await prisma.finance_accounts.count();
    const categoriesCount = await prisma.finance_categories.count();
    const transactionsCount = await prisma.finance_transactions.count();
    
    console.log(`üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
    console.log(`   - –ê–∫–∫–∞—É–Ω—Ç—ã: ${accountsCount}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount}`);
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactionsCount}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
    
    const sampleSection = await prisma.documentation_sections.findFirst({
      include: {
        pages: {
          take: 1
        },
        project: true
      }
    });
    
    if (sampleSection) {
      console.log(`   –†–∞–∑–¥–µ–ª: "${sampleSection.name}" (${sampleSection.key})`);
      console.log(`   –ü—Ä–æ–µ–∫—Ç: ${sampleSection.project?.name || '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
      if (sampleSection.pages[0]) {
        console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: "${sampleSection.pages[0].title}"`);
        console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${sampleSection.pages[0].content?.slice(0, 100)}...`);
      }
    }

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifyMigration();
