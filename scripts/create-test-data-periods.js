const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestDataForPeriods() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤');
  console.log('================================================');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await prisma.users.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!admin) {
      console.error('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω: ${admin.name} (${admin.email})`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    await prisma.processor_deposits.deleteMany({
      where: { processorId: admin.id }
    });

    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+3
    const utc3Now = new Date();
    utc3Now.setHours(utc3Now.getHours() + 3);
    
    console.log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC+3: ${utc3Now.toISOString()}`);

    // 1. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –í–ß–ï–†–ê (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ "—Å–µ–≥–æ–¥–Ω—è" –∏—Ö –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç)
    const yesterday = new Date(utc3Now);
    yesterday.setDate(yesterday.getDate() - 1);
    yesterday.setHours(14, 30, 0, 0); // 14:30 –≤—á–µ—Ä–∞
    
    console.log(`üìÖ –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: ${yesterday.toISOString()}`);
    
    for (let i = 0; i < 3; i++) {
      const depositTime = new Date(yesterday);
      depositTime.setMinutes(depositTime.getMinutes() + i * 30);
      
      await prisma.processor_deposits.create({
        data: {
          processorId: admin.id,
          playerId: `test-player-yesterday-${i}`,
          playerEmail: `yesterday${i}@test.com`,
          amount: 1000 + i * 500,
          currency: 'USD',
          currencyType: 'fiat',
          commissionRate: 30,
          bonusRate: 5,
          bonusAmount: (1000 + i * 500) * 0.05,
          platformCommissionPercent: 10,
          platformCommissionAmount: (1000 + i * 500) * 0.1,
          processorEarnings: (1000 + i * 500) * 0.25,
          status: 'APPROVED',
          createdAt: depositTime
        }
      });
    }

    // 2. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –°–ï–ì–û–î–ù–Ø
    const today = new Date(utc3Now);
    today.setHours(10, 0, 0, 0); // 10:00 —Å–µ–≥–æ–¥–Ω—è
    
    console.log(`üìÖ –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${today.toISOString()}`);
    
    for (let i = 0; i < 5; i++) {
      const depositTime = new Date(today);
      depositTime.setMinutes(depositTime.getMinutes() + i * 45);
      
      await prisma.processor_deposits.create({
        data: {
          processorId: admin.id,
          playerId: `test-player-today-${i}`,
          playerEmail: `today${i}@test.com`,
          amount: 2000 + i * 300,
          currency: 'USD',
          currencyType: 'fiat',
          commissionRate: 30,
          bonusRate: 5,
          bonusAmount: (2000 + i * 300) * 0.05,
          platformCommissionPercent: 10,
          platformCommissionAmount: (2000 + i * 300) * 0.1,
          processorEarnings: (2000 + i * 300) * 0.25,
          status: 'APPROVED',
          createdAt: depositTime
        }
      });
    }

    // 3. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ü–†–û–®–õ–£–Æ –ù–ï–î–ï–õ–Æ (–Ω–æ –Ω–µ –∑–∞ —ç—Ç—É)
    const lastWeek = new Date(utc3Now);
    lastWeek.setDate(lastWeek.getDate() - 8); // 8 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    lastWeek.setHours(12, 0, 0, 0);
    
    console.log(`üìÖ –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é: ${lastWeek.toISOString()}`);
    
    for (let i = 0; i < 2; i++) {
      const depositTime = new Date(lastWeek);
      depositTime.setHours(depositTime.getHours() + i * 6);
      
      await prisma.processor_deposits.create({
        data: {
          processorId: admin.id,
          playerId: `test-player-lastweek-${i}`,
          playerEmail: `lastweek${i}@test.com`,
          amount: 800 + i * 400,
          currency: 'USD',
          currencyType: 'fiat',
          commissionRate: 30,
          bonusRate: 5,
          bonusAmount: (800 + i * 400) * 0.05,
          platformCommissionPercent: 10,
          platformCommissionAmount: (800 + i * 400) * 0.1,
          processorEarnings: (800 + i * 400) * 0.25,
          status: 'APPROVED',
          createdAt: depositTime
        }
      });
    }

    // 4. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ü–†–û–®–õ–´–ô –ú–ï–°–Ø–¶
    const lastMonth = new Date(utc3Now);
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    lastMonth.setHours(15, 0, 0, 0);
    
    console.log(`üìÖ –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: ${lastMonth.toISOString()}`);
    
    for (let i = 0; i < 4; i++) {
      const depositTime = new Date(lastMonth);
      depositTime.setDate(depositTime.getDate() + i * 3);
      
      await prisma.processor_deposits.create({
        data: {
          processorId: admin.id,
          playerId: `test-player-lastmonth-${i}`,
          playerEmail: `lastmonth${i}@test.com`,
          amount: 1500 + i * 200,
          currency: 'USD',
          currencyType: 'fiat',
          commissionRate: 30,
          bonusRate: 5,
          bonusAmount: (1500 + i * 200) * 0.05,
          platformCommissionPercent: 10,
          platformCommissionAmount: (1500 + i * 200) * 0.1,
          processorEarnings: (1500 + i * 200) * 0.25,
          status: 'APPROVED',
          createdAt: depositTime
        }
      });
    }

    // 5. –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–∫–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    console.log(`‚è∞ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã...`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–º–µ–Ω—ã
    await prisma.processor_shifts.deleteMany({
      where: { processorId: admin.id }
    });

    // –°–º–µ–Ω–∞ –∑–∞ –≤—á–µ—Ä–∞
    const yesterdayShift = new Date(yesterday);
    yesterdayShift.setHours(8, 0, 0, 0);
    const yesterdayShiftEnd = new Date(yesterdayShift);
    yesterdayShiftEnd.setHours(16, 0, 0, 0);

    await prisma.processor_shifts.create({
      data: {
        processorId: admin.id,
        shiftType: 'DAY',
        shiftDate: yesterdayShift,
        scheduledStart: yesterdayShift,
        scheduledEnd: yesterdayShiftEnd,
        actualStart: yesterdayShift,
        actualEnd: yesterdayShiftEnd,
        status: 'COMPLETED'
      }
    });

    // –°–º–µ–Ω–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∞–∫—Ç–∏–≤–Ω–∞—è)
    const todayShift = new Date(today);
    todayShift.setHours(9, 0, 0, 0);
    const todayShiftEnd = new Date(todayShift);
    todayShiftEnd.setHours(17, 0, 0, 0);

    await prisma.processor_shifts.create({
      data: {
        processorId: admin.id,
        shiftType: 'DAY',
        shiftDate: todayShift,
        scheduledStart: todayShift,
        scheduledEnd: todayShiftEnd,
        actualStart: todayShift,
        actualEnd: todayShiftEnd,
        status: 'COMPLETED'
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('');
    console.log('üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('–°–µ–≥–æ–¥–Ω—è: 5 –¥–µ–ø–æ–∑–∏—Ç–æ–≤, ~$11,200');
    console.log('–ù–µ–¥–µ–ª—è: 8 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (5 —Å–µ–≥–æ–¥–Ω—è + 3 –≤—á–µ—Ä–∞), ~$15,700');
    console.log('–ú–µ—Å—è—Ü: 14 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (8 –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é + 2 –∑–∞ –ø—Ä–æ—à–ª—É—é + 4 –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü), ~$22,500');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestDataForPeriods();
