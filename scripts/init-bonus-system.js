const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function initBonusSystem() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const baseSettings = await prisma.bonus_settings.upsert({
      where: { id: 'default' },
      update: {},
      create: {
        id: 'default',
        name: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤',
        description: '–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π –∏ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        baseCommissionRate: 30.0,
        baseBonusRate: 5.0,
        tiers: 'progressive',
        isActive: true,
      },
    });

    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', baseSettings.name);

    // –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Å–µ—Ç–∫—É
    const bonusGrids = await Promise.all([
      prisma.bonus_grid.upsert({
        where: { id: 'grid-1' },
        update: {},
        create: {
          id: 'grid-1',
          minAmount: 0,
          maxAmount: 1000,
          bonusPercentage: 5.0,
          description: '–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          isActive: true,
        },
      }),
      prisma.bonus_grid.upsert({
        where: { id: 'grid-2' },
        update: {},
        create: {
          id: 'grid-2',
          minAmount: 1000,
          maxAmount: 5000,
          bonusPercentage: 7.5,
          description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          isActive: true,
        },
      }),
      prisma.bonus_grid.upsert({
        where: { id: 'grid-3' },
        update: {},
        create: {
          id: 'grid-3',
          minAmount: 5000,
          maxAmount: null,
          bonusPercentage: 10.0,
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          isActive: true,
        },
      }),
    ]);

    console.log('‚úÖ –ë–æ–Ω—É—Å–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', bonusGrids.length, '—Å—Ç—É–ø–µ–Ω–µ–π');

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const motivations = await Promise.all([
      prisma.bonus_motivations.upsert({
        where: { id: 'motivation-1' },
        update: {},
        create: {
          id: 'motivation-1',
          type: 'PERCENTAGE',
          name: '–ë–æ–Ω—É—Å –∑–∞ 100 –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ 100 –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
          value: 2.0,
          conditions: '{"minDeposits": 100}',
          isActive: true,
        },
      }),
      prisma.bonus_motivations.upsert({
        where: { id: 'motivation-2' },
        update: {},
        create: {
          id: 'motivation-2',
          type: 'FIXED_AMOUNT',
          name: '–ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º',
          description: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º $10,000+',
          value: 50.0,
          conditions: '{"minDailyAmount": 10000}',
          isActive: true,
        },
      }),
      prisma.bonus_motivations.upsert({
        where: { id: 'motivation-3' },
        update: {},
        create: {
          id: 'motivation-3',
          type: 'PERCENTAGE',
          name: '–ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
          description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
          value: 1.0,
          conditions: '{"consecutiveDays": 7}',
          isActive: true,
        },
      }),
    ]);

    console.log('‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', motivations.length, '—à—Ç.');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    const instructions = await Promise.all([
      prisma.processing_instructions.upsert({
        where: { id: 'instruction-1' },
        update: {},
        create: {
          id: 'instruction-1',
          title: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏',
          content: '–í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π. –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.',
          category: 'rules',
          priority: 5,
          isActive: true,
          isPublic: true,
        },
      }),
      prisma.processing_instructions.upsert({
        where: { id: 'instruction-2' },
        update: {},
        create: {
          id: 'instruction-2',
          title: '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –±–æ–Ω—É—Å—ã',
          content: '–ë–æ–Ω—É—Å—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–µ—Ç–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤.',
          category: 'faq',
          priority: 4,
          isActive: true,
          isPublic: true,
        },
      }),
    ]);

    console.log('‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', instructions.length, '—à—Ç.');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∫—Ä–∏–ø—Ç–æ–≤
    const scripts = await Promise.all([
      prisma.processing_scripts.upsert({
        where: { id: 'script-1' },
        update: {},
        create: {
          id: 'script-1',
          title: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
          content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º. –ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–Ω–µ—Å—Ç–∏?',
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
          category: 'greeting',
          language: 'ru',
          isActive: true,
          isPublic: true,
          usageCount: 0,
        },
      }),
      prisma.processing_scripts.upsert({
        where: { id: 'script-2' },
        update: {},
        create: {
          id: 'script-2',
          title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞',
          content: '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É ${amount} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ë–æ–Ω—É—Å ${bonus} –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
          description: '–°–∫—Ä–∏–ø—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞',
          category: 'confirmation',
          language: 'ru',
          isActive: true,
          isPublic: true,
          usageCount: 0,
        },
      }),
    ]);

    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', scripts.length, '—à—Ç.');

    console.log('üéâ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log('');
    console.log('üìä –°–æ–∑–¥–∞–Ω–æ:');
    console.log(`   - –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${baseSettings.name}`);
    console.log(`   - –°—Ç—É–ø–µ–Ω–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–µ—Ç–∫–∏: ${bonusGrids.length}`);
    console.log(`   - –ú–æ—Ç–∏–≤–∞—Ü–∏–π: ${motivations.length}`);
    console.log(`   - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: ${instructions.length}`);
    console.log(`   - –°–∫—Ä–∏–ø—Ç–æ–≤: ${scripts.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
  } finally {
    await prisma.$disconnect();
  }
}

initBonusSystem();
