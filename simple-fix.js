#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
const problemFiles = [
  'src/app/api/admin/users/[id]/shifts/route.ts',
  'src/app/api/manager/goals/route.ts',
  'src/app/api/manager/stats-detailed/route.ts'
];

function fixSpecificFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ user
    if (filePath.includes('users/[id]/shifts')) {
      content = content.replace(
        /const user = await prisma\.users\.findUnique\(\{[^}]+\}\);(\s*)const user = await/g,
        'const user = await prisma.users.findUnique({\n      where: {\n        id: userId\n      }\n    });$1const targetUser = await'
      );
    }
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ authResult
    content = content.replace(
      /(const authResult = await \w+Auth\([^)]*\);[^}]*const \{ user \} = authResult;)\s*(const authResult = await)/g,
      '$1\n    const authResult2 = await'
    );
    
    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π user –Ω–∞ targetUser
    if (content.includes('const targetUser = await')) {
      // –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π user
      const lines = content.split('\n');
      let afterTargetUser = false;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('const targetUser = await')) {
          afterTargetUser = true;
          continue;
        }
        
        if (afterTargetUser && lines[i].includes('user.') && !lines[i].includes('targetUser')) {
          lines[i] = lines[i].replace(/\buser\./g, 'targetUser.');
        }
      }
      
      content = lines.join('\n');
    }
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${filePath}: ${error.message}`);
    return false;
  }
}

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');

let fixedCount = 0;

for (const file of problemFiles) {
  if (fixSpecificFile(file)) {
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
    fixedCount++;
  } else {
    console.log(`‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${file}`);
  }
}

console.log(`\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);

console.log('\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...');
const { execSync } = require('child_process');

try {
  const result = execSync('npm run build', { 
    stdio: 'pipe', 
    timeout: 60000,
    encoding: 'utf8'
  });
  
  if (result.includes('‚úì Compiled successfully')) {
    console.log('üéâ –°–ë–û–†–ö–ê –£–°–ü–ï–®–ù–ê!');
  } else {
    console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
  
} catch (error) {
  const errorOutput = error.stdout || error.stderr || '';
  
  if (errorOutput.includes('‚úì Compiled successfully')) {
    console.log('üéâ –°–ë–û–†–ö–ê –£–°–ü–ï–®–ù–ê!');
  } else {
    console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏:');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫ –æ—à–∏–±–∫–∏
    const lines = errorOutput.split('\n');
    const importantLines = lines.slice(0, 15);
    console.log(importantLines.join('\n'));
  }
}

console.log('\nüéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

// –°–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
setTimeout(() => {
  try {
    fs.unlinkSync(__filename);
  } catch (e) {}
}, 1000);


